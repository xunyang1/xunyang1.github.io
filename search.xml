<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DVWA之XSS练习</title>
      <link href="/2021/07/15/dvwa_xss/"/>
      <url>/2021/07/15/dvwa_xss/</url>
      
        <content type="html"><![CDATA[<p>一、实验环境</p><p> 一台win10电脑，既做服务器端，也是客户端。</p><p>二、实验原理</p><p>反射型XSS用户通过Web客户端提交给服务端的数据，立刻用于解析和显示该用户的结果页面(数据没有在服务端存储)。</p><p>存储型XSS用户通过Web客户端提交给服务端的数据，由服务端保存，然后永久显示在其他用户的页面上。</p><p>三、实验步骤</p><p>(1)登录dvwa，点击反射型xss low级别：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image002.jpg"></p><p>  2.测试输入<script>alert（123）</script></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092334.jpg"></p><ol start="3"><li>查看源码并没有任何字符处理措施：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092354.jpg"></p><p>(2) 将级别改为meduim，执行<script>alert（123）</script>测试</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092401.jpg"></p><p>说明可能存在字符消除函数，删掉了<script>或者</script></p><p>所以输入&lt;scri<script>pt>alert(123)</script>试试</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092413.jpg"></p><p>成功</p><p>查看源码，只是经过了简单的将<script>转换为null的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092419.jpg"></p><p>（3）切换到high级别</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092423.jpg"></p><p>换一个其他弹窗代码，不用<script>改为<img src=0 onerror="alert('xss')"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092427.jpg"></p><p>成功弹窗</p><p>（2）存储型xss，级别low：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092431.jpg"></p><p>尝试输入<script>alert(‘xss’)</script>发现输入到l时无法再进行输入</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092436.jpg"></p><p>查看网页源代码，发现输入最大长度为10：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092741.jpg"></p><p>所以尝试使用burp抓包修改参数</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092443.jpg"></p><p>成功弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092449.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092453.jpg"></p><p>数据库中成功加入javascript代码，而且在每次刷新页面加载评论时都会出发script代码</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092457.jpg"></p><p>刷新页面，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092500.jpg"></p><p>2.更改为medium级别</p><p>继续利用burp修改参数为<script>alert(‘xss’)</script>发现返回：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092510.jpg"></p><p>并没有出现弹窗，并且用户名变为了alert（‘xss’）所以猜测可能使用了字符替代函数，因为js区分大小写，这次可以使用大小写来绕过:</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092514.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092517.jpg"></p><p>成功绕过，显示弹窗，且每次刷新都会弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092525.jpg"></p><p>查看数据库，成功添加</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092529.jpg"></p><p>3.改为high级别，查看源码继续使用了正则表达式</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092534.jpg"></p><p>所以不使用&lt; script &gt;弹窗，改用img标签</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092538.jpg"></p><p>成功弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092542.jpg"></p><p>查看数据库，成功添加，再后来每一次刷新都会触发一次js代码</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715092549.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> js </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研数一笔记</title>
      <link href="/2021/07/15/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/15/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记说明"><a href="#笔记说明" class="headerlink" title="笔记说明"></a>笔记说明</h2><p>本人数一134，这个笔记是我根据2021版武钟祥老师的高数强化讲义以及李永乐老师的线代强化讲义以及余炳森老师的概率强化讲义写的，然后顺序就是按照我排好的看就可以（最好手里有这些书或者电子版），我这个笔记不是概念系统性笔记而是我在听课以及写题的时候觉得需要总结下来或者突然想起了一句话就赶紧记下来的那种，但是也覆盖了很多题型吧然后大部分都是一句话的形式。如果前面有记页码没写书名默认就是我上面提到的那些书，如果是其他书我都标注出来了比如李林880，1800，660，好像里面应该也有复习全书基础篇。然后还有很多前面是一个星号的就是我在写题和听课的时候脑子里闪过的一些话觉得挺重要就赶紧记下来所以没有页码。笔记字写得不好大家凑活看吧，然后里面高数线代概率都有但没有微分中值定理，这块比较灵活多做题靠个人悟了<br>如果看了觉得还不错麻烦也分享出去让更多的人看到，谢谢最后祝各位一战成硕！！！o(*≧▽≦)ツ<br>本人QQ：911365337，有啥问题可以来问我</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1r5a3kU4jU_uj_5jSbvNJ9g">https://pan.baidu.com/s/1r5a3kU4jU_uj_5jSbvNJ9g</a><br>提取码：10ec</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA之sql注入练习</title>
      <link href="/2021/07/14/dvwa_sql/"/>
      <url>/2021/07/14/dvwa_sql/</url>
      
        <content type="html"><![CDATA[<p>一、实验环境</p><p>  一台win10电脑，既做服务器端，也是客户端。</p><p>二、实验原理</p><p>攻击者通过对服务器端注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。</p><p>三、实验步骤</p><h2 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h2><p>（1）登录dvwa，设置等级为low</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image001.png"></p><ol start="2"><li>第一步，判断是否存在注入，是字符型还是数字型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image003.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image005.png"></p><p>输入1’尝试</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image007.png"></p><p>提示1周围出现多个单引号</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image009.jpg"></p><p>故猜测sql查询语句为：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image010.png"></p><ol start="3"><li>猜测sql语句总共查询字段数（利用order by子句）</li></ol><p>（1）根据猜测的sql查询语句来构造</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image012.png"></p><p>注:# 注释掉sql语句后面引号</p><p>（2）输入构造语句</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image014.jpg"></p><p>输入1’ or 1=1 order by 2</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image016.jpg"></p><p>输入1’ or 1=1 order by 3</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094141.png"></p><p>显示无第三列，所以猜测只有两个字段firstname以及secondname。</p><ol start="4"><li>确定字段顺序</li></ol><p>输入1’union select 1,2#</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094920.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image019.png"></p><p>得到first_name在前，surname在后</p><ol start="5"><li>获取数据库名</li></ol><p>注：利用database（）函数和联合查询union</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094919.png"></p><p>输入得：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094922.png"></p><p>由此可看得数据库名为dvwa</p><ol start="6"><li>获取表名，和字段名</li></ol><p>利用mysql自带得表名存储表information_schema.tables</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image024.jpg"></p><p>输入1’union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image026.jpg"></p><p>注：结果两列利用group_concat合并</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image027.png"></p><p>同理利用1′union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’#</p><p>得：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image029.jpg"></p><ol start="7"><li>获得所有字段数据</li></ol><p>输入1′ or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #</p><p>得到：<img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094921.png"></p><p>分析源码：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image033.jpg"></p><h2 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h2><p>（2）设置等级为medium</p><p> <img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210714231917348.png"></p><p>表单变成了可选项，目的是为了让用户在规定范围内选择，防止sql注入，但是我们可以利用burpsuit抓包，修改相应参数来达到sql注入。</p><ol><li>判断是字符型注入还是数字型</li></ol><p>修改参数为 2’ or 333=333 #</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image036.jpg"></p><p>返回页面，说明存在字符转义函数</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image038.jpg"></p><p>试试数字型注入</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image040.jpg"></p><p>成功爆出其他行数据，说明存在数字型注入</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image042.jpg"></p><p>总结：存在数字型注入且服务器代码存在字符转义</p><ol start="2"><li>推出sql语句中字段数，和字段顺序</li></ol><p>继续利用order by子句</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094924.png"></p><p>返回结果：first_name被排序说明第一个字段为first_name</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image046.jpg"></p><p>继续以第二列排序，结果显示其surname被排序说明第二列为surname</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image047.png"></p><p>继续排序第三行，发现无第三行说明只有两行且前字段为first_name,后字段为surname</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image049.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094913.png"></p><p>猜测sql语句为：</p><p>SELECT first_name, last_name FROM 表名 WHERE user_id = $id</p><ol start="3"><li>获取数据库名，以此获得表名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094949.png"></p><p>返回结果显示表名为dvwa</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094925.png"></p><ol start="4"><li>利用数据库名获取表名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image056.jpg"></p><p>返回结果显示有两个表guestbook，users</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715095552.png"></p><ol start="5"><li>获取表内字段名，因为存在字符转义所以将’users’改为十六进制0x7573657273：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image060.jpg"></p><p>返回界面显示了所有字段名</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image062.jpg"></p><ol start="6"><li>获取用户名密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094947.png"></p><p>返回界面成功显示</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image066.jpg"></p><ol start="7"><li>源码分析：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/clip_image068.jpg"></p><h2 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h2><p>（2）.high级别</p><ol><li>分析源码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/20210715094948.png"></p><p>构造下列语句：</p><p>1’ or 1=1#</p><p>得到：</p><p>user_id = ‘1’ or 1=1#’ LIMIT 1;</p><p>成功注释掉limit 1，下面注入步骤和上述相同</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> web安全 </tag>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang之gin框架</title>
      <link href="/2021/07/14/gin/"/>
      <url>/2021/07/14/gin/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Gin框架"><a href="#1-Gin框架" class="headerlink" title="1. Gin框架"></a>1. Gin框架</h2><h3 id="1-1-初识"><a href="#1-1-初识" class="headerlink" title="1.1 初识"></a>1.1 初识</h3><ol><li><p>读取文件可以使用content , _=ioutil.ReadFile(“xxx.txt”)方式，比os中的read简单</p></li><li><p>例如，我们现在要编写一个管理书籍的系统，我们可以查询对一本书进行查询、创建、更新和删除等操作，我们在编写程序的时候就要设计客户端浏览器与我们Web服务端交互的方式和路径。按照经验我们通常会设计成如下模式：</p><table><thead><tr><th>请求方法</th><th>URL</th><th>含义</th></tr></thead><tbody><tr><td>GET</td><td>/book</td><td>查询书籍信息</td></tr><tr><td>POST</td><td>/create_book</td><td>创建书籍记录</td></tr><tr><td>POST</td><td>/update_book</td><td>更新书籍信息</td></tr><tr><td>POST</td><td>/delete_book</td><td>删除书籍信息</td></tr></tbody></table><p>同样的需求我们按照RESTful API设计如下：</p><table><thead><tr><th>请求方法</th><th>URL</th><th>含义</th></tr></thead><tbody><tr><td>GET</td><td>/book</td><td>查询书籍信息</td></tr><tr><td>POST</td><td>/book</td><td>创建书籍记录</td></tr><tr><td>PUT</td><td>/book</td><td>更新书籍信息</td></tr><tr><td>DELETE</td><td>/book</td><td>删除书籍信息</td></tr></tbody></table><blockquote><p>通过不同的方法代表不同的动作，这样就不用建立多个文件，维护代码方便</p></blockquote></li></ol><h3 id="1-2-template"><a href="#1-2-template" class="headerlink" title="1.2 template"></a>1.2 template</h3><ol><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">创建一个main.<span class="keyword">go</span>文件，在其中写下HTTP server端代码如下：</span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="comment">//原生的模板渲染 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 解析指定文件生成模板对象，即解析模板</span></span><br><span class="line">tmpl, err := template.ParseFiles(<span class="string">&quot;./hello.tmpl&quot;</span>)<span class="comment">//tmp1为生成的模板对象</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;create template failed, err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用给定数据渲染模板，并将最终渲染成形的html写入w，由w来返回给客户端</span></span><br><span class="line">tmpl.Execute(w, <span class="string">&quot;沙河小王子&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, sayHello)</span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;HTTP server failed,err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span>&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> pipeline&#125;&#125; T1 &#123;&#123;<span class="keyword">else</span> <span class="keyword">if</span> pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">&#123;&#123;<span class="keyword">if</span> lt .ma.age <span class="number">18</span>&#125;&#125;</span><br><span class="line">好好学习</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">好好工作</span><br><span class="line">&#123;&#123;end&#125;&#125; <span class="comment">//记住判断符号在前面</span></span><br></pre></td></tr></table></figure></li><li><p>range遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">range</span> $index,$value := .hobby&#125;&#125;<span class="comment">//hobby为预定义切片，其他类型也可以</span></span><br><span class="line">&lt;p&gt; &#123;&#123;$index&#125;&#125; - &#123;&#123;$hobby&#125;&#125;&lt;/p&gt; <span class="comment">//执行动作</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>index取值//针对数组，切片或者字典</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;index .hobby <span class="number">2</span>&#125;&#125;<span class="comment">//取出hobby切片中下标为2的值</span></span><br></pre></td></tr></table></figure></li><li><p>模板添加添加自定义函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前目录下有一个f.tmpl的模板文件</span></span><br><span class="line">k:= <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span><span class="params">(<span class="keyword">string</span>,error)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name+<span class="string">&quot;年轻又帅气！&quot;</span>,<span class="literal">nil</span></span><br><span class="line">&#125;<span class="comment">//自定义函数</span></span><br><span class="line">t := template.New(<span class="string">&quot;f.tmpl&quot;</span>)<span class="comment">//创建一个名字为f.tmpl的模板对象，名字一定要和模板名字能对应上，此时可以理解为创建了一个模板对象，其名字为f.tmpl，但是内容啥的都为空</span></span><br><span class="line">t.Funcs(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;kua99&quot;</span>:k</span><br><span class="line">&#125;)<span class="comment">//告诉模板引擎，我现在给t添加了一个自定义函数，通过kua99来用</span></span><br><span class="line"><span class="comment">//解析模板</span></span><br><span class="line">_,err := t.ParseFiles(<span class="string">&quot;./f.tmpl&quot;</span>)<span class="comment">//解析模板，可以理解为给t添加了模板内容，现在t这个模板对象既有名字又有可用自定义函数，又有内容</span></span><br><span class="line">name := <span class="string">&quot;小王子&quot;</span></span><br><span class="line">t.Execute(w,name)<span class="comment">//渲染模板并发送给w</span></span><br></pre></td></tr></table></figure><p>其中f.tmpl内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>&#123;&#123;kua99 .&#125;&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span>//在模板文件中运用自定义函数</span><br></pre></td></tr></table></figure></li><li><p>当一个模板1嵌套了另一个模板2，在解析模板时参数顺序要写对，先是1后是2</p><p>当一个模板1继承了另一个模板2，在解析模板时参数顺序要写对，先是2后是1</p></li><li><p>当模板解析时，解析了不止一个模板，则在渲染模板时要用ExcuteTemplate(),并在参数中指定渲染其中哪一个</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210711162404017.png"></p></li><li><p>记着在模板继承的时候根模板中块代码那块有个.  以及在子模版中继承时也有个.</p></li><li><p>注意：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t,err := template.ParseFiles(<span class="string">&quot;./template/base.tmpl&quot;</span>,<span class="string">&quot;./template/xiaoming.tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err= &quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">name := <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">t.ExecuteTemplate(w,<span class="string">&quot;xiaoming.tmpl&quot;</span>,name)<span class="comment">//第二个参数直接写文件名即该模板define的名字，不要写./template/xiaoming.tmpl路径</span></span><br></pre></td></tr></table></figure></li><li><p>推荐新建一个项目时打开一个新的goland窗口</p></li></ol><p>以上为用net/http包进行模板渲染的东西，以下为利用gin框架进行模板渲染</p><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/go_template/">https://www.liwenzhou.com/posts/Go/go_template/</a></p></blockquote><hr><h3 id="1-3-gin框架渲染"><a href="#1-3-gin框架渲染" class="headerlink" title="1.3 gin框架渲染"></a>1.3 gin框架渲染</h3><ol><li><p>gin中已经定义好了一个map方便用户使用，该map为gin.H{}</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;<span class="comment">//gin框架下的模板渲染 1.定义模板 2.解析模板 3.渲染模板</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">    r.LoadHTMLFiles(<span class="string">&quot;templates/posts/index.html&quot;</span>, <span class="string">&quot;templates/users/index.html&quot;</span>)<span class="comment">//解析模板</span></span><br><span class="line"><span class="comment">//r.LoadHTMLGlob(&quot;templates/**/*&quot;)，其中**表示所有目录，*表示所有文件</span></span><br><span class="line">r.GET(<span class="string">&quot;/posts/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;<span class="comment">//该匿名函数为渲染模板,将c就当作那条请求链接</span></span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;posts/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;posts/index&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;users/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;<span class="comment">//该匿名函数为渲染模板</span></span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;users/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;users/index&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)<span class="comment">//服务跑起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态文件：html页面上用到的样式文件.css js文件 图片</p></li><li><p>添加预定义函数必须在解析模板之前</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Static(<span class="string">&quot;/xxx&quot;</span>, <span class="string">&quot;./static&quot;</span>)<span class="comment">//第二个目录为静态文件的目录，第一个参数可以理解为给./static取了个别名，在html文件中出现/xxx就用./static替换</span></span><br></pre></td></tr></table></figure></li><li><p>如果直接返回写好的html，则就没有模板解析步骤，直接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果没有给一个模板起名字，那么默认就是文件名</p></li><li><p>小米网站搭建项目xiaomi</p></li><li><p>json渲染</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin.H 是map[string]interface&#123;&#125;的缩写</span></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方式一：自己拼接JSON</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello world!&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 方法二：使用结构体</span></span><br><span class="line"><span class="keyword">type</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">Age     <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">var</span> msg1 := msg&#123;</span><br><span class="line">            Name:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">            Message:<span class="string">&quot;abc&quot;</span>,</span><br><span class="line">            Age:<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">c.JSON(http.StatusOK, msg1)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参数绑定：前端传过来的参数在后端自动生成一个结构体存储相应参数</p></li><li><p>gin框架有两种字符串拼接方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式,eg:</span></span><br><span class="line">dst := fmt.Sprintf(<span class="string">&quot;./%s&quot;</span>,f.filename)</span><br><span class="line"><span class="comment">//第二种方式,eg:</span></span><br><span class="line">dst := path.Join(<span class="string">&quot;./%s&quot;</span>,f.filename)</span><br></pre></td></tr></table></figure></li><li><p>goland中unhandle error指的是没有处理返回的err</p></li></ol><blockquote><p> <a href="https://www.liwenzhou.com/posts/Go/Gin_framework/">https://www.liwenzhou.com/posts/Go/Gin_framework/</a></p></blockquote><h3 id="1-4-gin路由"><a href="#1-4-gin路由" class="headerlink" title="1.4 gin路由"></a>1.4 gin路由</h3><ol><li>一个路径加一个请求方法对应一个处理函数就叫一个路由</li><li>r.Any通常配合switch一起用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210712191205765.png"></p><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/Gin_framework/">https://www.liwenzhou.com/posts/Go/Gin_framework/</a></p></blockquote><h3 id="1-5-中间件"><a href="#1-5-中间件" class="headerlink" title="1.5 中间件"></a>1.5 中间件</h3><ol><li><p>中间件又叫中间件函数，它本质是一个函数，该函数必须是handlerfunc函数类型，换句话说handlerfunc函数类型的函数就可以充当中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//handlerfunc函数类型</span></span><br><span class="line"><span class="keyword">type</span> handlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*context)</span></span></span><br><span class="line"><span class="comment">//eg:</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span> <span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;m1 in....&quot;</span>)</span><br><span class="line">&#125;<span class="comment">//这就是一个中间件</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个耗时统计中间件</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexHandler</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">    fmt.<span class="built_in">println</span>(<span class="string">&quot;index in...&quot;</span>)</span><br><span class="line">    c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;index&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间件写法1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">    fmt.<span class="built_in">println</span>(<span class="string">&quot;m1 in...&quot;</span>)</span><br><span class="line">    start = time.Now()</span><br><span class="line">    c.Next()</span><br><span class="line">    cost := time.Since(start)</span><br><span class="line">    fmt.printf(<span class="string">&quot;耗时:%v\n&quot;</span>,cost )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间件写法2，常用，利用闭包</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StatCost</span><span class="params">(docheck)</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;<span class="comment">//可以用docheck作为一个中间件开关</span></span><br><span class="line">    <span class="comment">//数据库连接</span></span><br><span class="line">    <span class="comment">//数据库查询</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> docheck&#123;</span><br><span class="line">            start := time.Now()</span><br><span class="line">            c.Next()</span><br><span class="line">            <span class="comment">// 不调用该请求的剩余处理程序</span></span><br><span class="line">            <span class="comment">// c.Abort()</span></span><br><span class="line">            <span class="comment">// 计算耗时</span></span><br><span class="line">            cost := time.Since(start)</span><br><span class="line">            log.Println(cost)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            c.Next()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">r:=gin.Default()</span><br><span class="line">    r.use(m1，StatCost(ture))<span class="comment">//全局注册中间件函数m1</span></span><br><span class="line"><span class="comment">//GET(relativePath string,handlers ...HandlerFunc) IRoutes</span></span><br><span class="line">    r.GET(<span class="string">&quot;/index&quot;</span>,indexHandler)<span class="comment">//indexHandler为页面处理函数不是中间件</span></span><br><span class="line">    r.GET(<span class="string">&quot;/shop&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span>)</span>&#123;<span class="comment">//这里为了方便写成了匿名函数形式</span></span><br><span class="line">        c.JSON(http.StatusOK,gin.H&#123;</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;shop&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中间件可以定义的不止一个</p></li><li><p>中间件有三种1.全局中间件2.局部中间件：为路由组设置中间件3.单一中间件：为某个路由设置中间件</p></li><li><p>跨中间件取值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">r.use(m1,m2)<span class="comment">//有两个中间件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m1</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line"><span class="comment">//认证成功</span></span><br><span class="line">c.Set(<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>)<span class="comment">//可以通过c.Set在请求上下文中设置值，后续的处理函数能够取到该值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">m2</span><span class="params">(c *gin.context)</span></span>&#123;</span><br><span class="line">name,ok := c.Get(<span class="string">&quot;name&quot;</span>)<span class="comment">//后续处理函数通过c。</span></span><br><span class="line"><span class="keyword">if</span> !ok&#123;</span><br><span class="line">name = <span class="string">&quot;匿名用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:name,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="未完待续………"><a href="#未完待续………" class="headerlink" title="未完待续………."></a>未完待续……….</h2><blockquote><p> <a href="https://www.liwenzhou.com/posts/Go/Gin_framework/">https://www.liwenzhou.com/posts/Go/Gin_framework/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> template </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker初识</title>
      <link href="/2021/07/14/docker/"/>
      <url>/2021/07/14/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>docker的使用，以安装mysql为例：</p><ol><li>双击Docker Quickstart Terminal，等待配置一会后出现如下界面（该界面进入docker的bash界面，可执行docker命令了）：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713171628757.png"></p><ol start="2"><li><p>先下载mysql的镜像文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>下载完成如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713171956621.png"></p></li><li><p>然后使用以下命令来查看是否已安装了 mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>结果如下，可以看到成功下载了mysql镜像</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713172139499.png"></p></li><li><p>安装完成后，我们可以使用以下命令来运行 一个带有mysql服务的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -itd --name mysql-test -p 13306:3306 -e MYSQL_ROOT_PASSWORD=root1234 mysql</span><br></pre></td></tr></table></figure><p>参数说明：</p><blockquote><p>-p 13306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务。端口映射</p><p>MYSQL_ROOT_PASSWORD=root1234：设置mysql的root用户密码为root1234</p></blockquote><p>执行完该命令后如下图所示即为容器安装成功，并且因为我们使用了-d参数，所以在创建容器的同时启动了容器：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713174948007.png"></p></li><li><p>可通过docker ps查看正在运行的容器</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175119932.png"></p></li><li><p>然后进入容器，通过命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql8019 bash</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175433883.png"></p></li><li><p>这个时候我们就进入了该容器，接下来运行mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175546939.png"></p><p>输入密码root1234后，即进入mysql：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175625028.png"></p></li><li><p>如查询有哪些数据库：</p><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210713175740448.png"></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>获取镜像</li><li>运行带有该镜像的容器</li><li>进入容器运行服务</li></ol><p>附docker常用命令：</p><blockquote><p><a href="https://www.huaweicloud.com/articles/1995d352dd7228cac90cd8737f1f5c97.html">https://www.huaweicloud.com/articles/1995d352dd7228cac90cd8737f1f5c97.html</a></p></blockquote><p>输入以下命令查看容器的报错日志：</p><p><code>docker logs -f 容器id号</code></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Mysql </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础笔记</title>
      <link href="/2021/07/14/go_jichu/"/>
      <url>/2021/07/14/go_jichu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1.基础类型"></a>1.基础类型</h2><ol><li><p>打印字符必须使用printf，因为println会输出字符的ascii码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;ch1 = %c, ch2 = %c, %d\n&quot;</span>, ch1, ch2, ch3)</span><br></pre></td></tr></table></figure></li><li><p>字符串是双引号，字符是单引号</p></li><li><blockquote><p>自动推导类型有两种写法</p><ol><li>var  a = 1</li><li>a := 1</li></ol></blockquote></li><li><p>%v自动匹配格式输出，但是并不是很只能比如字符型会输出其ascii码</p></li><li><p>_为匿名变量，一般用于丢弃某个函数返回值</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//每个程序都要有一个main包，没有main包则会导致build无法生成exe文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello go!!!&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="comment">//a := 10</span></span><br><span class="line">  b := <span class="number">20</span></span><br><span class="line">  c := <span class="number">30</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;a=&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;the type of a is %T\n&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;a=%d,b=%d,c=%d&quot;</span>, a, b, c)</span><br><span class="line">  <span class="keyword">const</span> i = <span class="number">10</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;the type of i is %T \n&quot;</span>, i)</span><br><span class="line">  <span class="keyword">var</span> ch1, ch2, ch3 <span class="keyword">byte</span></span><br><span class="line">  ch1 = <span class="string">&#x27;a&#x27;</span> <span class="comment">//字符赋值</span></span><br><span class="line">  ch2 = <span class="number">97</span>  <span class="comment">//字符的ascii码赋值</span></span><br><span class="line">  ch3 = <span class="string">&#x27;\n&#x27;</span> <span class="comment">//转义字符</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;ch1 = %c, ch2 = %c, %d\n&quot;</span>, ch1, ch2, ch3)</span><br><span class="line">  fmt.Println(<span class="string">&quot;ch1 = &quot;</span>,ch1)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><ol><li><p>if和左大括号要在同一行</p></li><li><p>支持一个初始化表达式, 初始化字句和条件表达式直接需要用分号分隔</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> b := <span class="number">3</span>; b == <span class="number">3</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;b==3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch不用写break来跳出循环，go语言自动包含</p></li><li><p>如果不想在执行了switch的case语句后跳出switch，则用fallthrough关键字</p></li><li><p>switch也支持一个初始化语句</p></li><li><p>switch有三种写法，见word</p></li><li><p>for 初始化条件；判断条件；条件变化{}</p></li><li><p>go语言只有i++没有++i</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">代码块....</span><br><span class="line">&#125;<span class="comment">//这种没有条件的则会无限循环</span></span><br></pre></td></tr></table></figure></li><li><p>range迭代函数返回值为两个，一个是下标，另一个是下标所对应元素</p></li></ol><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h2><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210621162926530.png"></p><hr><ol><li><p>自定义函数放在main前main后都可以</p></li><li><p>函数的参数不需要写var关键字</p></li><li><p>如果形参为同类型则可以有简化写法，eg：a,b int （不推荐这种写法，会很乱）</p></li><li><p>如果不知道函数传入参数个数，则用不定参数 eg:(args …int)，其中args由切片实现，要访问传入的参数可以用arg[0],arg[1]…….</p></li><li><p>不定参数要写在形参的最后面</p></li><li><p><strong>注意函数定义最常用写法，word22页</strong></p></li><li><p>函数定义分类：</p><blockquote><p>6.1有参无返回值型</p><p>​    6.1.1固定参数</p><p>​    6.1.2不定参数</p><p>6.2无参有返回值型</p><p>​    6.2.1有一个返回值</p><p>​    6.2.2有n个返回值</p><p>6.3有参有返回值型</p></blockquote></li><li><p>如何函数的返回值是int型，则可以直接可以用+运算</p></li><li><p>函数其实也是一种数据类型即函数类型</p></li><li><p>利用函数类型实现计算器函数，即实现多态（一个接口，但其有多种形态）课p52</p></li><li><p>匿名函数是写在main内的，其可以调用main中的全局变量</p></li><li><p>匿名函数内部改外部变量，则外部变量相应改变</p></li><li><p>多个defer时从后向前执行</p></li><li><p>注意局部变量的作用范围：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag := <span class="number">3</span>;flag == <span class="number">3</span>&#123;</span><br><span class="line"></span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;flag = &quot;</span>,flag)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">4</span><span class="comment">//err,因为flag的作用范围只有if语句里面，是一个局部变量</span></span><br></pre></td></tr></table></figure></li><li><p>执行到定义局部变量那句话时才会给其分配空间，当程序执行到离开作用域时，空间就被释放   </p></li><li><p>当使用变量时，采用就近原则，即采用当前作用域变量，如果未定义就用全局的那个</p></li></ol><h2 id="4-工程管理"><a href="#4-工程管理" class="headerlink" title="4.工程管理"></a>4.工程管理</h2><ol><li>一个包是由很多go文件组成，比如go/src/fmt</li><li>import . “fmt”这样导入则后续代码不需要写fmt前缀</li><li>同一个目录包名必须一样，参照src/fmt，注：fmt就是一个包</li><li>同一个目录，调用别的文件的函数，直接调用即可，无需包名引用</li><li>一个包即一个工程即一个文件夹</li><li>一个包内的不同go文件就是实现这个工程的不同功能模块</li><li>当在进行一个工程之前，先设置GOPATH为该工程的src路径</li><li>函数想被其他包调用则要将函数名首字母大写</li><li><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210622200918342.png"></li></ol><h2 id="5-复合类型"><a href="#5-复合类型" class="headerlink" title="5.复合类型"></a>5.复合类型</h2><ol><li><p>&amp;a与%p对应，不是%d</p></li><li><p>p=new(T),new函数就是在内存中拿出一个T类型的内存空间，然后将该内存空间的地址赋给p</p></li><li><p>注意数组的初始化形式</p></li><li><p>如果种子参数一样，则每次运行程序产生的随机数都一样</p></li><li><p>可以将种子参数设置为当地时间，这样每次执行程序种子不同从而随机数也会  不同</p></li><li><p>数组传入到函数只是传值，普通类型变量也一样都只是传值，函数内对该变量的操作不会影响函数外的该变量。要想改变则必须传地址</p></li><li><p>s := a[0:3:5]，s为切片，长度为3，容量为5</p></li><li><p>切片的初始化定义方式有如下几种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 := []<span class="keyword">int</span>&#123;&#125;<span class="comment">//len=0,cap=0 也可以是s1:=[]int&#123;1,2,3,4&#125;</span></span><br><span class="line">s4 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">//第一个0是切片长度，第二个0为容量，若没指定容量则容量与长度相等</span></span><br></pre></td></tr></table></figure></li><li><p>通过append函数给slice加元素</p></li><li><p>s := a[0:3]，在进行切片时如果没有指定max则max默认为len(5)，注意不要和8混淆</p></li><li><p>切片并不是数组或数组指针，它通过内部指针和相关属性引⽤数组⽚段</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210624184541990.png"></p><p>改变切片值原数组值也会改变，改变数组值那么切片值也会相应改变</p></li><li><p>不管是哪一种切片，最终切片的指针都指向底层数组！！！</p></li><li><p>总结：对切片的操作会影响底层数组</p></li><li><p>切片传入到函数是传引用，函数内对其进行改变，函数外的相应也会改变</p></li><li><p>在使用多个scanf时，前面的scanf要加\n</p></li><li><p>map作为函数参数传递的是引用，即函数内部对其改变，函数外部该值也会做出相应改变</p></li><li><p>结构体的定义写在main函数外部</p></li><li><p>在定义了结构体指针p1后可以通过.运算符直接操作成员。eg:p1.sex即不用*p1.sex</p></li><li><p>如果想使用其他包的函数，结构体类型，结构体成员，函数名，类型名，结构体成员变量名，首字母必须大写。如果首字母是小写，只能在同一个包里使用</p></li></ol><h2 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6. 面向对象"></a>6. 面向对象</h2><ol><li><p>方法：给<strong>自定义类型</strong>定义一种方法 </p></li><li><p>不同类型可以拥有同名方法</p></li><li><p>接收者可以类比为对象中的类，即给类添加方法</p></li><li><p>继承某一个结构体，其方法也能够被继承 </p></li><li><p>string，*p，struct都属于接口类型，可以定义一个接口类型的切片将这三个存入</p></li><li><p>如果用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定义的类型的值就可以赋给这个接口类型的值</p></li><li><p>空接口为万能类型，可以保存任意类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;abc&quot;</span> </span><br></pre></td></tr></table></figure></li></ol><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h2><ol><li><p>接口类型即万能类型，什么都可以存</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.<span class="built_in">println</span>(<span class="built_in">recover</span>())<span class="comment">//功能是出现panic时并不会让程序中断，并打印panic错误信息</span></span><br></pre></td></tr></table></figure></li><li><p>error是报错但不崩溃，panic是报错并崩溃程序 </p></li><li><p>recover()返回值为panic的错误信息</p></li></ol><h2 id="8-文本文件处理"><a href="#8-文本文件处理" class="headerlink" title="8.文本文件处理"></a>8.文本文件处理</h2><ol><li><p>常用字符串处理函数</p></li><li><p>结构体想要生成json，成员变量名首字母必须大写</p></li><li><p>如果想要json中的值首字母小写，要在比如结构体定义的后面加上’ json:”company” ‘其中’为反引号</p></li><li><p>利用’ json:”-“ ‘表示此字段不会输出到屏幕</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用make创建切片和map</span></span><br><span class="line">slice=<span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>,<span class="number">100</span>)<span class="comment">//len=0,cap=100</span></span><br><span class="line">map1=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;,<span class="number">4</span>)<span class="comment">//创建一个键为字符串型，值为任何类型且长度为4的字典</span></span><br></pre></td></tr></table></figure></li><li><p>json后返回的结果为字符列表，要通过string(result)转换为json格式</p></li><li><p>json需要先转换成[]byte，才能反转为结构体或者map</p></li><li><p>空接口类型值如何赋值给string等类型，看（中）p56</p></li><li><p>json解析到结构体更加简单，因为解析完之后每个字段什么类型很清楚的被定义了。而对于解析到map类型，其值全是空接口，要通过类型断言判断每个值的类型以及赋值给字符串</p></li><li><p>fmt.println()相当于os.stdout.WriteString()</p></li><li><p>Sprintf() 是把格式化字符串输出到指定的字符串中，可以用一个变量来接受，然后在打印</p></li><li><p>当文件读取完时err=io.EOF</p></li><li><p>注意file.read返回值有两个一个是读取长度n,一个是err</p></li></ol><h2 id="9-并发编程"><a href="#9-并发编程" class="headerlink" title="9.并发编程"></a>9.并发编程</h2><ol><li><p>主协程退出，其他子协程也要跟着退出</p></li><li><p>main函数即主协程</p></li><li><p>设置核数越多，时间片就越短</p></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.无缓冲型channel特点：</span><br><span class="line">写入的时候对方未读就会阻塞任务</span><br><span class="line">读的时候没有数据也会阻塞</span><br><span class="line">即要保证数据放入时被立即取出</span><br></pre></td></tr></table></figure></li><li><p>可通过range遍历channel内容</p></li><li><p>channel传参，是引用传递</p></li><li><p>双向管道传参可以变为单向</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timer1 := time.NewTimer(time.Second * <span class="number">2</span>)<span class="comment">//timer1为定时器，三秒后定时器就会向自己的C字节管道发送一个time.Time类型的元素值</span></span><br><span class="line"><span class="comment">//timer1.Stop()停止计时器</span></span><br><span class="line"><span class="comment">//ok := timer1.Reset(1*time.Second)重置计时器1s后写入</span></span><br><span class="line">t2 := &lt;-timer1.C   <span class="comment">//定时器可实现延时功能，类似于sleep</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-HTTP编程"><a href="#10-HTTP编程" class="headerlink" title="10.HTTP编程"></a>10.HTTP编程</h2><ol><li><p>socket编程中write和read函数的传参都是字节切片，比如发送hello，即conn.write([]byte(“hello”))</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n, err :=conn.read(buf)<span class="comment">//接受来自对方发送的内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;文件接收完毕&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;err =&quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">f.write(buf[:n])<span class="comment">//往文件写入内容 </span></span><br></pre></td></tr></table></figure></li><li><p>定义在main函数外部的为全局变量</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//服务器端代码示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端编写的业务逻辑处理程序myhandler</span></span><br><span class="line"><span class="comment">//w, 给客户端回复数据</span></span><br><span class="line"><span class="comment">//req为结构体, 读取客户端发送的数据，参数就是这两不能变</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/go&quot;</span>, myHandler)<span class="comment">// 请求127.0.0.1/go时调用myhandler</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在指定的地址进行监听，开启一个HTTP</span></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;127.0.0.1:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//客户端代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方式请求一个资源</span></span><br><span class="line">    <span class="comment">//resp, err := http.Get(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line">    <span class="comment">//resp, err := http.Get(&quot;http://www.neihan8.com/article/index.html&quot;)</span></span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:8000/go&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close() <span class="comment">//关闭</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;header = &quot;</span>, resp.Header)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;resp status %s\nstatusCode %d\n&quot;</span>, resp.Status, resp.StatusCode)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;body type = %T\n&quot;</span>, resp.Body)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下为读取服务器回应的主体数据部分，因为回应的主体数据部分是用resp.Body来获取，该接口是一个流所以要通过read的方式将其通过for循环一点一点的读入buf里面</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>) <span class="comment">//切片缓冲区</span></span><br><span class="line">    <span class="keyword">var</span> tmp <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := resp.Body.Read(buf) <span class="comment">//读取body包内容</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;读取内容结束&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp += <span class="keyword">string</span>(buf[:n]) <span class="comment">//累加读取的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;buf = &quot;</span>, <span class="keyword">string</span>(tmp))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> HTTP </tag>
            
            <tag> Socket </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/05/13/hello-world/"/>
      <url>/2021/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
