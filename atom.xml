<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浔阳江头夜送客</title>
  
  <subtitle>subtitle</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-14T13:04:32.709Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wjkk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go基础笔记</title>
    <link href="http://example.com/2021/07/14/go_jichu/"/>
    <id>http://example.com/2021/07/14/go_jichu/</id>
    <published>2021-07-14T04:11:39.798Z</published>
    <updated>2021-07-14T13:04:32.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1.基础类型"></a>1.基础类型</h2><ol><li><p>打印字符必须使用printf，因为println会输出字符的ascii码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;ch1 = %c, ch2 = %c, %d\n&quot;</span>, ch1, ch2, ch3)</span><br></pre></td></tr></table></figure></li><li><p>字符串是双引号，字符是单引号</p></li><li><blockquote><p>自动推导类型有两种写法</p><ol><li>var  a = 1</li><li>a := 1</li></ol></blockquote></li><li><p>%v自动匹配格式输出，但是并不是很只能比如字符型会输出其ascii码</p></li><li><p>_为匿名变量，一般用于丢弃某个函数返回值</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//每个程序都要有一个main包，没有main包则会导致build无法生成exe文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello go!!!&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="comment">//a := 10</span></span><br><span class="line">  b := <span class="number">20</span></span><br><span class="line">  c := <span class="number">30</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;a=&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;the type of a is %T\n&quot;</span>, a)</span><br><span class="line">  fmt.Printf(<span class="string">&quot;a=%d,b=%d,c=%d&quot;</span>, a, b, c)</span><br><span class="line">  <span class="keyword">const</span> i = <span class="number">10</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;the type of i is %T \n&quot;</span>, i)</span><br><span class="line">  <span class="keyword">var</span> ch1, ch2, ch3 <span class="keyword">byte</span></span><br><span class="line">  ch1 = <span class="string">&#x27;a&#x27;</span> <span class="comment">//字符赋值</span></span><br><span class="line">  ch2 = <span class="number">97</span>  <span class="comment">//字符的ascii码赋值</span></span><br><span class="line">  ch3 = <span class="string">&#x27;\n&#x27;</span> <span class="comment">//转义字符</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;ch1 = %c, ch2 = %c, %d\n&quot;</span>, ch1, ch2, ch3)</span><br><span class="line">  fmt.Println(<span class="string">&quot;ch1 = &quot;</span>,ch1)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><ol><li><p>if和左大括号要在同一行</p></li><li><p>支持一个初始化表达式, 初始化字句和条件表达式直接需要用分号分隔</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> b := <span class="number">3</span>; b == <span class="number">3</span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;b==3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch不用写break来跳出循环，go语言自动包含</p></li><li><p>如果不想在执行了switch的case语句后跳出switch，则用fallthrough关键字</p></li><li><p>switch也支持一个初始化语句</p></li><li><p>switch有三种写法，见word</p></li><li><p>for 初始化条件；判断条件；条件变化{}</p></li><li><p>go语言只有i++没有++i</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">代码块....</span><br><span class="line">&#125;<span class="comment">//这种没有条件的则会无限循环</span></span><br></pre></td></tr></table></figure></li><li><p>range迭代函数返回值为两个，一个是下标，另一个是下标所对应元素</p></li></ol><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h2><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210621162926530.png"></p><hr><ol><li><p>自定义函数放在main前main后都可以</p></li><li><p>函数的参数不需要写var关键字</p></li><li><p>如果形参为同类型则可以有简化写法，eg：a,b int （不推荐这种写法，会很乱）</p></li><li><p>如果不知道函数传入参数个数，则用不定参数 eg:(args …int)，其中args由切片实现，要访问传入的参数可以用arg[0],arg[1]…….</p></li><li><p>不定参数要写在形参的最后面</p></li><li><p><strong>注意函数定义最常用写法，word22页</strong></p></li><li><p>函数定义分类：</p><blockquote><p>6.1有参无返回值型</p><p>​    6.1.1固定参数</p><p>​    6.1.2不定参数</p><p>6.2无参有返回值型</p><p>​    6.2.1有一个返回值</p><p>​    6.2.2有n个返回值</p><p>6.3有参有返回值型</p></blockquote></li><li><p>如何函数的返回值是int型，则可以直接可以用+运算</p></li><li><p>函数其实也是一种数据类型即函数类型</p></li><li><p>利用函数类型实现计算器函数，即实现多态（一个接口，但其有多种形态）课p52</p></li><li><p>匿名函数是写在main内的，其可以调用main中的全局变量</p></li><li><p>匿名函数内部改外部变量，则外部变量相应改变</p></li><li><p>多个defer时从后向前执行</p></li><li><p>注意局部变量的作用范围：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> flag := <span class="number">3</span>;flag == <span class="number">3</span>&#123;</span><br><span class="line"></span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;flag = &quot;</span>,flag)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">4</span><span class="comment">//err,因为flag的作用范围只有if语句里面，是一个局部变量</span></span><br></pre></td></tr></table></figure></li><li><p>执行到定义局部变量那句话时才会给其分配空间，当程序执行到离开作用域时，空间就被释放   </p></li><li><p>当使用变量时，采用就近原则，即采用当前作用域变量，如果未定义就用全局的那个</p></li></ol><h2 id="4-工程管理"><a href="#4-工程管理" class="headerlink" title="4.工程管理"></a>4.工程管理</h2><ol><li>一个包是由很多go文件组成，比如go/src/fmt</li><li>import . “fmt”这样导入则后续代码不需要写fmt前缀</li><li>同一个目录包名必须一样，参照src/fmt，注：fmt就是一个包</li><li>同一个目录，调用别的文件的函数，直接调用即可，无需包名引用</li><li>一个包即一个工程即一个文件夹</li><li>一个包内的不同go文件就是实现这个工程的不同功能模块</li><li>当在进行一个工程之前，先设置GOPATH为该工程的src路径</li><li>函数想被其他包调用则要将函数名首字母大写</li><li><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210622200918342.png"></li></ol><h2 id="5-复合类型"><a href="#5-复合类型" class="headerlink" title="5.复合类型"></a>5.复合类型</h2><ol><li><p>&amp;a与%p对应，不是%d</p></li><li><p>p=new(T),new函数就是在内存中拿出一个T类型的内存空间，然后将该内存空间的地址赋给p</p></li><li><p>注意数组的初始化形式</p></li><li><p>如果种子参数一样，则每次运行程序产生的随机数都一样</p></li><li><p>可以将种子参数设置为当地时间，这样每次执行程序种子不同从而随机数也会  不同</p></li><li><p>数组传入到函数只是传值，普通类型变量也一样都只是传值，函数内对该变量的操作不会影响函数外的该变量。要想改变则必须传地址</p></li><li><p>s := a[0:3:5]，s为切片，长度为3，容量为5</p></li><li><p>切片的初始化定义方式有如下几种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 := []<span class="keyword">int</span>&#123;&#125;<span class="comment">//len=0,cap=0 也可以是s1:=[]int&#123;1,2,3,4&#125;</span></span><br><span class="line">s4 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">//第一个0是切片长度，第二个0为容量，若没指定容量则容量与长度相等</span></span><br></pre></td></tr></table></figure></li><li><p>通过append函数给slice加元素</p></li><li><p>s := a[0:3]，在进行切片时如果没有指定max则max默认为len(5)，注意不要和8混淆</p></li><li><p>切片并不是数组或数组指针，它通过内部指针和相关属性引⽤数组⽚段</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/xunyang1/picture_bed/images/image-20210624184541990.png"></p><p>改变切片值原数组值也会改变，改变数组值那么切片值也会相应改变</p></li><li><p>不管是哪一种切片，最终切片的指针都指向底层数组！！！</p></li><li><p>总结：对切片的操作会影响底层数组</p></li><li><p>切片传入到函数是传引用，函数内对其进行改变，函数外的相应也会改变</p></li><li><p>在使用多个scanf时，前面的scanf要加\n</p></li><li><p>map作为函数参数传递的是引用，即函数内部对其改变，函数外部该值也会做出相应改变</p></li><li><p>结构体的定义写在main函数外部</p></li><li><p>在定义了结构体指针p1后可以通过.运算符直接操作成员。eg:p1.sex即不用*p1.sex</p></li><li><p>如果想使用其他包的函数，结构体类型，结构体成员，函数名，类型名，结构体成员变量名，首字母必须大写。如果首字母是小写，只能在同一个包里使用</p></li></ol><h2 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6. 面向对象"></a>6. 面向对象</h2><ol><li><p>方法：给<strong>自定义类型</strong>定义一种方法 </p></li><li><p>不同类型可以拥有同名方法</p></li><li><p>接收者可以类比为对象中的类，即给类添加方法</p></li><li><p>继承某一个结构体，其方法也能够被继承 </p></li><li><p>string，*p，struct都属于接口类型，可以定义一个接口类型的切片将这三个存入</p></li><li><p>如果用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定义的类型的值就可以赋给这个接口类型的值</p></li><li><p>空接口为万能类型，可以保存任意类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;abc&quot;</span> </span><br></pre></td></tr></table></figure></li></ol><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7.异常处理"></a>7.异常处理</h2><ol><li><p>接口类型即万能类型，什么都可以存</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.<span class="built_in">println</span>(<span class="built_in">recover</span>())<span class="comment">//功能是出现panic时并不会让程序中断，并打印panic错误信息</span></span><br></pre></td></tr></table></figure></li><li><p>error是报错但不崩溃，panic是报错并崩溃程序 </p></li><li><p>recover()返回值为panic的错误信息</p></li></ol><h2 id="8-文本文件处理"><a href="#8-文本文件处理" class="headerlink" title="8.文本文件处理"></a>8.文本文件处理</h2><ol><li><p>常用字符串处理函数</p></li><li><p>结构体想要生成json，成员变量名首字母必须大写</p></li><li><p>如果想要json中的值首字母小写，要在比如结构体定义的后面加上’ json:”company” ‘其中’为反引号</p></li><li><p>利用’ json:”-“ ‘表示此字段不会输出到屏幕</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用make创建切片和map</span></span><br><span class="line">slice=<span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>,<span class="number">100</span>)<span class="comment">//len=0,cap=100</span></span><br><span class="line">map1=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;,<span class="number">4</span>)<span class="comment">//创建一个键为字符串型，值为任何类型且长度为4的字典</span></span><br></pre></td></tr></table></figure></li><li><p>json后返回的结果为字符列表，要通过string(result)转换为json格式</p></li><li><p>json需要先转换成[]byte，才能反转为结构体或者map</p></li><li><p>空接口类型值如何赋值给string等类型，看（中）p56</p></li><li><p>json解析到结构体更加简单，因为解析完之后每个字段什么类型很清楚的被定义了。而对于解析到map类型，其值全是空接口，要通过类型断言判断每个值的类型以及赋值给字符串</p></li><li><p>fmt.println()相当于os.stdout.WriteString()</p></li><li><p>Sprintf() 是把格式化字符串输出到指定的字符串中，可以用一个变量来接受，然后在打印</p></li><li><p>当文件读取完时err=io.EOF</p></li><li><p>注意file.read返回值有两个一个是读取长度n,一个是err</p></li></ol><h2 id="9-并发编程"><a href="#9-并发编程" class="headerlink" title="9.并发编程"></a>9.并发编程</h2><ol><li><p>主协程退出，其他子协程也要跟着退出</p></li><li><p>main函数即主协程</p></li><li><p>设置核数越多，时间片就越短</p></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.无缓冲型channel特点：</span><br><span class="line">写入的时候对方未读就会阻塞任务</span><br><span class="line">读的时候没有数据也会阻塞</span><br><span class="line">即要保证数据放入时被立即取出</span><br></pre></td></tr></table></figure></li><li><p>可通过range遍历channel内容</p></li><li><p>channel传参，是引用传递</p></li><li><p>双向管道传参可以变为单向</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timer1 := time.NewTimer(time.Second * <span class="number">2</span>)<span class="comment">//timer1为定时器，三秒后定时器就会向自己的C字节管道发送一个time.Time类型的元素值</span></span><br><span class="line"><span class="comment">//timer1.Stop()停止计时器</span></span><br><span class="line"><span class="comment">//ok := timer1.Reset(1*time.Second)重置计时器1s后写入</span></span><br><span class="line">t2 := &lt;-timer1.C   <span class="comment">//定时器可实现延时功能，类似于sleep</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-HTTP编程"><a href="#10-HTTP编程" class="headerlink" title="10.HTTP编程"></a>10.HTTP编程</h2><ol><li><p>socket编程中write和read函数的传参都是字节切片，比如发送hello，即conn.write([]byte(“hello”))</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n, err :=conn.read(buf)<span class="comment">//接受来自对方发送的内容</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;文件接收完毕&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.<span class="built_in">println</span>(<span class="string">&quot;err =&quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">f.write(buf[:n])<span class="comment">//往文件写入内容 </span></span><br></pre></td></tr></table></figure></li><li><p>定义在main函数外部的为全局变量</p></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//服务器端代码示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端编写的业务逻辑处理程序myhandler</span></span><br><span class="line"><span class="comment">//w, 给客户端回复数据</span></span><br><span class="line"><span class="comment">//req为结构体, 读取客户端发送的数据，参数就是这两不能变</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/go&quot;</span>, myHandler)<span class="comment">// 请求127.0.0.1/go时调用myhandler</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在指定的地址进行监听，开启一个HTTP</span></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;127.0.0.1:8000&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">//客户端代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方式请求一个资源</span></span><br><span class="line">    <span class="comment">//resp, err := http.Get(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line">    <span class="comment">//resp, err := http.Get(&quot;http://www.neihan8.com/article/index.html&quot;)</span></span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:8000/go&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close() <span class="comment">//关闭</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;header = &quot;</span>, resp.Header)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;resp status %s\nstatusCode %d\n&quot;</span>, resp.Status, resp.StatusCode)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;body type = %T\n&quot;</span>, resp.Body)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下为读取服务器回应的主体数据部分，因为回应的主体数据部分是用resp.Body来获取，该接口是一个流所以要通过read的方式将其通过for循环一点一点的读入buf里面</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>) <span class="comment">//切片缓冲区</span></span><br><span class="line">    <span class="keyword">var</span> tmp <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        n, err := resp.Body.Read(buf) <span class="comment">//读取body包内容</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;读取内容结束&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        tmp += <span class="keyword">string</span>(buf[:n]) <span class="comment">//累加读取的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;buf = &quot;</span>, <span class="keyword">string</span>(tmp))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-基础类型&quot;&gt;&lt;a href=&quot;#1-基础类型&quot; class=&quot;headerlink&quot; title=&quot;1.基础类型&quot;&gt;&lt;/a&gt;1.基础类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打印字符必须使用printf，因为println会输出字符的ascii码&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    <category term="Golang" scheme="http://example.com/categories/Golang/"/>
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/05/13/hello-world/"/>
    <id>http://example.com/2021/05/13/hello-world/</id>
    <published>2021-05-13T13:51:00.089Z</published>
    <updated>2021-05-13T13:51:00.089Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
